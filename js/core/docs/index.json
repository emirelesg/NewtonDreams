[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/Constants.js",
    "content": "/**\n * @module Constants\n */\n\n/**\n * Defines how the coordinates of an object will be changed when the object is dragged around.\n * @property {string} BY_PX=\"px\" The position of the object will be changed in pixels.\n * @property {string} BY_UNITS=\"units\" The position of the object will be changed in units. \n */\nexport const MOVE_STYLE = {\n  BY_PX: \"px\",\n  BY_UNITS: \"units\"\n};\n\n/**\n * Defines how a shape is drawn with the methods {@link Shape.moveTo} and {@link Shape.lineTo}.\n * @property {number} NONE=0 Every time a set of coordinates is provided they will be used as absolute coordinates.\n * @property {number} ACCOMULATIVE=1 The next set of coordinates will be used relative to the previous set of coordinates.\n */\nexport const SHAPE_STYLE = {\n  NONE: 0,\n  ACCOMULATIVE: 1\n};\n\n/**\n * Defines if the angle used is in radians or degrees.\n * @property {number} DEG=1 Angle is in degrees.\n * @property {number} RAD=2 Angle is in radians.\n */\nexport const ANGLE_STYLE = {\n  DEG: 1,\n  RAD: 2\n};\n\n/**\n * Useful symbols for simulations. The unicode of every symbol is used.\n * @property {string} BLANK=- Used for labels when no value is provided.\n * @property {string} THETA=\"θ\"\n * @property {string} INF=\"\\u221e\"\n * @property {string} MICRO=\"\\u03BC\"\n * @property {string} OHM=\"\\u2126\"\n * @property {string} LETTERS=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n */\nexport const SYMBOL = {\n  BLANK: \"-\",\n  THETA: \"θ\",\n  INF: \"\\u221e\",\n  MICRO: \"\\u03BC\",\n  OHM: \"\\u2126\",\n  LETTERS: \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n};\n\n/**\n * Types of cursors that an object can have when hovered or dragged.\n * @property {string} DEFAULT=\"default\"\n * @property {string} POINTER=\"pointer\"\n * @property {string} CROSS=\"cross\"\n * @property {string} MOVE=\"move\"\n * @property {string} TEXT=\"text\"\n */\nexport const CURSOR = {\n  DEFAULT: \"default\",\n  POINTER: \"pointer\",\n  CROSS: \"cross\",\n  MOVE: \"move\",\n  TEXT: \"text\"\n};\n\n/**\n * Conversion factor from radians to degrees.\n * @type {number}\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor from degrees to radians.\n * @type {number}\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Conversion factor from meters to centimeters.\n * @type {number}\n */\nexport const M_TO_CM = 100;\n\n/**\n * Conversion factor from centimeters to meters.\n * @type {number}\n */\nexport const CM_TO_M = 1 / 100;\n\n/**\n * Conversion factor from cubic centimeters to cubic meters.\n * @type {number}\n */\nexport const CM3_TO_M3 = 1 / 100 ** 3;\n\n/**\n * Conversion factor from pascals to atmospheres.\n * @type {number}\n */\nexport const PA_TO_ATM = 9.86923E-6;\n\n/**\n * PI constant.\n * @type {number}\n */\nexport const { PI } = Math;\n\n/**\n * 2 * PI constant.\n * @type {number}\n */\nexport const TWO_PI = PI * 2;\n\n/**\n * PI / 2 constant.\n * @type {number}\n */\nexport const HALF_PI = PI / 2;\n\n/**\n * PI / 3 constant.\n * @type {number}\n */\nexport const THIRD_PI = PI / 3;\n\n/**\n * PI / 4 constant.\n * @type {number}\n */\nexport const FOURTH_PI = PI / 4;\n\n/**\n * PI / 5 constant.\n * @type {number}\n */\nexport const FIFTH_PI = PI / 5;\n\n/**\n * PI / 6 constant.\n * @type {number}\n */\nexport const SIXTH_PI = PI / 6;\n\n/**\n * Log 10 constant.\n * @type {number}\n */\nexport const LOG10 = Math.log(10);\n\n/**\n * Sine of 60°.\n * @type {number}\n */\nexport const SIN60 = Math.sin(THIRD_PI);\n\n/**\n * Cosine of 60°.\n * @type {number}\n */\nexport const COS60 = Math.cos(THIRD_PI);\n\n/**\n * Sine of 30°.\n * @type {number}\n */\nexport const SIN30 = COS60;\n\n/**\n * Cosine of 30°.\n * @type {number}\n */\nexport const COS30 = SIN60;\n\n/**\n * Graviy constant.\n * @type {number}\n */\nexport const GRAVITY = -9.81;\n\n/**\n * Coulomb's constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Coulomb_constant\n */\nexport const K = 8.987e9;\n\n/**\n * Vacuum permittivity constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Vacuum_permittivity\n */\nexport const E0 = 8.854e-12;\n\n/**\n * Boltzmann constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Boltzmann_constant\n */\nexport const BOLTZMANN = 1.38064852E-23;\n\n/**\n * Avogadro constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Avogadro_constant\n */\nexport const AVOGADRO = 6.0221409E23;\n\n/**\n * Used when the mouse isn't over an object.\n * @type {number}\n */\nexport const OVER_NOTHING = -1;\n\n/**\n * Used when the mouse isn't dragging an object.\n * @type {null}\n */\nexport const DRAG_NOTHING = null;\n\n/**\n * Defines the default font used for all simulations.\n */\nexport const FONT =\n  \"-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Arial, Sans Serif\";\n\n/**s\n * Defines the default font size for all simulations.\n */\nexport const FONT_SIZE = \"12\";\n\n/**\n * Defines the default font color for all simulaions.\n */\nexport const FONT_COLOR = \"#444444\";\n\n/**\n * Defines the valid font baselines.\n */\nexport const FONT_BASELINE = [\n  \"top\",\n  \"hanging\",\n  \"middle\",\n  \"alphabetic\",\n  \"ideographic\",\n  \"bottom\"\n];\n\n/**\n * Defines teh valid font alignments.\n */\nexport const FONT_ALIGN = [\"left\", \"right\", \"center\", \"start\", \"end\"];\n\n/**\n * Defines the default colors used for simulations.\n */\nexport const COLORS = {\n  RED: \"#F44336\",\n  BLUE: \"#007bff\",\n  GREEN: \"#4CAF50\",\n  YELLOW: \"#FFC510\",\n  PURPLE: \"#673AB7\",\n  BROWN: \"#795548\",\n  LIGHT_GREEN: \"#CDDC39\",\n  GRAY: \"#607D8B\",\n  LIGHT_GRAY: \"#8FA4AD\",\n  WHITE: \"#FFFFFF\",\n  BLACK: \"#000000\",\n  COMPONENT: \"#B7B7B7\"\n};\n\n/**\n * Defines the default colors used for box displays.\n * Colors are provided in matching pairs of BACKGROUND and BORDER colors.\n */\nexport const BOX_COLORS = {\n  BLUE: {\n    BACKGROUND: \"#F0F5FF\",\n    BORDER: \"#A2C1FF\"\n  },\n  GREEN: {\n    BACKGROUND: \"#D5E8D4\",\n    BORDER: \"#82B366\"\n  },\n  RED: {\n    BACKGROUND: \"#F8CECC\",\n    BORDER: \"#B85450\"\n  },\n  YELLOW: {\n    BACKGROUND: \"#FFF2CC\",\n    BORDER: \"#D6B656\"\n  },\n  ORANGE: {\n    BACKGROUND: \"#FFE6CC\",\n    BORDER: \"#D79B00\"\n  },\n  PURPLE: {\n    BACKGROUND: \"#E1D5E7\",\n    BORDER: \"#9673A6\"\n  },\n  GRAY: {\n    BACKGROUND: \"#F5F5F5\",\n    BORDER: \"#CCCCCC\"\n  }\n};\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/Constants.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "variable",
    "name": "MOVE_STYLE",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~MOVE_STYLE",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{MOVE_STYLE}",
    "description": "Defines how the coordinates of an object will be changed when the object is dragged around.",
    "lineNumber": 10,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"px\"",
        "defaultRaw": "px",
        "name": "BY_PX",
        "description": "The position of the object will be changed in pixels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"units\"",
        "defaultRaw": "units",
        "name": "BY_UNITS",
        "description": "The position of the object will be changed in units."
      }
    ],
    "type": {
      "types": [
        "{\"BY_PX\": string, \"BY_UNITS\": string}"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "variable",
    "name": "SHAPE_STYLE",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~SHAPE_STYLE",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{SHAPE_STYLE}",
    "description": "Defines how a shape is drawn with the methods {@link Shape.moveTo} and {@link Shape.lineTo}.",
    "lineNumber": 20,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "NONE",
        "description": "Every time a set of coordinates is provided they will be used as absolute coordinates."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "ACCOMULATIVE",
        "description": "The next set of coordinates will be used relative to the previous set of coordinates."
      }
    ],
    "type": {
      "types": [
        "{\"NONE\": *, \"ACCOMULATIVE\": number}"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "ANGLE_STYLE",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~ANGLE_STYLE",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{ANGLE_STYLE}",
    "description": "Defines if the angle used is in radians or degrees.",
    "lineNumber": 30,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "DEG",
        "description": "Angle is in degrees."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "RAD",
        "description": "Angle is in radians."
      }
    ],
    "type": {
      "types": [
        "{\"DEG\": number, \"RAD\": number}"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "SYMBOL",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~SYMBOL",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{SYMBOL}",
    "description": "Useful symbols for simulations. The unicode of every symbol is used.",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "-",
        "defaultRaw": "-",
        "name": "BLANK",
        "description": "Used for labels when no value is provided."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"θ\"",
        "defaultRaw": "θ",
        "name": "THETA",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"\\u221e\"",
        "defaultRaw": "∞",
        "name": "INF",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"\\u03BC\"",
        "defaultRaw": "μ",
        "name": "MICRO",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"\\u2126\"",
        "defaultRaw": "Ω",
        "name": "OHM",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
        "defaultRaw": "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "name": "LETTERS",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "{\"BLANK\": string, \"THETA\": string, \"INF\": string, \"MICRO\": string, \"OHM\": string, \"LETTERS\": string}"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "CURSOR",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~CURSOR",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{CURSOR}",
    "description": "Types of cursors that an object can have when hovered or dragged.",
    "lineNumber": 61,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"default\"",
        "defaultRaw": "default",
        "name": "DEFAULT",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"pointer\"",
        "defaultRaw": "pointer",
        "name": "POINTER",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"cross\"",
        "defaultRaw": "cross",
        "name": "CROSS",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"move\"",
        "defaultRaw": "move",
        "name": "MOVE",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "\"text\"",
        "defaultRaw": "text",
        "name": "TEXT",
        "description": ""
      }
    ],
    "type": {
      "types": [
        "{\"DEFAULT\": string, \"POINTER\": string, \"CROSS\": string, \"MOVE\": string, \"TEXT\": string}"
      ]
    }
  },
  {
    "__docId__": 54,
    "kind": "variable",
    "name": "RAD_TO_DEG",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~RAD_TO_DEG",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{RAD_TO_DEG}",
    "description": "Conversion factor from radians to degrees.",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "variable",
    "name": "DEG_TO_RAD",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~DEG_TO_RAD",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{DEG_TO_RAD}",
    "description": "Conversion factor from degrees to radians.",
    "lineNumber": 79,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "variable",
    "name": "M_TO_CM",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~M_TO_CM",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{M_TO_CM}",
    "description": "Conversion factor from meters to centimeters.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "CM_TO_M",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~CM_TO_M",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{CM_TO_M}",
    "description": "Conversion factor from centimeters to meters.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "variable",
    "name": "CM3_TO_M3",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~CM3_TO_M3",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{CM3_TO_M3}",
    "description": "Conversion factor from cubic centimeters to cubic meters.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "variable",
    "name": "PA_TO_ATM",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~PA_TO_ATM",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{PA_TO_ATM}",
    "description": "Conversion factor from pascals to atmospheres.",
    "lineNumber": 103,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "variable",
    "name": "PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{PI}",
    "description": "PI constant.",
    "lineNumber": 109,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "variable",
    "name": "TWO_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~TWO_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{TWO_PI}",
    "description": "2 * PI constant.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "variable",
    "name": "HALF_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~HALF_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{HALF_PI}",
    "description": "PI / 2 constant.",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "variable",
    "name": "THIRD_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~THIRD_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{THIRD_PI}",
    "description": "PI / 3 constant.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "variable",
    "name": "FOURTH_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FOURTH_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FOURTH_PI}",
    "description": "PI / 4 constant.",
    "lineNumber": 133,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "variable",
    "name": "FIFTH_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FIFTH_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FIFTH_PI}",
    "description": "PI / 5 constant.",
    "lineNumber": 139,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 66,
    "kind": "variable",
    "name": "SIXTH_PI",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~SIXTH_PI",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{SIXTH_PI}",
    "description": "PI / 6 constant.",
    "lineNumber": 145,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 67,
    "kind": "variable",
    "name": "LOG10",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~LOG10",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{LOG10}",
    "description": "Log 10 constant.",
    "lineNumber": 151,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 68,
    "kind": "variable",
    "name": "SIN60",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~SIN60",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{SIN60}",
    "description": "Sine of 60°.",
    "lineNumber": 157,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 69,
    "kind": "variable",
    "name": "COS60",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~COS60",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{COS60}",
    "description": "Cosine of 60°.",
    "lineNumber": 163,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "variable",
    "name": "SIN30",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~SIN30",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{SIN30}",
    "description": "Sine of 30°.",
    "lineNumber": 169,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "variable",
    "name": "COS30",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~COS30",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{COS30}",
    "description": "Cosine of 30°.",
    "lineNumber": 175,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "variable",
    "name": "GRAVITY",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~GRAVITY",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{GRAVITY}",
    "description": "Graviy constant.",
    "lineNumber": 181,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "variable",
    "name": "K",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~K",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{K}",
    "description": "Coulomb's constant.",
    "see": [
      "https://en.wikipedia.org/wiki/Coulomb_constant"
    ],
    "lineNumber": 188,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "variable",
    "name": "E0",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~E0",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{E0}",
    "description": "Vacuum permittivity constant.",
    "see": [
      "https://en.wikipedia.org/wiki/Vacuum_permittivity"
    ],
    "lineNumber": 195,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "variable",
    "name": "BOLTZMANN",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~BOLTZMANN",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{BOLTZMANN}",
    "description": "Boltzmann constant.",
    "see": [
      "https://en.wikipedia.org/wiki/Boltzmann_constant"
    ],
    "lineNumber": 202,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "variable",
    "name": "AVOGADRO",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~AVOGADRO",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{AVOGADRO}",
    "description": "Avogadro constant.",
    "see": [
      "https://en.wikipedia.org/wiki/Avogadro_constant"
    ],
    "lineNumber": 209,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "variable",
    "name": "OVER_NOTHING",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~OVER_NOTHING",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{OVER_NOTHING}",
    "description": "Used when the mouse isn't over an object.",
    "lineNumber": 215,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "variable",
    "name": "DRAG_NOTHING",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~DRAG_NOTHING",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{DRAG_NOTHING}",
    "description": "Used when the mouse isn't dragging an object.",
    "lineNumber": 221,
    "type": {
      "nullable": null,
      "types": [
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "variable",
    "name": "FONT",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FONT",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FONT}",
    "description": "Defines the default font used for all simulations.",
    "lineNumber": 226,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "FONT_SIZE",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FONT_SIZE",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FONT_SIZE}",
    "description": "s\nDefines the default font size for all simulations.",
    "lineNumber": 232,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 81,
    "kind": "variable",
    "name": "FONT_COLOR",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FONT_COLOR",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FONT_COLOR}",
    "description": "Defines the default font color for all simulaions.",
    "lineNumber": 237,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "variable",
    "name": "FONT_BASELINE",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FONT_BASELINE",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FONT_BASELINE}",
    "description": "Defines the valid font baselines.",
    "lineNumber": 242,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "variable",
    "name": "FONT_ALIGN",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~FONT_ALIGN",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{FONT_ALIGN}",
    "description": "Defines teh valid font alignments.",
    "lineNumber": 254,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "variable",
    "name": "COLORS",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~COLORS",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{COLORS}",
    "description": "Defines the default colors used for simulations.",
    "lineNumber": 259,
    "type": {
      "types": [
        "{\"RED\": string, \"BLUE\": string, \"GREEN\": string, \"YELLOW\": string, \"PURPLE\": string, \"BROWN\": string, \"LIGHT_GREEN\": string, \"GRAY\": string, \"LIGHT_GRAY\": string, \"WHITE\": string, \"BLACK\": string, \"COMPONENT\": string}"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "variable",
    "name": "BOX_COLORS",
    "memberof": "src/Constants.js",
    "static": true,
    "longname": "src/Constants.js~BOX_COLORS",
    "access": "public",
    "export": true,
    "importPath": "core/src/Constants.js",
    "importStyle": "{BOX_COLORS}",
    "description": "Defines the default colors used for box displays.\nColors are provided in matching pairs of BACKGROUND and BORDER colors.",
    "lineNumber": 278,
    "type": {
      "types": [
        "{\"BLUE\": *, \"GREEN\": *, \"RED\": *, \"YELLOW\": *, \"ORANGE\": *, \"PURPLE\": *, \"GRAY\": *}"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/Font.js",
    "content": "import * as constants from \"./Constants\";\n\n/**\n * Stores the font settings currently used by a World Element.\n * @private\n * @class Font\n */\nexport default class Font {\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Font properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    /**\n     * Sets the font size in pixels. \n     * Default value is {@link FONT_SIZE}.\n     * @type {number|string}\n     */\n    this.size = constants.FONT_SIZE;\n\n    /**\n     * Sets the font face used.\n     * Default value is {@link FONT}.\n     * @type {string}\n     */\n    this.face = constants.FONT;\n\n    /**\n     * Sets the font color in HEX format. \n     * Default value is {@link FONT_COLOR}.\n     * @type {string}\n     */\n    this.color = constants.FONT_COLOR;\n\n    /**\n     * Sets the baseline value for the text.\n     * Default value is middle.\n     * @type {string}\n     */\n    this.baseline = \"middle\";\n\n    /**\n     * Sets the alignment value for the text.\n     * Default value is center.\n     * @type {string}\n     */\n    this.align = \"center\";\n\n    /**\n     * Sets the font weight used. If the font face has different weights available, another value can be selected.\n     * Default value is normal.\n     * @type {string}\n     */\n    this.weight = \"normal\";\n\n    /**\n     * Sets the line spacing between text lines. The value is multiplied by the current font size.\n     * Default value is 1.\n     * @type {number}\n     */\n    this.spacing = 1;\n\n    // Apply user settings.\n    this.set(opts);\n  }\n\n  /**\n   * Given an object with valid properties, it assigns their values to the object.\n   * This allows for a signle line to modify multiple properties of the font object.\n   * @public\n   * @param {object} opts Object with font properties.\n   */\n  set(opts) {\n    if (opts) {\n      if (opts.size) this.size = opts.size;\n      if (opts.face) this.face = opts.face;\n      if (opts.color) this.color = opts.color;\n      if (opts.baseline && Font.validateBaseline(opts.baseline))\n        this.baseline = opts.baseline;\n      if (opts.align && Font.validateAlign(opts.align)) this.align = opts.align;\n      if (opts.weight) this.weight = opts.weight;\n      if (opts.spacing) this.spacing = opts.spacing;\n    }\n  }\n\n  /**\n   * Checks if the provided baseline value is valid for a canvas element.\n   * Valid baseline values include: \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\".\n   * @private \n   * @param {string} baseline Baseline value to check.\n   * @throws {error} Error when the baseline value is invalid.\n   * @returns {boolean} True if baseline value is valid.\n   */\n  static validateBaseline(baseline) {\n    if (constants.FONT_BASELINE.includes(baseline)) {\n      return true;\n    }\n    throw new Error(`${baseline} is not a valid baseline.`);\n  }\n  \n  /**\n   * Checks if the provided align value is valid for a canvas element.\n   * Valid align values: \"left\", \"right\", \"center\", \"start\", \"end\".\n   * @private \n   * @param {string} align Align value to check.\n   * @throws {error} Error when the align value is invalid.\n   * @returns {boolean} True if align value is valid.\n   */\n  static validateAlign(align) {\n    if (constants.FONT_ALIGN.includes(align)) {\n      return true;\n    }\n    throw new Error(`${align} is not a valid text align.`);\n  }\n  \n  /**\n   * Sets the current font settings to the context.\n   * @private\n   * @param {object} ctx Canvas context object.\n   */\n  toCtx(ctx) {\n    if (this.weight !== \"normal\") {\n      ctx.font = `${this.weight} ${this.size}px ${this.face}`;\n    } else {\n      ctx.font = `${this.size}px ${this.face}`;\n    }\n    ctx.textAlign = this.align;\n    ctx.textBaseline = this.baseline;\n    ctx.fillStyle = this.color;\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/Font.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "Font",
    "memberof": "src/Font.js",
    "static": true,
    "longname": "src/Font.js~Font",
    "access": "private",
    "export": true,
    "importPath": "core/src/Font.js",
    "importStyle": "Font",
    "description": "Stores the font settings currently used by a World Element.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Font"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Font.js~Font",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Font.js~Font#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Font properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "size",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#size",
    "access": "public",
    "description": "Sets the font size in pixels. \nDefault value is {@link FONT_SIZE}.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "number",
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "face",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#face",
    "access": "public",
    "description": "Sets the font face used.\nDefault value is {@link FONT}.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "color",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#color",
    "access": "public",
    "description": "Sets the font color in HEX format. \nDefault value is {@link FONT_COLOR}.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "baseline",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#baseline",
    "access": "public",
    "description": "Sets the baseline value for the text.\nDefault value is middle.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 93,
    "kind": "member",
    "name": "align",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#align",
    "access": "public",
    "description": "Sets the alignment value for the text.\nDefault value is center.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "weight",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#weight",
    "access": "public",
    "description": "Sets the font weight used. If the font face has different weights available, another value can be selected.\nDefault value is normal.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "spacing",
    "memberof": "src/Font.js~Font",
    "static": false,
    "longname": "src/Font.js~Font#spacing",
    "access": "public",
    "description": "Sets the line spacing between text lines. The value is multiplied by the current font size.\nDefault value is 1.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "set",
    "memberof": "src/Font.js~Font",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Font.js~Font#set",
    "access": "public",
    "description": "Given an object with valid properties, it assigns their values to the object.\nThis allows for a signle line to modify multiple properties of the font object.",
    "lineNumber": 75,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Object with font properties."
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "validateBaseline",
    "memberof": "src/Font.js~Font",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Font.js~Font.validateBaseline",
    "access": "private",
    "description": "Checks if the provided baseline value is valid for a canvas element.\nValid baseline values include: \"top\", \"hanging\", \"middle\", \"alphabetic\", \"ideographic\", \"bottom\".",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if baseline value is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "baseline",
        "description": "Baseline value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if baseline value is valid."
    },
    "throws": [
      {
        "types": [
          "error"
        ],
        "description": "Error when the baseline value is invalid."
      }
    ]
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "validateAlign",
    "memberof": "src/Font.js~Font",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Font.js~Font.validateAlign",
    "access": "private",
    "description": "Checks if the provided align value is valid for a canvas element.\nValid align values: \"left\", \"right\", \"center\", \"start\", \"end\".",
    "lineNumber": 111,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if align value is valid."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "align",
        "description": "Align value to check."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if align value is valid."
    },
    "throws": [
      {
        "types": [
          "error"
        ],
        "description": "Error when the align value is invalid."
      }
    ]
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "toCtx",
    "memberof": "src/Font.js~Font",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Font.js~Font#toCtx",
    "access": "private",
    "description": "Sets the current font settings to the context.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Canvas context object."
      }
    ],
    "return": null
  },
  {
    "__docId__": 107,
    "kind": "file",
    "name": "src/Renderer.js",
    "content": "import * as utils from \"./Utils\";\nimport World from \"./World\";\n\n/**\n * Enables an element to be prerendered in a hidden canvas. Once an element is prerendered it can be drawn to the main canvas faster.\n * If an element has not changed, then prerendered version will be used, thus optimizing the application.\n * @private\n * @class Renderer\n */\nexport default class Renderer {\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Renderer properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    /**\n     * Sets if the target object is an axis. It is important to set this property for all axis objects.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.isAxis = false;\n\n    /**\n     * Sets the object that will be prerendered.\n     * Default value is undefined.\n     * @type {object}\n     */\n    this.parent = undefined;\n\n    /**\n     * Flag for signaling when then object has been drawn in the hidden canvas.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    /**\n     * Flag for switching the renderer on or off. If it is set to false, then the object will\n     * be drawn normally on the main canvas.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.enabled = true;\n\n    /**\n     * Sets the reference to the world object. \n     * Default value is undefined.\n     * @type {World}\n     */\n    this.world = undefined;\n\n    /**\n     * Sets if the rendered image will be drawn with respect to the axis of the world or not.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.absolute = false;\n\n    /**\n     * Canvas element where the object will be prerendered.\n     * @type {object}\n     */\n    this.canvas = document.createElement(\"canvas\");\n\n    /**\n     * Context of the canvas element where the object will be prerendered.\n     * @type {object}\n     */\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    /**\n     * Function used to set the drawing procedure for the renderer.\n     * @type {function}\n     */\n    this.callback = undefined;\n\n    /**\n     * Arguments passed to the callback function used to draw onto the renderer.\n     * @type {*}\n     */\n    this.callbackArgs = undefined;\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Sets the world object used by the renderer. It is automatically set by the world\n   * when the element is added to the world.\n   * @private\n   * @param {World} world World object where the renderer will draw the render.\n   */\n  setWorld(world) {\n    this.world = world;\n    this.resize();\n  }\n\n  /**\n   * Sets the callback function for when the renderer is drawn.\n   * @param {function} f Callback function.\n   * @param {*} args Arguments passed to the callback function when called.\n   */\n  setCallback(f, args) {\n    this.resize();\n    this.render();\n    this.callback = f;\n    this.callbackArgs = args;\n  }\n\n  /**\n   * Set the flags required to start the rendering process.\n   * The flag {@link Renderer.enabled} is set to true and the flag {@link Renderer.rendered} is set to false.\n   * @public\n   */\n  render() {\n    this.enabled = true;\n    this.rendered = false;\n  }\n\n  /**\n   * Resizes the rendered canvas to match the size of the world's canvas.\n   * It is automatically called when the canvas gets resized.\n   * @private\n   */\n  resize() {\n    const { pxRatio, canvas } = this.world;\n    this.canvas.width = canvas.width;\n    this.canvas.height = canvas.height;\n    this.ctx.scale(pxRatio, pxRatio);\n    this.rendered = false;\n  }\n\n  /**\n   * Starts the drawing process of the rendered canvas on the world canvas.\n   * It sets the translation depending on the value of {@link Renderer.absolute}.\n   * @public\n   */\n  begin() {\n    const { width, height } = this.world;\n    this.ctx.save();\n    this.ctx.clearRect(0, 0, width, height);\n    if (!this.absolute) {\n      const axis = this.isAxis ? this.parent : this.world.axis;\n      this.ctx.translate(axis.position.x, axis.position.y);\n    }\n  }\n\n  /**\n   * Finishes the drawing process of the rendered canvas on the world canvas.\n   * @public\n   */\n  end() {\n    this.ctx.restore();\n    this.rendered = true;\n  }\n\n  /**\n   * Draws the rendered canvas onto the world canvas.\n   * @private\n   */\n  draw() {\n    const { width, height, ctx } = this.world;\n    if (this.absolute) {\n      ctx.drawImage(this.canvas, 0, 0, width, height);\n    } else {\n      const axis = this.isAxis ? this.parent : this.world.axis;\n      ctx.drawImage(\n        this.canvas,\n        -axis.position.x,\n        -axis.position.y,\n        width,\n        height\n      );\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/Renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 108,
    "kind": "class",
    "name": "Renderer",
    "memberof": "src/Renderer.js",
    "static": true,
    "longname": "src/Renderer.js~Renderer",
    "access": "private",
    "export": true,
    "importPath": "core/src/Renderer.js",
    "importStyle": "Renderer",
    "description": "Enables an element to be prerendered in a hidden canvas. Once an element is prerendered it can be drawn to the main canvas faster.\nIf an element has not changed, then prerendered version will be used, thus optimizing the application.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Renderer"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 109,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Renderer properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "isAxis",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#isAxis",
    "access": "public",
    "description": "Sets if the target object is an axis. It is important to set this property for all axis objects.\nDefault value is false.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "parent",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#parent",
    "access": "public",
    "description": "Sets the object that will be prerendered.\nDefault value is undefined.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "member",
    "name": "rendered",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#rendered",
    "access": "public",
    "description": "Flag for signaling when then object has been drawn in the hidden canvas.\nDefault value is false.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 113,
    "kind": "member",
    "name": "enabled",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#enabled",
    "access": "public",
    "description": "Flag for switching the renderer on or off. If it is set to false, then the object will\nbe drawn normally on the main canvas.\nDefault value is true.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 114,
    "kind": "member",
    "name": "world",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#world",
    "access": "public",
    "description": "Sets the reference to the world object. \nDefault value is undefined.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "World"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 115,
    "kind": "member",
    "name": "absolute",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#absolute",
    "access": "public",
    "description": "Sets if the rendered image will be drawn with respect to the axis of the world or not.\nDefault value is false.",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#canvas",
    "access": "public",
    "description": "Canvas element where the object will be prerendered.",
    "lineNumber": 65,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 117,
    "kind": "member",
    "name": "ctx",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#ctx",
    "access": "public",
    "description": "Context of the canvas element where the object will be prerendered.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 118,
    "kind": "member",
    "name": "callback",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#callback",
    "access": "public",
    "description": "Function used to set the drawing procedure for the renderer.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "callbackArgs",
    "memberof": "src/Renderer.js~Renderer",
    "static": false,
    "longname": "src/Renderer.js~Renderer#callbackArgs",
    "access": "public",
    "description": "Arguments passed to the callback function used to draw onto the renderer.",
    "lineNumber": 83,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "setWorld",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#setWorld",
    "access": "private",
    "description": "Sets the world object used by the renderer. It is automatically set by the world\nwhen the element is added to the world.",
    "lineNumber": 96,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "World object where the renderer will draw the render."
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "setCallback",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#setCallback",
    "access": "public",
    "description": "Sets the callback function for when the renderer is drawn.",
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "Callback function."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Arguments passed to the callback function when called."
      }
    ],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "render",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#render",
    "access": "public",
    "description": "Set the flags required to start the rendering process.\nThe flag {@link Renderer.enabled} is set to true and the flag {@link Renderer.rendered} is set to false.",
    "lineNumber": 118,
    "params": [],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "resize",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#resize",
    "access": "private",
    "description": "Resizes the rendered canvas to match the size of the world's canvas.\nIt is automatically called when the canvas gets resized.",
    "lineNumber": 128,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "method",
    "name": "begin",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#begin",
    "access": "public",
    "description": "Starts the drawing process of the rendered canvas on the world canvas.\nIt sets the translation depending on the value of {@link Renderer.absolute}.",
    "lineNumber": 141,
    "params": [],
    "return": null
  },
  {
    "__docId__": 131,
    "kind": "method",
    "name": "end",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#end",
    "access": "public",
    "description": "Finishes the drawing process of the rendered canvas on the world canvas.",
    "lineNumber": 155,
    "params": [],
    "return": null
  },
  {
    "__docId__": 133,
    "kind": "method",
    "name": "draw",
    "memberof": "src/Renderer.js~Renderer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Renderer.js~Renderer#draw",
    "access": "private",
    "description": "Draws the rendered canvas onto the world canvas.",
    "lineNumber": 164,
    "params": [],
    "return": null
  },
  {
    "__docId__": 134,
    "kind": "file",
    "name": "src/Scale.js",
    "content": "import * as utils from \"./Utils\";\n\n /**\n  * Stores the scale properties in a particular axis (-x or -y).\n  * @public\n  * @class Scale\n  */\nexport default class Scale {\n  \n  /**\n   * @constructor\n   * @param {number} px Number of pixels that one magnitude value is equivalent.\n   * @param {number} mag Magnitude of the scale.\n   * @param {string} [unit=\"\"] Unit of the scale.\n   */\n  constructor(px, mag, unit) {\n\n    /**\n     * Number of pixels that one magnitude value is equivalent.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.px = 0;\n\n    /**\n     * Magnitude of the scale.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.mag = 0;\n\n    /**\n     * Units of the scale. These units are displayed in the axis.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.unit = \"\";\n    \n    /**\n     * Conversion factor from units to pixels.\n     * Default value is 0.\n     * @type {number}\n     * @example\n     * var pixels = units * scale.toPixels;\n     */\n    this.toPx = 0;\n    \n    /**\n     * Conversion factor from pixels to units.\n     * Default value is 0.\n     * @type {number}\n     * @example\n     * var units = pixels * scale.toUnits;\n     */\n    this.toUnits = 0;\n    \n    // Apply user settings.\n    this.set(px, mag, unit);\n\n  }\n\n  /**\n   * Sets the scale for the axis. It calculates the conversion factors between pixels and units.\n   * @public\n   * @param {number} px Number of pixels that one magnitude value is equivalent.\n   * @param {number} mag Magnitude of the scale.\n   * @param {string} [unit=\"\"] Unit of the scale.\n   */\n  set(px, mag, unit) {\n    this.px = px;\n    this.mag = mag;\n    this.unit = utils.isString(unit) ? unit : \"\";\n    this.toPx = this.px / this.mag;\n    this.toUnits = this.mag / this.px;\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/Scale.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 135,
    "kind": "class",
    "name": "Scale",
    "memberof": "src/Scale.js",
    "static": true,
    "longname": "src/Scale.js~Scale",
    "access": "public",
    "export": true,
    "importPath": "core/src/Scale.js",
    "importStyle": "Scale",
    "description": "Stores the scale properties in a particular axis (-x or -y).",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Scale"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 136,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/Scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Scale.js~Scale#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "px",
        "description": "Number of pixels that one magnitude value is equivalent."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mag",
        "description": "Magnitude of the scale."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "unit",
        "description": "Unit of the scale."
      }
    ]
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "px",
    "memberof": "src/Scale.js~Scale",
    "static": false,
    "longname": "src/Scale.js~Scale#px",
    "access": "public",
    "description": "Number of pixels that one magnitude value is equivalent.\nDefault value is 0.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "mag",
    "memberof": "src/Scale.js~Scale",
    "static": false,
    "longname": "src/Scale.js~Scale#mag",
    "access": "public",
    "description": "Magnitude of the scale.\nDefault value is 0.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "unit",
    "memberof": "src/Scale.js~Scale",
    "static": false,
    "longname": "src/Scale.js~Scale#unit",
    "access": "public",
    "description": "Units of the scale. These units are displayed in the axis.\nDefault value is \"\".",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "toPx",
    "memberof": "src/Scale.js~Scale",
    "static": false,
    "longname": "src/Scale.js~Scale#toPx",
    "access": "public",
    "description": "Conversion factor from units to pixels.\nDefault value is 0.",
    "examples": [
      "var pixels = units * scale.toPixels;"
    ],
    "lineNumber": 46,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "toUnits",
    "memberof": "src/Scale.js~Scale",
    "static": false,
    "longname": "src/Scale.js~Scale#toUnits",
    "access": "public",
    "description": "Conversion factor from pixels to units.\nDefault value is 0.",
    "examples": [
      "var units = pixels * scale.toUnits;"
    ],
    "lineNumber": 55,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "method",
    "name": "set",
    "memberof": "src/Scale.js~Scale",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/Scale.js~Scale#set",
    "access": "public",
    "description": "Sets the scale for the axis. It calculates the conversion factors between pixels and units.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "px",
        "description": "Number of pixels that one magnitude value is equivalent."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mag",
        "description": "Magnitude of the scale."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"\"",
        "defaultRaw": "",
        "name": "unit",
        "description": "Unit of the scale."
      }
    ],
    "return": null
  },
  {
    "__docId__": 148,
    "kind": "file",
    "name": "src/Utils.js",
    "content": "import * as constants from \"./Constants\";\n\n/**\n * Obtains the pixel ratio of the device. Used to scale properly the canvas for high resolution devices.\n * @public\n * @param {object} ctx Canvas context object.\n * @returns {number} The pixel ratio of the device.\n */\nexport function getPixelRatio(ctx) {\n  const devicePixelRatio = window.devicePixelRatio || 1;\n  const backingStoreRatio =\n    ctx.webkitBackingStorePixelRatio ||\n    ctx.mozBackingStorePixelRatio ||\n    ctx.msBackingStorePixelRatio ||\n    ctx.oBackingStorePixelRatio ||\n    ctx.backingStorePixelRatio ||\n    1;\n  return devicePixelRatio / backingStoreRatio;\n}\n\n/**\n * Makes sure that a HTML id allways has a # at the beginning. \n * If the provided id already has a # then it returns the same id, otherwise it is added.\n * @public\n * @param {string} id Id of an HTML object.\n * @returns {string} Id with a # prepended.\n */\nexport function fixId(id) {\n  return id[0] === \"#\" ? id : `#${id}`;\n}\n\n/**\n * Round a number to a given amount of decimal places.\n * @public\n * @param {number} value Value to round.\n * @param {number} precision Amount of decimal places required.\n * @returns {number} Rounded number.\n */\nexport function round(value, precision) {\n  const multiplier = 10 ** (precision || 0);\n  return Math.round(value * multiplier) / multiplier;\n}\n\n/**\n * Constrain a value within a range of values.\n * If value > max then value = max;\n * If value < min then value = min;\n * @public\n * @param {number} val Value to clamp within range.\n * @param {number} min Minimum acceptable value.\n * @param {number} max Maximum acceptable value.\n * @returns {number} Constrained value to the given range.\n */\nexport function clamp(val, min, max) {\n  if (val > max) return max;\n  if (val < min) return min;\n  return val;\n}\n\n/**\n * Cosine function that can accept angles in radians or degrees.\n * @public\n * @param {number} val Angle for calculating the cosine.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Cosine of the angle.\n */\nexport function cos(val, type) {\n  return Math.cos(\n    type === constants.ANGLE_STYLE.DEG ? val * constants.DEG_TO_RAD : val\n  );\n}\n\n/**\n * Sine function that can accept angles in radians or degrees.\n * @public\n * @param {number} val Angle for calculating the sine.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Sine of the angle.\n */\nexport function sin(val, type) {\n  return Math.sin(\n    type === constants.ANGLE_STYLE.DEG ? val * constants.DEG_TO_RAD : val\n  );\n}\n\n/**\n * Test if an object is a function.\n * @public\n * @param {object} f Object to test.\n * @returns {boolean} True if the object is a function, false otherwise.\n */\nexport function isFunction(f) {\n  return typeof f === \"function\";\n}\n\n/**\n * Test if an object is an object.\n * @public\n * @param {object} o Object to test.\n * @returns {boolean} True if the object is an object, false otherwise.\n */\nexport function isObject(o) {\n  return typeof o === \"object\";\n}\n\n/**\n * Test if an object is a string.\n * @public\n * @param {object} s Object to test.\n * @returns {boolean} True if the object is a string, false otherwise.\n */\nexport function isString(s) {\n  return typeof s === \"string\";\n}\n\n/**\n * Given a set of two points the squared distance is calculated.\n * This is faster than calculating the Euclidean distance between them, since no square root is calculated.\n * @public\n * @param {number} x0 Initial -x coordinate.\n * @param {number} y0 Initial -y coordinate.\n * @param {number} x1 Final -x coordinate.\n * @param {number} y1 Final -y coordinate.\n * @returns {number} The squared distance between points.\n */\nexport function distSquared(x0, y0, x1, y1) {\n  return (x1 - x0) ** 2 + (y1 - y0) ** 2;\n}\n\n/**\n * Given an angle makes sure that it is in radians.\n * @public\n * @param {number} angle Angle to convert to radians.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Angle in radians.\n */\nexport function rad(angle, type) {\n  return type === constants.ANGLE_STYLE.DEG ? angle * constants.DEG_TO_RAD : angle;\n}\n\n/**\n * Determines if a point is inside of a box.\n * Often used to test is the mouse is over an element.\n * @public\n * @param {number} x -x coordinate to test.\n * @param {number} y -y coordinate to test.\n * @param {number} bx -x center coordinate of the box.\n * @param {number} by -y center coordinate of the box.\n * @param {number} bw Half of the box's width.\n * @param {number} bh Half of the box's height.\n * @returns {boolean} True if point is within the box, false otherwise.\n */\nexport function isCoordInside(x, y, bx, by, bw, bh) {\n  return (bx - x) ** 2 < bw ** 2 && (y - by) ** 2 < bh ** 2;\n}\n\n/**\n * Format a number to have a certain number of decimal places and/or fixed places and\n * add a unit label. Used to format the strings of labels and sliders.\n * If the input value is a {@link SYMBOL} then return the same symbol.\n * @public\n * @param {number|string} val Input number. Can also be a string or a symbol such as in {@link SYMBOL}.\n * @param {string} units Units of the input number.\n * @param {number} decPlaces Amount of decimal places to round.\n * @param {number} fixPlaces Fix the amount of decimal places. If the number doesn't have enough, zeros will be added.\n * @returns {string} Formated number.\n */\nexport function formatValue(val, units, decPlaces, fixPlaces) {\n  if (val === constants.SYMBOL.BLANK || val === constants.SYMBOL.INF)\n    return val;\n  let result =\n    Number.isNaN(val) && val !== undefined ? 0 : round(val, decPlaces);\n  if (fixPlaces) result = result.toFixed(decPlaces);\n  return units === \"°\" || this.units === \"º\"\n    ? `${result}°`\n    : `${result} ${units}`;\n}\n\n/**\n * Assign the matching properties from the args object to the obj object.\n * This allows for settings to be passed in single line and set on the receiving object.\n * Almost all World Element objects accept such settings on their constructors.\n * @example\n * loadOptions(font, { face: \"Helvetica\", size: 12 });\n * @public\n * @param {object} obj Object where the settings will be loaded.\n * @param {object} args Object with matching properties from obj.\n */\nexport function loadOptions(obj, args) {\n  if (args) {\n    const keys = Object.keys(args);\n    for (let i = 0; i < keys.length; i += 1) {\n      if (Object.prototype.hasOwnProperty.call(obj, keys[i])) {\n        obj[keys[i]] = args[keys[i]];\n      }\n    }\n  }\n}\n\n/**\n * Finds the best fitting scale for a given range. Used for simulations where the scale of the data\n * changes dramatically.\n * @param {number} value Corresponds to the range between the minimum required value to be displayed and the maximum required value to be displayed.\n * @param {number} stepAmount Desired amount of steps within the range.\n * @returns {number} Magnitude of the step size. \n */\nexport function calcStepSize(value, stepAmount) {\n  \n  // Calculate initial guess at step size\n  const tempStep = value / stepAmount;\n\n  // Get the magnitude of the step size\n  const mag = Math.floor(Math.log(tempStep) / constants.LOG10);\n  const magPow = 10 ** mag;\n\n  // Calculate the most significant digit of the new step size\n  let magMsd = Math.round(tempStep / magPow + 0.5);\n\n  // Promote the MSD to either 1, 2, or 5\n  if (magMsd > 5.0) {\n    magMsd = 10.0;\n  } else if (magMsd > 2.0) {\n    magMsd = 5.0;\n  } else if (magMsd > 1) {\n    magMsd = 2.0;\n  }\n\n  return magMsd * magPow;\n}\n\n/**\n * Generate a random number following a gaussian distribuition.\n * @public\n * @param {number} n Amount of iterations.\n * @returns {number} Random number that follows a gaussian distribuition.\n */\nexport function gaussian(n) {\n  let sum = 0;\n  for (let i = 0; i < n; i += 1) {\n    sum += Math.random();\n  }\n  return sum / n;\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/Utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 149,
    "kind": "function",
    "name": "getPixelRatio",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~getPixelRatio",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{getPixelRatio}",
    "description": "Obtains the pixel ratio of the device. Used to scale properly the canvas for high resolution devices.",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The pixel ratio of the device."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Canvas context object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The pixel ratio of the device."
    }
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "fixId",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~fixId",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{fixId}",
    "description": "Makes sure that a HTML id allways has a # at the beginning. \nIf the provided id already has a # then it returns the same id, otherwise it is added.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Id with a # prepended."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "Id of an HTML object."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Id with a # prepended."
    }
  },
  {
    "__docId__": 151,
    "kind": "function",
    "name": "round",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~round",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{round}",
    "description": "Round a number to a given amount of decimal places.",
    "lineNumber": 39,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Rounded number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Value to round."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "precision",
        "description": "Amount of decimal places required."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Rounded number."
    }
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "clamp",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~clamp",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{clamp}",
    "description": "Constrain a value within a range of values.\nIf value > max then value = max;\nIf value < min then value = min;",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Constrained value to the given range."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Value to clamp within range."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "min",
        "description": "Minimum acceptable value."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "max",
        "description": "Maximum acceptable value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Constrained value to the given range."
    }
  },
  {
    "__docId__": 153,
    "kind": "function",
    "name": "cos",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~cos",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{cos}",
    "description": "Cosine function that can accept angles in radians or degrees.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Cosine of the angle."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Angle for calculating the cosine."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Cosine of the angle."
    }
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "sin",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~sin",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{sin}",
    "description": "Sine function that can accept angles in radians or degrees.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Sine of the angle."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Angle for calculating the sine."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Sine of the angle."
    }
  },
  {
    "__docId__": 155,
    "kind": "function",
    "name": "isFunction",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~isFunction",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{isFunction}",
    "description": "Test if an object is a function.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the object is a function, false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "f",
        "description": "Object to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the object is a function, false otherwise."
    }
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "isObject",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~isObject",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{isObject}",
    "description": "Test if an object is an object.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the object is an object, false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "o",
        "description": "Object to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the object is an object, false otherwise."
    }
  },
  {
    "__docId__": 157,
    "kind": "function",
    "name": "isString",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~isString",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{isString}",
    "description": "Test if an object is a string.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the object is a string, false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Object to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the object is a string, false otherwise."
    }
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "distSquared",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~distSquared",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{distSquared}",
    "description": "Given a set of two points the squared distance is calculated.\nThis is faster than calculating the Euclidean distance between them, since no square root is calculated.",
    "lineNumber": 126,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The squared distance between points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Initial -x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Initial -y coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "Final -x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "Final -y coordinate."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The squared distance between points."
    }
  },
  {
    "__docId__": 159,
    "kind": "function",
    "name": "rad",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~rad",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{rad}",
    "description": "Given an angle makes sure that it is in radians.",
    "lineNumber": 137,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Angle in radians."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle to convert to radians."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Angle in radians."
    }
  },
  {
    "__docId__": 160,
    "kind": "function",
    "name": "isCoordInside",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~isCoordInside",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{isCoordInside}",
    "description": "Determines if a point is inside of a box.\nOften used to test is the mouse is over an element.",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if point is within the box, false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate to test."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate to test."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bx",
        "description": "x center coordinate of the box."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "by",
        "description": "y center coordinate of the box."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bw",
        "description": "Half of the box's width."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bh",
        "description": "Half of the box's height."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if point is within the box, false otherwise."
    }
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "formatValue",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~formatValue",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{formatValue}",
    "description": "Format a number to have a certain number of decimal places and/or fixed places and\nadd a unit label. Used to format the strings of labels and sliders.\nIf the input value is a {@link SYMBOL} then return the same symbol.",
    "lineNumber": 168,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Formated number."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "val",
        "description": "Input number. Can also be a string or a symbol such as in {@link SYMBOL}."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "units",
        "description": "Units of the input number."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "decPlaces",
        "description": "Amount of decimal places to round."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "fixPlaces",
        "description": "Fix the amount of decimal places. If the number doesn't have enough, zeros will be added."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Formated number."
    }
  },
  {
    "__docId__": 162,
    "kind": "function",
    "name": "loadOptions",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~loadOptions",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{loadOptions}",
    "description": "Assign the matching properties from the args object to the obj object.\nThis allows for settings to be passed in single line and set on the receiving object.\nAlmost all World Element objects accept such settings on their constructors.",
    "examples": [
      "loadOptions(font, { face: \"Helvetica\", size: 12 });"
    ],
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": "Object where the settings will be loaded."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Object with matching properties from obj."
      }
    ],
    "return": null
  },
  {
    "__docId__": 163,
    "kind": "function",
    "name": "calcStepSize",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~calcStepSize",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{calcStepSize}",
    "description": "Finds the best fitting scale for a given range. Used for simulations where the scale of the data\nchanges dramatically.",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Magnitude of the step size. "
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Corresponds to the range between the minimum required value to be displayed and the maximum required value to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "stepAmount",
        "description": "Desired amount of steps within the range."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Magnitude of the step size."
    }
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "gaussian",
    "memberof": "src/Utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/Utils.js~gaussian",
    "access": "public",
    "export": true,
    "importPath": "core/src/Utils.js",
    "importStyle": "{gaussian}",
    "description": "Generate a random number following a gaussian distribuition.",
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Random number that follows a gaussian distribuition."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "n",
        "description": "Amount of iterations."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Random number that follows a gaussian distribuition."
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/World.js",
    "content": "import * as utils from \"./Utils\";\nimport * as constants from \"./Constants\";\nimport Scale from \"./Scale\";\nimport Axis from \"./figures/Axis\";\nimport Renderer from \"./Renderer\";\nimport WorldElement from \"./WorldElement\";\n\n/**\n * The World class handles the canvas and the drawing of elements. It manages all touch and mouse events,\n * as well as the scaling and axis settings. All elements drawn to the canvas must go through a World object.\n * @public\n * @class World\n */\nexport default class World {\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the div where the World will be initiated.\n   * @param {function} drawCallback Function called every 60fps to draw animations.\n   * @param {function} resizeCallback Function called every time the canvas gets resized.\n   */\n  constructor(id, drawCallback, resizeCallback) {\n\n    /**\n     * jQuery reference to the div container of the canvas.\n     * @type {object}\n     */\n    this.container = $(utils.fixId(id));\n\n    /**\n     * HTML canvas created for the world. Important to note is that the canvas does not have an alpha\n     * channel. This is done to optimize the framerate.\n     * @type {object}\n     */\n    this.canvas = document.createElement(\"canvas\", { alpha: false });\n\n    /**\n     * Context of the created canvas for the world.\n     * @type {object}\n     */\n    this.ctx = this.canvas.getContext(\"2d\");\n\n    /**\n     * Pixel ratio of the device.\n     * @type {number}\n     */\n    this.pxRatio = utils.getPixelRatio(this.ctx);\n\n    /**\n     * Scale object for the -x axis.\n     * Default scale is 50px per 1 unit.\n     * @type {Scale}\n     */\n    this.scaleX = new Scale(50, 1);\n\n    /**\n     * Scale object for the -y axis.\n     * Default scale is 50px per 1 unit.\n     * @type {Scale}\n     */\n    this.scaleY = new Scale(50, -1);\n\n    /**\n     * Width of the canvas in pixels.\n     * @type {number}\n     */\n    this.width = 0;\n\n    /**\n     * Width before resizing the canvas to the new width. Used to determine if a change\n     * has occured in the width in order to continue with the resizing process.\n     * @type {number}\n     */\n    this.prevWidth = 0;\n\n    /**\n     * Height of the canvas in pixels.\n     * @type {number}\n     */\n    this.height = 0;\n\n    /**\n     * Array of elements added to the world.\n     * @type {WorldElement[]}\n     */\n    this.elements = [];\n\n    /**\n     * Axis object used to draw the main axis.\n     * @type {Axis}\n     */\n    this.axis = new Axis();\n\n    /**\n     * Callback function for when the elements are drawn to the canvas.\n     * @type {function}\n     */\n    this.onDraw = utils.isFunction(drawCallback) ? drawCallback : null;\n\n    /**\n     * Callback function for when the canvas gets resized.\n     * @type {function}\n     */\n    this.onResize = utils.isFunction(resizeCallback) ? resizeCallback : null;\n\n    /**\n     * Callback function for when the mouse moves over the canvas.\n     * @type {function}\n     */\n    this.onMouseMove = null;\n\n    /**\n     * Simple background color for the canvas. If set to ther value than {@link COLORS}.WHITE the canvas\n     * will draw a rectangle with the new color at the beginning of every draw cycle. When the background\n     * renderer is enabled, the color value is no more relevant.\n     * @type {string}\n     */\n    this.color = constants.COLORS.WHITE;\n\n    /**\n     * Request id number from the requestAnimationFrame. Used to determine if the animation has\n     * started.\n     * @type {number}\n     */\n    this.started = null;\n\n    /**\n     * Mouse object containing all mouse properties and values.\n     * @type {object}\n     * @property {number} x Current -x position of the mouse in pixels.\n     * @property {number} y Current -y position of the mouse in pixels.\n     * @property {number} px Previous -x position of the mouse in pixels.\n     * @property {number} py Previous -y position of the mouse in pixels.\n     * @property {number} dx Change in the -x direction in pixels.\n     * @property {number} dy Change in the -y direction in pixels.\n     * @property {number} rx Real -x position of the mouse with respect to the axis in units.\n     * @property {number} ry Real -y position of the mouse with respect to the axis in units.\n     * @property {boolean} down Flag for when the mouse is pressed down over the canvas.\n     * @property {boolean} inCanvas Flag for when the mouse is over the canvas.\n     * @property {object} dragging Contains the currently dragged {@link WorldElement}. If no element is dragged then the value is equal to {@link DRAG_NOTHING}.\n     * @property {object} over Contains the element that the mouse is currently over. If no element is under the mouse then the value is equal to {@link OVER_NOTHING}.\n     * @property {string} cursor Current cursor of the canvas. Changes depending if it is over an element.\n     */\n    this.mouse = {\n      x: 0,\n      y: 0,\n      px: 0,\n      py: 0,\n      dx: 0,\n      dy: 0,\n      rx: 0,\n      ry: 0,\n      down: false,\n      inCanvas: false,\n      dragging: constants.DRAG_NOTHING,\n      over: constants.OVER_NOTHING,\n      cursor: constants.CURSOR.DEFAULT\n    };\n\n    /**\n     * Background renderer object. It is disabled by default. \n     * @type {Renderer}\n     */\n    this.background = new Renderer({\n      absolute: true,\n      enabled: false,\n      world: this\n    });\n\n    // Add the canvas to the container.\n    this.container.append(this.canvas);\n\n    // Add the axis to the list of elements.\n    this.add(this.axis);\n\n    // Bind all events to the canvas and force a resize event.\n    this.bindEventListeners();\n    this.resize();\n\n  }\n\n  /**\n   * Once it has been determined that the mouse is over an element and a dragging process has begun,\n   * the position of the object must be updated to follow the mouse. The function looks at the value of \n   * {@link WorldElement.mouseMoveStyle} to determine if the position should be updated in pixels or in\n   * real values. The position is updated by adding the change in the mouse's position to the element.\n   * This creates a smoother movement. Finally, the callback function {@link WorldElement.onMouseMove} is\n   * called.\n   * @private\n   */\n  moveElements() {\n    const element = this.mouse.dragging;\n    if (element) {\n      if (this.mouse.inCanvas) {\n        if (element.mouseMoveStyle === constants.MOVE_STYLE.BY_PX) {\n          element.addPosition(this.mouse.dx, this.mouse.dy);\n        } else {\n          element.addPosition(this.mouse.rdx, this.mouse.rdy);\n          if (!this.axis.negative) {\n            if (element.position.x < 0) element.position.x = 0;\n            if (element.position.y < 0) element.position.y = 0;\n          }\n        }\n        if (element.renderer) element.renderer.rendered = false;\n        if (utils.isFunction(element.onMouseMove)) element.onMouseMove(element);\n      }\n      element.dragging = this.mouse.down && this.mouse.inCanvas;\n      element.mouse_over = element.dragging;\n      this.mouse.dragging = element.dragging\n        ? this.mouse.dragging\n        : constants.DRAG_NOTHING;\n      element.topmost(element.dragging && element.topmostOnDrag);\n    }\n  }\n\n  /**\n   * Obtain the mouse or touch coordinates from the event data obtained from the callback. The data\n   * is obtained in pixels, howevere it is also converted to real units using the scale provided. It\n   * also calcualtes the previous positio and the change in position in both units (pixels and real units).\n   * @private\n   */\n  getMousePosition(e) {\n    const m = this.mouse;\n    const rect = this.canvas.getBoundingClientRect();\n    // Determine if it is a touch event or mouse event.\n    let evt;\n    if (e && !e.clientX) {\n      if (e.touches) {\n        [evt] = e.touches;\n      } else if (e.changedTouches) {\n        [evt] = e.changedTouches;\n      }\n    } else {\n      evt = e;\n    }\n    // Save previous values\n    m.px = m.x;\n    m.py = m.y;\n    // Calculate position in pixels.\n    m.x = Math.floor(evt.clientX - rect.left);\n    m.y = Math.floor(evt.clientY - rect.top);\n    // Convert position to real units.\n    m.rx = (m.x - this.axis.position.x) * this.scaleX.toUnits;\n    m.ry = (m.y - this.axis.position.y) * this.scaleY.toUnits;\n    // Calculate the delta in pixels.\n    m.dx = m.x - m.px;\n    m.dy = m.y - m.py;\n    // Calculate the delta in real units.\n    m.rdx = m.dx * this.scaleX.toUnits;\n    m.rdy = m.dy * this.scaleY.toUnits;\n  }\n\n  /**\n   * Find if the mouse is over an element. It queries the method {@link WorldElement.isMouseOver} to check\n   * if the mouse is over the bounding box of the element.\n   * @private\n   */\n  isMouseOverElement() {\n    if (this.mouse.dragging !== constants.DRAG_NOTHING) return;\n    let found = constants.OVER_NOTHING;\n    for (let i = this.elements.length - 1; i >= 0; i -= 1) {\n      if (\n        this.elements[i].isMouseOver() &&\n        this.elements[i].display &&\n        this.elements[i].isDraggable &&\n        found === constants.OVER_NOTHING\n      ) {\n        found = i;\n        this.elements[i].mouseOver = true;\n      } else {\n        this.elements[i].mouseOver = false;\n      }\n    }\n    this.setCursor(\n      found === constants.OVER_NOTHING\n        ? constants.CURSOR.DEFAULT\n        : this.elements[found].cursor\n    );\n    this.mouse.over = found;\n  }\n\n  /**\n   * Binds a callback function to the mouse, touch and resize event listeners.\n   * @private\n   */\n  bindEventListeners() {\n    const self = this;\n    const callbacks = {\n      mousemove(e) {\n        self.getMousePosition(e);\n        self.isMouseOverElement();\n        self.moveElements();\n        if (utils.isFunction(self.onMouseMove)) self.onMouseMove();\n      },\n      mouseenter(e) {\n        e.preventDefault();\n        self.mouse.inCanvas = true;\n      },\n      mouseleave(e) {\n        e.preventDefault();\n        self.mouse.inCanvas = false;\n      },\n      mousedown(e) {\n        e.preventDefault();\n        self.getMousePosition(e);\n        self.isMouseOverElement();\n        if (self.mouse.over !== constants.OVER_NOTHING) {\n          self.mouse.dragging = self.elements[self.mouse.over];\n          self.mouse.down = true;\n        }\n      },\n      mouseup(e) {\n        e.preventDefault();\n        self.mouse.down = false;\n        self.moveElements();\n      },\n      touchstart(e) {\n        self.getMousePosition(e);\n        self.isMouseOverElement();\n        if (self.mouse.over !== constants.OVER_NOTHING) {\n          if (e.cancelable) e.preventDefault();\n          self.mouse.dragging = self.elements[self.mouse.over];\n          self.mouse.down = true;\n          self.mouse.inCanvas = true;\n        }\n      },\n      touchend(e) {\n        if (self.mouse.dragging !== constants.DRAG_NOTHING) {\n          if (e.cancelable) e.preventDefault();\n          self.mouse.down = false;\n          self.mouse.inCanvas = false;\n          self.moveElements();\n        }\n      },\n      resize(e) {\n        self.resize(e);\n      }\n    };\n    window.addEventListener(\"resize\", callbacks.resize, false);\n    window.addEventListener(\"mouseup\", callbacks.mouseup, false);\n    this.canvas.addEventListener(\"mousemove\", callbacks.mousemove, false);\n    this.canvas.addEventListener(\"mouseenter\", callbacks.mouseenter, false);\n    this.canvas.addEventListener(\"mouseleave\", callbacks.mouseleave, false);\n    this.canvas.addEventListener(\"mousedown\", callbacks.mousedown, false);\n    this.canvas.addEventListener(\"touchmove\", callbacks.mousemove, false);\n    this.canvas.addEventListener(\"touchstart\", callbacks.touchstart, false);\n    this.canvas.addEventListener(\"touchend\", callbacks.touchend, false);\n  }\n\n  /**\n   * Callback function for the resize event. It recalculates the width of the main canvas as well\n   * as all rendered canvases and their elements. It calls the callback function {@link World.onResize}.\n   * @private\n   */\n  resize(e) {\n    this.width = this.container.width();\n    const widthChange = Math.abs(this.prevWidth - this.width);\n    this.prevWidth = this.width;\n    this.height = this.container.height();\n    this.pxRatio = utils.getPixelRatio(this.ctx);\n    this.canvas.width = Math.floor(this.width * this.pxRatio);\n    this.canvas.height = Math.floor(this.height * this.pxRatio);\n    this.canvas.style.width = `${this.width}px`;\n    this.canvas.style.height = `${this.height}px`;\n    this.ctx.scale(this.pxRatio, this.pxRatio);\n    if (this.background.enabled) {\n      this.background.resize();\n    }\n    for (let i = 0; i < this.elements.length; i++) {\n      if (utils.isFunction(this.elements[i].resize)) this.elements[i].resize();\n      if (this.elements[i].renderer) this.elements[i].renderer.resize();\n    }\n    if (this.started && utils.isFunction(this.onResize) && widthChange > 0) this.onResize();\n  }\n\n  /**\n   * Sets a new cursor for when the mouse is over the canvas.\n   * @public\n   * @param {string} cursor Valid cursor type.\n   */\n  setCursor(cursor) {\n    if (cursor !== this.mouse.cursor) {\n      this.canvas.style.cursor = cursor;\n      this.mouse.cursor = cursor;\n    }\n  }\n\n  /**\n   * Main draw function. Runs at 60fps and can't be stopped once the world is started.\n   * Therefore it is constantly drawing to the canvas. This further optimizes the code needed\n   * to run simulations.\n   * Looks at the background object to check if it's enabled. If so, it draws the prerendered image\n   * to the main canvas, thus avoiding to draw the background every time from scratch.\n   * The draw method {@link WorldElement.draw} is called for every element added to the world.\n   * @private\n   */\n  draw() {\n    this.onDraw();\n    this.ctx.lineCap = \"round\";\n    this.ctx.lineJoin = \"round\";\n    this.ctx.clearRect(0, 0, this.width, this.height);\n\n    // Background.\n    if (this.background.enabled) {\n      if (this.background.rendered) {\n        this.background.draw();\n      } else if (utils.isFunction(this.background.callback)) {\n        this.background.begin();\n        this.background.callback(\n          this.background.ctx,\n          this.background.callbackArgs\n        );\n        this.background.end();\n        this.background.draw();\n      }\n    } else if (this.color !== constants.COLORS.WHITE) {\n      this.ctx.fillStyle = this.color;\n      this.ctx.rect(0, 0, this.width, this.height);\n      this.ctx.fill();\n    }\n\n    this.ctx.save();\n    this.ctx.translate(this.axis.position.x, this.axis.position.y);\n    this.elements.sort((a, b) => a.zIndex - b.zIndex);\n    for (let i = 0; i < this.elements.length; i++) {\n      if (utils.isFunction(this.elements[i].draw) && this.elements[i].display)\n        this.elements[i].draw();\n    }\n    this.ctx.restore();\n    this.start();\n  }\n\n  /**\n   * Adds a {@link WorldElement} to the world. Multiple elements can be added in a\n   * single add function, they only need to be separated by comma.\n   * @public\n   * @param  {...WorldElement} args Elements to add to the world.\n   */\n  add(...args) {\n    for (let i = 0; i < args.length; i++) {\n      if (\n        utils.isObject(args[i]) &&\n        Object.prototype.hasOwnProperty.call(args[i], \"valid\")\n      ) {\n        args[i].setWorld(this);\n        if (args[i].renderer) args[i].renderer.setWorld(this);\n        this.elements.push(args[i]);\n      }\n    }\n  }\n\n  /**\n   * Remove a {@link WorldElement} from the world. Multiple elements can be removed\n   * in a single remove function, they only need to be separated by comma.\n   * @public\n   * @param {...WorldElement} args Elements to remove from the world.\n   */\n  remove(...args) {\n    for (let i = 0; i < args.length; i++) {\n      const index = this.elements.indexOf(args[i]);\n      if (index > -1) {\n        this.elements[index].world = undefined;\n        this.elements.splice(index, 1);\n      }\n    }\n  }\n\n  /**\n   * Starts the animation loop of 60fps.\n   * @private\n   */\n  start() {\n    const self = this;\n    if (this.started === null && utils.isFunction(this.onResize)) {\n      this.onResize();\n    }\n    this.started = requestAnimationFrame(() => {\n      self.draw();\n    });\n  }\n\n  /**\n   * Creates a screenshot of the canvas and saves it as sc.png in the same folder\n   * as the main file from the simulation. The canvas data is passed to a php file \n   * that only runs at localhost.\n   * @public\n   */\n  export() {\n    // Split url to get simulation path\n    // /newtondreams-bs4/fisica/sim/\n    const urlArray = window.location.pathname.split(\"/\");\n    const simType = urlArray[2];\n    const simName = urlArray[3];\n    $.ajax({\n      data: {\n        data: this.canvas.toDataURL(),\n        path: `/${simType}/${simName}/`\n      },\n      url: \"../../php/export.php\",\n      dataType: \"html\",\n      type: \"post\",\n      success(response) {\n        console.log(response);\n      }\n    });\n  }\n\n  /**\n   * Makes sure that a box of width (xMin + xMax) and height {yMin + yMax} fits in the canvas.\n   * This is used when the dimensions of objects changes dynamically.\n   * @public\n   * @param {number} xMin Minimum x value required to be displayed.\n   * @param {number} xMax Maximum x value required to be displayed.\n   * @param {number} yMin Minimum y value required to be displayed.\n   * @param {number} yMax Maximum y value required to be displayed.\n   * @param {number} scale Scale given to the range provided. If the scale is > 1 then the bounding box will be larger than the data and thus will result in a better fit.\n   */\n  fit(xMin, xMax, yMin, yMax, scale) {\n    const xRange = Math.abs(xMin) + Math.abs(xMax);\n    const yRange = Math.abs(yMin) + Math.abs(yMax);\n    const xScale = utils.calcStepSize(\n      xRange * scale,\n      this.width / this.scaleX.px\n    );\n    const yScale = utils.calcStepSize(\n      yRange * scale,\n      this.height / this.scaleY.px\n    );\n    this.scaleX.set(\n      this.scaleX.px,\n      Number.isNaN(xScale) ? 1 : xScale,\n      this.scaleX.unit\n    );\n    this.scaleY.set(\n      this.scaleY.px,\n      Number.isNaN(yScale) ? -1 : -yScale,\n      this.scaleY.unit\n    );\n    const xCenter = Math.floor(\n      Math.abs(xMin) * this.scaleX.toPx +\n        (this.width - xRange * this.scaleX.toPx) / 2\n    );\n    const yCenter = Math.floor(\n      Math.abs(yMin) * this.scaleY.toPx +\n        (this.height - yRange * this.scaleY.toPx) / 2\n    );\n    this.axis.setPosition(xCenter, yCenter);\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/World.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "class",
    "name": "World",
    "memberof": "src/World.js",
    "static": true,
    "longname": "src/World.js~World",
    "access": "public",
    "export": true,
    "importPath": "core/src/World.js",
    "importStyle": "World",
    "description": "The World class handles the canvas and the drawing of elements. It manages all touch and mouse events,\nas well as the scaling and axis settings. All elements drawn to the canvas must go through a World object.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "World"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 167,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "HTML id of the div where the World will be initiated."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "drawCallback",
        "description": "Function called every 60fps to draw animations."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "resizeCallback",
        "description": "Function called every time the canvas gets resized."
      }
    ]
  },
  {
    "__docId__": 168,
    "kind": "member",
    "name": "container",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#container",
    "access": "public",
    "description": "jQuery reference to the div container of the canvas.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "canvas",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#canvas",
    "access": "public",
    "description": "HTML canvas created for the world. Important to note is that the canvas does not have an alpha\nchannel. This is done to optimize the framerate.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "member",
    "name": "ctx",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#ctx",
    "access": "public",
    "description": "Context of the created canvas for the world.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "pxRatio",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#pxRatio",
    "access": "public",
    "description": "Pixel ratio of the device.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "scaleX",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#scaleX",
    "access": "public",
    "description": "Scale object for the -x axis.\nDefault scale is 50px per 1 unit.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "Scale"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "member",
    "name": "scaleY",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#scaleY",
    "access": "public",
    "description": "Scale object for the -y axis.\nDefault scale is 50px per 1 unit.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Scale"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "member",
    "name": "width",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#width",
    "access": "public",
    "description": "Width of the canvas in pixels.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "prevWidth",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#prevWidth",
    "access": "public",
    "description": "Width before resizing the canvas to the new width. Used to determine if a change\nhas occured in the width in order to continue with the resizing process.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "height",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#height",
    "access": "public",
    "description": "Height of the canvas in pixels.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "elements",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#elements",
    "access": "public",
    "description": "Array of elements added to the world.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "WorldElement[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "member",
    "name": "axis",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#axis",
    "access": "public",
    "description": "Axis object used to draw the main axis.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Axis"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 179,
    "kind": "member",
    "name": "onDraw",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#onDraw",
    "access": "public",
    "description": "Callback function for when the elements are drawn to the canvas.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 180,
    "kind": "member",
    "name": "onResize",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#onResize",
    "access": "public",
    "description": "Callback function for when the canvas gets resized.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 181,
    "kind": "member",
    "name": "onMouseMove",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#onMouseMove",
    "access": "public",
    "description": "Callback function for when the mouse moves over the canvas.",
    "lineNumber": 110,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "member",
    "name": "color",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#color",
    "access": "public",
    "description": "Simple background color for the canvas. If set to ther value than {@link COLORS}.WHITE the canvas\nwill draw a rectangle with the new color at the beginning of every draw cycle. When the background\nrenderer is enabled, the color value is no more relevant.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 183,
    "kind": "member",
    "name": "started",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#started",
    "access": "public",
    "description": "Request id number from the requestAnimationFrame. Used to determine if the animation has\nstarted.",
    "lineNumber": 125,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 184,
    "kind": "member",
    "name": "mouse",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#mouse",
    "access": "public",
    "description": "Mouse object containing all mouse properties and values.",
    "lineNumber": 144,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Current -x position of the mouse in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Current -y position of the mouse in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "px",
        "description": "Previous -x position of the mouse in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "py",
        "description": "Previous -y position of the mouse in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dx",
        "description": "Change in the -x direction in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "dy",
        "description": "Change in the -y direction in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "rx",
        "description": "Real -x position of the mouse with respect to the axis in units."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "ry",
        "description": "Real -y position of the mouse with respect to the axis in units."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "down",
        "description": "Flag for when the mouse is pressed down over the canvas."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "inCanvas",
        "description": "Flag for when the mouse is over the canvas."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "dragging",
        "description": "Contains the currently dragged {@link WorldElement}. If no element is dragged then the value is equal to {@link DRAG_NOTHING}."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "over",
        "description": "Contains the element that the mouse is currently over. If no element is under the mouse then the value is equal to {@link OVER_NOTHING}."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "Current cursor of the canvas. Changes depending if it is over an element."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "background",
    "memberof": "src/World.js~World",
    "static": false,
    "longname": "src/World.js~World#background",
    "access": "public",
    "description": "Background renderer object. It is disabled by default. ",
    "lineNumber": 164,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "moveElements",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#moveElements",
    "access": "private",
    "description": "Once it has been determined that the mouse is over an element and a dragging process has begun,\nthe position of the object must be updated to follow the mouse. The function looks at the value of \n{@link WorldElement.mouseMoveStyle} to determine if the position should be updated in pixels or in\nreal values. The position is updated by adding the change in the mouse's position to the element.\nThis creates a smoother movement. Finally, the callback function {@link WorldElement.onMouseMove} is\ncalled.",
    "lineNumber": 191,
    "params": [],
    "return": null
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "getMousePosition",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#getMousePosition",
    "access": "private",
    "description": "Obtain the mouse or touch coordinates from the event data obtained from the callback. The data\nis obtained in pixels, howevere it is also converted to real units using the scale provided. It\nalso calcualtes the previous positio and the change in position in both units (pixels and real units).",
    "lineNumber": 222,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "isMouseOverElement",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#isMouseOverElement",
    "access": "private",
    "description": "Find if the mouse is over an element. It queries the method {@link WorldElement.isMouseOver} to check\nif the mouse is over the bounding box of the element.",
    "lineNumber": 258,
    "params": [],
    "return": null
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "bindEventListeners",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#bindEventListeners",
    "access": "private",
    "description": "Binds a callback function to the mouse, touch and resize event listeners.",
    "lineNumber": 286,
    "params": [],
    "return": null
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "resize",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#resize",
    "access": "private",
    "description": "Callback function for the resize event. It recalculates the width of the main canvas as well\nas all rendered canvases and their elements. It calls the callback function {@link World.onResize}.",
    "lineNumber": 355,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 195,
    "kind": "method",
    "name": "setCursor",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#setCursor",
    "access": "public",
    "description": "Sets a new cursor for when the mouse is over the canvas.",
    "lineNumber": 381,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cursor",
        "description": "Valid cursor type."
      }
    ],
    "return": null
  },
  {
    "__docId__": 196,
    "kind": "method",
    "name": "draw",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#draw",
    "access": "private",
    "description": "Main draw function. Runs at 60fps and can't be stopped once the world is started.\nTherefore it is constantly drawing to the canvas. This further optimizes the code needed\nto run simulations.\nLooks at the background object to check if it's enabled. If so, it draws the prerendered image\nto the main canvas, thus avoiding to draw the background every time from scratch.\nThe draw method {@link WorldElement.draw} is called for every element added to the world.",
    "lineNumber": 397,
    "params": [],
    "return": null
  },
  {
    "__docId__": 197,
    "kind": "method",
    "name": "add",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#add",
    "access": "public",
    "description": "Adds a {@link WorldElement} to the world. Multiple elements can be added in a\nsingle add function, they only need to be separated by comma.",
    "lineNumber": 439,
    "params": [
      {
        "nullable": null,
        "types": [
          "...WorldElement"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Elements to add to the world."
      }
    ],
    "return": null
  },
  {
    "__docId__": 198,
    "kind": "method",
    "name": "remove",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#remove",
    "access": "public",
    "description": "Remove a {@link WorldElement} from the world. Multiple elements can be removed\nin a single remove function, they only need to be separated by comma.",
    "lineNumber": 458,
    "params": [
      {
        "nullable": null,
        "types": [
          "...WorldElement"
        ],
        "spread": true,
        "optional": false,
        "name": "args",
        "description": "Elements to remove from the world."
      }
    ],
    "return": null
  },
  {
    "__docId__": 199,
    "kind": "method",
    "name": "start",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#start",
    "access": "private",
    "description": "Starts the animation loop of 60fps.",
    "lineNumber": 472,
    "params": [],
    "return": null
  },
  {
    "__docId__": 201,
    "kind": "method",
    "name": "export",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#export",
    "access": "public",
    "description": "Creates a screenshot of the canvas and saves it as sc.png in the same folder\nas the main file from the simulation. The canvas data is passed to a php file \nthat only runs at localhost.",
    "lineNumber": 488,
    "params": [],
    "return": null
  },
  {
    "__docId__": 202,
    "kind": "method",
    "name": "fit",
    "memberof": "src/World.js~World",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/World.js~World#fit",
    "access": "public",
    "description": "Makes sure that a box of width (xMin + xMax) and height {yMin + yMax} fits in the canvas.\nThis is used when the dimensions of objects changes dynamically.",
    "lineNumber": 518,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "xMin",
        "description": "Minimum x value required to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "xMax",
        "description": "Maximum x value required to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "yMin",
        "description": "Minimum y value required to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "yMax",
        "description": "Maximum y value required to be displayed."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": "Scale given to the range provided. If the scale is > 1 then the bounding box will be larger than the data and thus will result in a better fit."
      }
    ],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/WorldElement.js",
    "content": "/* eslint-disable class-methods-use-this */\nimport * as constants from \"./Constants\";\nimport * as utils from \"./Utils\";\nimport World from \"./World\";\nimport Font from \"./Font\";\nimport Renderer from \"./Renderer\";\n\n/**\n * Parent class for all elements added to the world. Sets the basic properties\n * and methods all objects need.\n * @private\n * @class WorldElement\n */\nexport default class WorldElement {\n\n  /**\n   * @constructor\n   */\n  constructor() {\n\n    /**\n     * Sets the world where this element is found. It is automatically set when added to the world.\n     * @type {World}\n     */\n    this.world = null;\n\n    /**\n     * Flag for enabling or diabling this element.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.display = true;\n\n    /**\n     * Sets the z-index of the element.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.zIndex = 0;\n\n    /**\n     * A copy of the z-index value is stored here. When the element is dragged around, \n     * the element moves as a topmost element (only if {@link WorldElement.topmostOnDrag} \n     * is set to true). Therefore, the z-index of the element is increased and must \n     * be restored when the mouse gets released. \n     * The default value is 0.\n     * @type {number}\n     */\n    this.savedZIndex = 0;\n\n    /**\n     * Sets the position of the element. The units can be in pixels or in units.\n     * Must look at the value of {@link WorldElement.mouseMoveStyle}.\n     * @type {object}\n     * @property {number} x=0 -x coordinate.\n     * @property {number} y=0 -y coordinate.\n     */\n    this.position = { x: 0, y: 0 };\n\n    /**\n     * Flag for determining if the element will be a top-most element when dragged around.\n     * This means the element can be behind other objects, but when its dragged it will\n     * temporarily have a higher z-index.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.topmostOnDrag = false;\n\n    /**\n     * Flag for allowing the element to be dragged around.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.isDraggable = false;\n\n    /**\n     * Flag set when the element is being dragged around.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.dragging = false;\n\n    /**\n     * Sets a callback function for when the element is dragged around.\n     * @type {function}\n     */\n    this.onMouseMove = undefined;\n\n    /**\n     * Flag set when the mouse is over the element.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.mouseOver = false;\n\n    /**\n     * Sets the move style of the element.\n     * Default value is {@link MOVE_STYLE}.BY_UNITS.\n     * @type {string}\n     */\n    this.mouseMoveStyle = constants.MOVE_STYLE.BY_UNITS;\n\n    /**\n     * Sets the cursor style when the mouse is over the element.\n     * Default value is {@link CURSOR}.POINTER.\n     * @type {string}\n     */\n    this.cursor = constants.CURSOR.POINTER;\n\n    /**\n     * Sets the color in HEX format of the element. The use of it depends on the type of element.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n    this.color = constants.COLORS.RED;\n\n    /**\n     * Sets the drawing scale of the element. \n     * Until now this property is only useful for {@link Picture} objects.\n     * Default value is 1.\n     * @type {number}\n     */\n    this.scale = 1;\n\n    /**\n     * Sets the rotation of the element. The units depend on the value of element's angle style.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.rotation = 0;\n\n    /**\n     * Flag used to determine if an object is a child of WorldElement. \n     * Only these objects have a {@link WorldElement.valid} flag.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.valid = true;\n\n    /**\n     * Sets the renderer used for the element.\n     * The default value is undefined.\n     * @type {Renderer}\n     */\n    this.renderer = undefined;\n\n    /**\n     * Sets the current width of the element.\n     * The default value is 0.\n     * @type {number}\n     */\n    this.width = 0;\n\n    /**\n     * Sets the current height of the element.\n     * The default value is 0.\n     * @type {number}\n     */\n    this.height = 0;\n\n    /**\n     * Sets the font of the element.\n     * The default value is Font().\n     * @type {Font}\n     */\n    this.font = new Font();\n  }\n\n  /**\n   * Sets the world object where element will be drawn. It is automatically set by the\n   * world when the element is added to it.\n   * @private\n   * @param {World} world World of the element.\n   */\n  setWorld(world) {\n    this.world = world;\n    this.resize();\n  }\n\n  /**\n   * Function called when the canvas gets resized. Enables the different element types to handle\n   * resize events differently depending on their needs. This is an empty resize function.\n   * @private\n   */\n  resize() {}\n\n  /**\n   * Function called when the mouse moves to check if the pointer is over the element.\n   * The function is later replaced by the different types of elements.\n   * @public\n   * @returns {boolean} Returns false by default.\n   */\n  isMouseOver() {\n    return false;\n  }\n\n  /**\n   * Sets the scale of the element.\n   * @public\n   * @param {number} s Scale value for the element. Must be between 1 and 0.\n   */\n  setScale(s) {\n    this.scale = s >= 0 && s <= 1 ? s : 0;\n    if (this.renderer) this.renderer.rendered = false;\n  }\n\n  /**\n   * Sets the color in HEX format of the element.\n   * @public\n   * @param {string} c Desired color in HEX format.\n   */\n  setColor(c) {\n    this.color = c;\n    if (this.renderer) this.renderer.rendered = false;\n  }\n\n  /**\n   * Sets if the element is draggable.\n   * @public\n   * @param {boolean} s True sets the element as draggable, false otherwise.\n   */\n  draggable(s) {\n    this.isDraggable = s;\n  }\n\n  /**\n   * Sets the element as a topmost element.\n   * @private\n   * @param {boolean} state True sets the z-index to 1000, false sets the z-index to the saved z-index.\n   */\n  topmost(state) {\n    this.zIndex = state ? 1000 : this.savedZIndex;\n  }\n\n  /**\n   * Sets the z-index of the element. It is used to sort the drawing order of the element.\n   * Those with the lowest z-index are drawn first. The highest z-index is drawn last.\n   * @public\n   * @param {number} z Desired z-index.\n   */\n  setZ(z) {\n    this.zIndex = z;\n    this.savedZIndex = z;\n  }\n\n  /**\n   * Sets the position of the element.\n   * @public\n   * @param {number} x -x coordinate.\n   * @param {number} y -y coordinate.\n   */\n  setPosition(x, y) {\n    this.position.x = utils.round(x, 3);\n    this.position.y = utils.round(y, 3);\n    if (this.renderer) this.renderer.rendered = false;\n  }\n\n  /**\n   * Adds the provided coordinates to the position.\n   * @public\n   * @param {number} x -x coordinate.\n   * @param {number} y -y coordinate.\n   */\n  addPosition(x, y) {\n    this.position.x += utils.round(x, 3);\n    this.position.y += utils.round(y, 3);\n    if (this.renderer) this.renderer.rendered = false;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/WorldElement.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "class",
    "name": "WorldElement",
    "memberof": "src/WorldElement.js",
    "static": true,
    "longname": "src/WorldElement.js~WorldElement",
    "access": "private",
    "export": true,
    "importPath": "core/src/WorldElement.js",
    "importStyle": "WorldElement",
    "description": "Parent class for all elements added to the world. Sets the basic properties\nand methods all objects need.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "WorldElement"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 205,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "world",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#world",
    "access": "public",
    "description": "Sets the world where this element is found. It is automatically set when added to the world.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "World"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "member",
    "name": "display",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#display",
    "access": "public",
    "description": "Flag for enabling or diabling this element.\nDefault value is true.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "zIndex",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#zIndex",
    "access": "public",
    "description": "Sets the z-index of the element.\nDefault value is 0.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 209,
    "kind": "member",
    "name": "savedZIndex",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#savedZIndex",
    "access": "public",
    "description": "A copy of the z-index value is stored here. When the element is dragged around, \nthe element moves as a topmost element (only if {@link WorldElement.topmostOnDrag} \nis set to true). Therefore, the z-index of the element is increased and must \nbe restored when the mouse gets released. \nThe default value is 0.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 210,
    "kind": "member",
    "name": "position",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#position",
    "access": "public",
    "description": "Sets the position of the element. The units can be in pixels or in units.\nMust look at the value of {@link WorldElement.mouseMoveStyle}.",
    "lineNumber": 58,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "x",
        "description": "x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "y",
        "description": "y coordinate."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "topmostOnDrag",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#topmostOnDrag",
    "access": "public",
    "description": "Flag for determining if the element will be a top-most element when dragged around.\nThis means the element can be behind other objects, but when its dragged it will\ntemporarily have a higher z-index.\nDefault value is false.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 212,
    "kind": "member",
    "name": "isDraggable",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#isDraggable",
    "access": "public",
    "description": "Flag for allowing the element to be dragged around.\nDefault value is false.",
    "lineNumber": 74,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "member",
    "name": "dragging",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#dragging",
    "access": "public",
    "description": "Flag set when the element is being dragged around.\nDefault value is false.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "member",
    "name": "onMouseMove",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#onMouseMove",
    "access": "public",
    "description": "Sets a callback function for when the element is dragged around.",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "member",
    "name": "mouseOver",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#mouseOver",
    "access": "public",
    "description": "Flag set when the mouse is over the element.\nDefault value is false.",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "mouseMoveStyle",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#mouseMoveStyle",
    "access": "public",
    "description": "Sets the move style of the element.\nDefault value is {@link MOVE_STYLE}.BY_UNITS.",
    "lineNumber": 101,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "cursor",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#cursor",
    "access": "public",
    "description": "Sets the cursor style when the mouse is over the element.\nDefault value is {@link CURSOR}.POINTER.",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "member",
    "name": "color",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#color",
    "access": "public",
    "description": "Sets the color in HEX format of the element. The use of it depends on the type of element.\nDefault value is {@link COLORS}.RED.",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 219,
    "kind": "member",
    "name": "scale",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#scale",
    "access": "public",
    "description": "Sets the drawing scale of the element. \nUntil now this property is only useful for {@link Picture} objects.\nDefault value is 1.",
    "lineNumber": 123,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 220,
    "kind": "member",
    "name": "rotation",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#rotation",
    "access": "public",
    "description": "Sets the rotation of the element. The units depend on the value of element's angle style.\nDefault value is 0.",
    "lineNumber": 130,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "member",
    "name": "valid",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#valid",
    "access": "public",
    "description": "Flag used to determine if an object is a child of WorldElement. \nOnly these objects have a {@link WorldElement.valid} flag.\nDefault value is true.",
    "lineNumber": 138,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 222,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#renderer",
    "access": "public",
    "description": "Sets the renderer used for the element.\nThe default value is undefined.",
    "lineNumber": 145,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 223,
    "kind": "member",
    "name": "width",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#width",
    "access": "public",
    "description": "Sets the current width of the element.\nThe default value is 0.",
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "height",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#height",
    "access": "public",
    "description": "Sets the current height of the element.\nThe default value is 0.",
    "lineNumber": 159,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "font",
    "memberof": "src/WorldElement.js~WorldElement",
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#font",
    "access": "public",
    "description": "Sets the font of the element.\nThe default value is Font().",
    "lineNumber": 166,
    "type": {
      "nullable": null,
      "types": [
        "Font"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "setWorld",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#setWorld",
    "access": "private",
    "description": "Sets the world object where element will be drawn. It is automatically set by the\nworld when the element is added to it.",
    "lineNumber": 175,
    "params": [
      {
        "nullable": null,
        "types": [
          "World"
        ],
        "spread": false,
        "optional": false,
        "name": "world",
        "description": "World of the element."
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "resize",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#resize",
    "access": "private",
    "description": "Function called when the canvas gets resized. Enables the different element types to handle\nresize events differently depending on their needs. This is an empty resize function.",
    "lineNumber": 185,
    "params": [],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#isMouseOver",
    "access": "public",
    "description": "Function called when the mouse moves to check if the pointer is over the element.\nThe function is later replaced by the different types of elements.",
    "lineNumber": 193,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} Returns false by default."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "Returns false by default."
    },
    "params": []
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "setScale",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#setScale",
    "access": "public",
    "description": "Sets the scale of the element.",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Scale value for the element. Must be between 1 and 0."
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#setColor",
    "access": "public",
    "description": "Sets the color in HEX format of the element.",
    "lineNumber": 212,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "c",
        "description": "Desired color in HEX format."
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "draggable",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#draggable",
    "access": "public",
    "description": "Sets if the element is draggable.",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "True sets the element as draggable, false otherwise."
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "topmost",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#topmost",
    "access": "private",
    "description": "Sets the element as a topmost element.",
    "lineNumber": 231,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "True sets the z-index to 1000, false sets the z-index to the saved z-index."
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "setZ",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#setZ",
    "access": "public",
    "description": "Sets the z-index of the element. It is used to sort the drawing order of the element.\nThose with the lowest z-index are drawn first. The highest z-index is drawn last.",
    "lineNumber": 241,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "z",
        "description": "Desired z-index."
      }
    ],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "method",
    "name": "setPosition",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#setPosition",
    "access": "public",
    "description": "Sets the position of the element.",
    "lineNumber": 252,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate."
      }
    ],
    "return": null
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "addPosition",
    "memberof": "src/WorldElement.js~WorldElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/WorldElement.js~WorldElement#addPosition",
    "access": "public",
    "description": "Adds the provided coordinates to the position.",
    "lineNumber": 264,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate."
      }
    ],
    "return": null
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "src/app.js",
    "content": "import * as constants from \"./Constants\";\nimport * as utils from \"./Utils\";\nimport World from \"./World\";\nimport Slider from \"./dom/Slider\";\nimport Vector from \"./figures/Vector\";\nimport Ball from \"./figures/Ball\";\nimport * as dom from \"./dom/dom\";\nimport Picture from \"./figures/Picture\";\nimport Shape from \"./figures/Shape\";\nimport Plot from \"./figures/Plot\";\nimport Box from \"./figures/Box\";\n\nwindow.requestAnimationFrame = (() => {\n  function backupTimeout(callback) {\n    window.setTimeout(callback, 1000 / 60);\n  }\n  return (\n    window.requestAnimationFrame ||\n    window.webkitRequestAnimationFrame ||\n    window.mozRequestAnimationFrame ||\n    window.oRequestAnimationFrame ||\n    window.msRequestAnimationFrame ||\n    backupTimeout\n  );\n})();\n\nwindow.cancelAnimationFrame = (() =>\n  window.cancelAnimationFrame ||\n  window.webkitCancelRequestAnimationFrame ||\n  window.mozCancelRequestAnimationFrame ||\n  window.oCancelRequestAnimationFrame ||\n  window.msCancelRequestAnimationFrame ||\n  clearTimeout)();\n\n/**\n * The libray is exposed to the window object through this object.\n * Constants can be found by accessing p$.constants.\n * Utils can be accessed through p$.utils.\n * @type {object}\n */\nconst p$ = constants;\np$.Box = Box;\np$.Ball = Ball;\np$.Box = Box;\np$.Picture = Picture;\np$.Plot = Plot;\np$.Shape = Shape;\np$.Slider = Slider;\np$.Vector = Vector;\np$.World = World;\np$.utils = utils;\np$.dom = dom;\nwindow.p$ = p$;\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/app.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "p$",
    "memberof": "src/app.js",
    "static": true,
    "longname": "src/app.js~p$",
    "access": "public",
    "export": false,
    "importPath": "core",
    "importStyle": null,
    "description": "The libray is exposed to the window object through this object.\nConstants can be found by accessing p$.constants.\nUtils can be accessed through p$.utils.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "file",
    "name": "src/dom/Slider.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\n\n/**\n * Class used to handle the sliders and their labels. \n * @public\n * @class Slider\n */\nexport default class Slider {\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Slider properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    /**\n     * Sets the HTML base id of the slider and label element.\n     * In order for the slider to match with a label, the id must be the same for both elements.\n     * The ending changes depending if it is a slider or a label.\n     * This class will look for the id: {id}_slider and {id}_label, where id is this value.\n     * Default value is \"\".\n     * @type {string} Base id of the slider and label.\n     */\n    this.id = \"\";\n\n    /**\n     * Sets the color in HEX format of the slider.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n    this.color = constants.COLORS.RED;\n\n    /**\n     * Stores a copy of the current color. Used when the slider is disabled and\n     * the color must be later restored when the slider is enabled again.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n    this.prevColor = this.color;\n\n    /**\n     * Sets the units that the slider will use.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.units = \"\";\n\n    /**\n     * Sets the starting position of the slider.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.start = 0;\n\n    /**\n     * Sets the minimum value of the slider.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.min = 0;\n\n    /**\n     * Sets the maximum value of the slider.\n     * Default value is 1.\n     * @type {number}\n     */\n    this.max = 1;\n\n    /**\n     * Sets the amount of decimal places displayed on the label.\n     * Default value is 1.\n     * @type {number}\n     */\n    this.decPlaces = 1;\n\n    /**\n     * Flag for fixing the decimal places to the amount set in {@link Slider.decPlaces}.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.fixPlaces = false;\n\n    /**\n     * Sets a callback for when the slider changes value.\n     * Default value is undefined.\n     * @type {function}\n     */\n    this.callback = undefined;\n \n    /**\n     * Sets the arguments passed to the callback function set in {@link Slider.callback}.\n     * Default value is undefined.\n     * @type {*}\n     */\n    this.callbackArgs = undefined;\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n    /**\n     * Sets the current value of the slider.\n     * Default value is {@link Slider.start}.\n     * @type {number}\n     */\n    this.value = this.start;\n\n    /**\n     * Raw slider element obtained by document.getElementById.\n     * @type {object}\n     */\n    this.slider = document.getElementById(`${this.id}_slider`);\n\n    /**\n     * Raw label element obtained by jQuery.\n     * @type {object}\n     */\n    this.label = $(utils.fixId(`${this.id}_label`));\n\n    // Set the current color to the slider.\n    this.setColor();\n    this.setLabel(this.start);\n\n    // Init slider using the provided values.\n    const self = this;\n    /* eslint-disable-next-line no-undef */\n    noUiSlider.create(this.slider, {\n      start: this.start,\n      connect: \"lower\",\n      range: {\n        min: this.min,\n        max: this.max\n      }\n    });\n\n    // Configure the callback for when the slider changes value.\n    this.slider.noUiSlider.on(\"slide\", values => {\n      self.value = utils.round(values[0], self.decPlaces);\n      self.setLabel(values[0]);\n      if (utils.isFunction(self.callback)) {\n        self.callback(self.callbackArgs);\n      }\n    });\n  }\n\n  /**\n   * Sets a value in the label. This value is formatted accoding to the settings in the element.\n   * @public\n   * @param {number} value Desired value to set in the label.\n   */\n  setLabel(value) {\n    this.label.val(\n      utils.formatValue(value, this.units, this.decPlaces, this.fixPlaces)\n    );\n  }\n\n  /**\n   * Sets a value in the slider. This modifies the value in the label.\n   * @public\n   * @param {number} value Desired value to set in the slider.\n   */\n  set(value) {\n    const parsed = utils.clamp(value, this.min, this.max);\n    this.slider.noUiSlider.set(parsed);\n    this.setLabel(parsed);\n    this.value = utils.round(parsed, this.decPlaces);\n    if (utils.isFunction(this.callback)) {\n      this.callback(this.callbackArgs);\n    }\n  }\n\n  /**\n   * Get the current value of the slider.\n   * @public\n   * @returns {number} The current value of the slider.\n   */\n  get() {\n    return this.value;\n  }\n\n  /**\n   * Enable or disable the slider. When the slider is disabled the color changes to {@link COLORS}.GRAY.\n   * Once it changes back to enabled, its previous color is restored.\n   * @public\n   * @param {boolean} state Desired state of the slider.\n   */\n  enabled(state) {\n    this.slider.setAttribute(\"disabled\", state);\n    if (state) {\n      this.setColor(this.prevColor);\n    } else {\n      this.prevColor = this.color;\n      this.setColor(constants.COLORS.GRAY);\n    }\n  }\n\n  /**\n   * Change the color of the slider.\n   * @public\n   * @param {string} color Desired HEX color.\n   */\n  setColor(color) {\n    if (color !== undefined) this.color = color;\n    $(`#${this.id}_slider`).css(\"background\", this.color);\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/dom/Slider.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 246,
    "kind": "class",
    "name": "Slider",
    "memberof": "src/dom/Slider.js",
    "static": true,
    "longname": "src/dom/Slider.js~Slider",
    "access": "public",
    "export": true,
    "importPath": "core/src/dom/Slider.js",
    "importStyle": "Slider",
    "description": "Class used to handle the sliders and their labels. ",
    "lineNumber": 9,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Slider"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Slider properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "id",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#id",
    "access": "public",
    "description": "Sets the HTML base id of the slider and label element.\nIn order for the slider to match with a label, the id must be the same for both elements.\nThe ending changes depending if it is a slider or a label.\nThis class will look for the id: {id}_slider and {id}_label, where id is this value.\nDefault value is \"\".",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "color",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#color",
    "access": "public",
    "description": "Sets the color in HEX format of the slider.\nDefault value is {@link COLORS}.RED.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "prevColor",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#prevColor",
    "access": "public",
    "description": "Stores a copy of the current color. Used when the slider is disabled and\nthe color must be later restored when the slider is enabled again.\nDefault value is {@link COLORS}.RED.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "units",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#units",
    "access": "public",
    "description": "Sets the units that the slider will use.\nDefault value is \"\".",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "start",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#start",
    "access": "public",
    "description": "Sets the starting position of the slider.\nDefault value is 0.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "min",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#min",
    "access": "public",
    "description": "Sets the minimum value of the slider.\nDefault value is 0.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "max",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#max",
    "access": "public",
    "description": "Sets the maximum value of the slider.\nDefault value is 1.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "decPlaces",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#decPlaces",
    "access": "public",
    "description": "Sets the amount of decimal places displayed on the label.\nDefault value is 1.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "fixPlaces",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#fixPlaces",
    "access": "public",
    "description": "Flag for fixing the decimal places to the amount set in {@link Slider.decPlaces}.\nDefault value is false.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "callback",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#callback",
    "access": "public",
    "description": "Sets a callback for when the slider changes value.\nDefault value is undefined.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "callbackArgs",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#callbackArgs",
    "access": "public",
    "description": "Sets the arguments passed to the callback function set in {@link Slider.callback}.\nDefault value is undefined.",
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "value",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#value",
    "access": "public",
    "description": "Sets the current value of the slider.\nDefault value is {@link Slider.start}.",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "slider",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#slider",
    "access": "public",
    "description": "Raw slider element obtained by document.getElementById.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "label",
    "memberof": "src/dom/Slider.js~Slider",
    "static": false,
    "longname": "src/dom/Slider.js~Slider#label",
    "access": "public",
    "description": "Raw label element obtained by jQuery.",
    "lineNumber": 118,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "method",
    "name": "setLabel",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#setLabel",
    "access": "public",
    "description": "Sets a value in the label. This value is formatted accoding to the settings in the element.",
    "lineNumber": 151,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Desired value to set in the label."
      }
    ],
    "return": null
  },
  {
    "__docId__": 263,
    "kind": "method",
    "name": "set",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#set",
    "access": "public",
    "description": "Sets a value in the slider. This modifies the value in the label.",
    "lineNumber": 162,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "Desired value to set in the slider."
      }
    ],
    "return": null
  },
  {
    "__docId__": 265,
    "kind": "method",
    "name": "get",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#get",
    "access": "public",
    "description": "Get the current value of the slider.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The current value of the slider."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The current value of the slider."
    },
    "params": []
  },
  {
    "__docId__": 266,
    "kind": "method",
    "name": "enabled",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#enabled",
    "access": "public",
    "description": "Enable or disable the slider. When the slider is disabled the color changes to {@link COLORS}.GRAY.\nOnce it changes back to enabled, its previous color is restored.",
    "lineNumber": 187,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "Desired state of the slider."
      }
    ],
    "return": null
  },
  {
    "__docId__": 268,
    "kind": "method",
    "name": "setColor",
    "memberof": "src/dom/Slider.js~Slider",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/Slider.js~Slider#setColor",
    "access": "public",
    "description": "Change the color of the slider.",
    "lineNumber": 202,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Desired HEX color."
      }
    ],
    "return": null
  },
  {
    "__docId__": 270,
    "kind": "file",
    "name": "src/dom/dom.js",
    "content": "import * as utils from \"../Utils\";\n\n/**\n * Parent class for handling DOM elements.\n * @private\n * @class DOMElement\n */\nexport default class DOMElement {\n\n  /**\n   * @constructor\n   * @param {string} id HTML Id of the element.\n   */\n  constructor(id) {\n\n    /**\n     * jQuery reference to the element.\n     * @type {object}\n     */\n    this.obj = $(utils.fixId(id));\n\n  }\n\n  /**\n   * Enable or disable the DOM element.\n   * @param {boolean} state Desired state of the element.\n   */\n  enabled(state) {\n    this.obj.prop(\"disabled\", !state);\n  }\n\n}\n\n\n/**\n * Class used to handle a checkbox (<input type=\"checkbox\">).\n * @public\n * @class Option\n * @example\n * // Given the following HTML checkbox:\n * //   <input type=\"checkbox\" id=\"showPoints\">\n * var showPoints = new Option(\"showPoints\", function(val) {\n *  console.log(val);\n * });\n */\nexport class Option extends DOMElement {\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the checkbox.\n   * @param {function} onClick Callback function for when the checkbox changes state.\n   */\n  constructor(id, onClick) {\n\n    // Extend DOMElement.\n    super(id);\n    \n    /**\n     * Callback function for when the checkbox changes state. The new state of the \n     * checkbox is passed to the callback function as a parameter.\n     * @type {function}\n     */\n    this.onClick = onClick;\n\n    // Set the callback.\n    const self = this;\n    this.obj.on(\"click\", () => {\n      if (utils.isFunction(self.onClick)) {\n        if (utils.isFunction(self.onClick)) self.onClick(self.obj.prop(\"checked\"));\n      }\n    });\n\n  }\n\n}\n\n/**\n * Class used to handle a button (<button>).\n * @public\n * @class Button\n * @example\n * // Given the following HTML button:\n * //   <button type=\"button\" id=\"start\"></button>\n * var start = new Button(\"start\", function() {\n *  console.log(\"clicked\");\n * });\n */\nexport class Button extends DOMElement {\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the button.\n   * @param {function} onClick Callback function for when button is pressed.\n   */\n  constructor(id, onClick) {\n\n    // Extend DOMElement.\n    super(id);\n\n    /**\n     * Callback function for when the button gets pressed.\n     * @type {function}\n     */\n    this.onClick = onClick;\n\n    // Set the callback.\n    const self = this;\n    this.obj.on(\"click\", () => {\n      if (utils.isFunction(self.onClick)) self.onClick();\n    });\n\n  }\n\n}\n\n/**\n * Class used to handle select elements (<select>).\n * @public\n * @class Select\n * @example\n * // Given the following HTML select element:\n * //   <select id=\"fx\" name=\"fx\">\n * //     <option value=\"1\">Option 1</option>\n * //     <option value=\"2\">Option 2</option>\n * //     <option value=\"3\">Option 3</option>\n * //   </select>\n * var fx = new Select(\"fx\", function(val) {\n *  console.log(val);\n * });\n */\nexport class Select extends DOMElement {\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the select element.\n   * @param {function} onChange Callback function for when the selected option changes.\n   */\n  constructor(id, onChange) {\n\n    // Extend DOMElement.\n    super(id);\n\n    /**\n     * Callback function for when the selected option changes. The value of the selected \n     * option is passed to the callback function as a parameter.\n     * @type {function}\n     */\n    this.onChange = onChange;\n\n    // Set the callback.\n    const self = this;\n    this.obj.on('change', function() {\n      if (utils.isFunction(self.onChange)) self.onChange(self.obj.find(\":selected\").val());\n    });\n\n  }\n  \n}\n\n/**\n * Class used to handle a set of multiple radio buttons (<input type=\"radio\">).\n * @public\n * @class Options\n * @example\n * // Given the following set of HTML radio buttons:\n * //   <input type=\"radio\" name=\"graph_type\" value=\"pos\">\n * //   <input type=\"radio\" name=\"graph_type\" value=\"vel\">\n * //   <input type=\"radio\" name=\"graph_type\" value=\"accel\">\n * var graph_type = new Options(\"graph_type\", function(val) {\n *    console.log(val);\n * });\n */\nexport class Options {\n\n  /**\n   * @constructor\n   * @param {string} name Name of the radio buttons.\n   * @param {function} onChange Callback function for when any of the radio buttons changes state.\n   */\n  constructor(name, onChange) {\n\n    /**\n     * Sets the id of the input using the name as an argument. This id is then used to obtain the\n     * jQuery object of the input.\n     * @type {string}\n     */\n    this.name = `input[name=\"${name}\"]`;\n\n    /**\n     * jQuery reference to the input.\n     * @type {object}\n     */\n    this.obj = $(this.name);\n\n    /**\n     * Callback function for when a radio button is selected. The value of the selected \n     * radio button is passed to the callback function as a parameter.\n     * @type {function}\n     */\n    this.onChange = onChange;\n\n    // Set the callback.\n    const self = this;\n    this.obj.change(() => {\n      if (utils.isFunction(self.onChange)) {\n        self.onChange($(`${self.name}:checked`).val());\n      }\n    });\n  \n  }\n\n}",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/dom/dom.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 271,
    "kind": "class",
    "name": "DOMElement",
    "memberof": "src/dom/dom.js",
    "static": true,
    "longname": "src/dom/dom.js~DOMElement",
    "access": "private",
    "export": true,
    "importPath": "core/src/dom/dom.js",
    "importStyle": "DOMElement",
    "description": "Parent class for handling DOM elements.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "DOMElement"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 272,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/dom.js~DOMElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~DOMElement#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "HTML Id of the element."
      }
    ]
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "obj",
    "memberof": "src/dom/dom.js~DOMElement",
    "static": false,
    "longname": "src/dom/dom.js~DOMElement#obj",
    "access": "public",
    "description": "jQuery reference to the element.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "enabled",
    "memberof": "src/dom/dom.js~DOMElement",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~DOMElement#enabled",
    "access": "public",
    "description": "Enable or disable the DOM element.",
    "lineNumber": 28,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "Desired state of the element."
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "class",
    "name": "Option",
    "memberof": "src/dom/dom.js",
    "static": true,
    "longname": "src/dom/dom.js~Option",
    "access": "public",
    "export": true,
    "importPath": "core/src/dom/dom.js",
    "importStyle": "{Option}",
    "description": "Class used to handle a checkbox (<input type=\"checkbox\">).",
    "examples": [
      "// Given the following HTML checkbox:\n//   <input type=\"checkbox\" id=\"showPoints\">\nvar showPoints = new Option(\"showPoints\", function(val) {\n console.log(val);\n});"
    ],
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Option"
      }
    ],
    "interface": false,
    "extends": [
      "DOMElement"
    ]
  },
  {
    "__docId__": 276,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/dom.js~Option",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~Option#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 53,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "HTML id of the checkbox."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onClick",
        "description": "Callback function for when the checkbox changes state."
      }
    ]
  },
  {
    "__docId__": 277,
    "kind": "member",
    "name": "onClick",
    "memberof": "src/dom/dom.js~Option",
    "static": false,
    "longname": "src/dom/dom.js~Option#onClick",
    "access": "public",
    "description": "Callback function for when the checkbox changes state. The new state of the \ncheckbox is passed to the callback function as a parameter.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 278,
    "kind": "class",
    "name": "Button",
    "memberof": "src/dom/dom.js",
    "static": true,
    "longname": "src/dom/dom.js~Button",
    "access": "public",
    "export": true,
    "importPath": "core/src/dom/dom.js",
    "importStyle": "{Button}",
    "description": "Class used to handle a button (<button>).",
    "examples": [
      "// Given the following HTML button:\n//   <button type=\"button\" id=\"start\"></button>\nvar start = new Button(\"start\", function() {\n console.log(\"clicked\");\n});"
    ],
    "lineNumber": 88,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Button"
      }
    ],
    "interface": false,
    "extends": [
      "DOMElement"
    ]
  },
  {
    "__docId__": 279,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/dom.js~Button",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~Button#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "HTML id of the button."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onClick",
        "description": "Callback function for when button is pressed."
      }
    ]
  },
  {
    "__docId__": 280,
    "kind": "member",
    "name": "onClick",
    "memberof": "src/dom/dom.js~Button",
    "static": false,
    "longname": "src/dom/dom.js~Button#onClick",
    "access": "public",
    "description": "Callback function for when the button gets pressed.",
    "lineNumber": 104,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 281,
    "kind": "class",
    "name": "Select",
    "memberof": "src/dom/dom.js",
    "static": true,
    "longname": "src/dom/dom.js~Select",
    "access": "public",
    "export": true,
    "importPath": "core/src/dom/dom.js",
    "importStyle": "{Select}",
    "description": "Class used to handle select elements (<select>).",
    "examples": [
      "// Given the following HTML select element:\n//   <select id=\"fx\" name=\"fx\">\n//     <option value=\"1\">Option 1</option>\n//     <option value=\"2\">Option 2</option>\n//     <option value=\"3\">Option 3</option>\n//   </select>\nvar fx = new Select(\"fx\", function(val) {\n console.log(val);\n});"
    ],
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Select"
      }
    ],
    "interface": false,
    "extends": [
      "DOMElement"
    ]
  },
  {
    "__docId__": 282,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/dom.js~Select",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~Select#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "HTML id of the select element."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onChange",
        "description": "Callback function for when the selected option changes."
      }
    ]
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "onChange",
    "memberof": "src/dom/dom.js~Select",
    "static": false,
    "longname": "src/dom/dom.js~Select#onChange",
    "access": "public",
    "description": "Callback function for when the selected option changes. The value of the selected \noption is passed to the callback function as a parameter.",
    "lineNumber": 148,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 284,
    "kind": "class",
    "name": "Options",
    "memberof": "src/dom/dom.js",
    "static": true,
    "longname": "src/dom/dom.js~Options",
    "access": "public",
    "export": true,
    "importPath": "core/src/dom/dom.js",
    "importStyle": "{Options}",
    "description": "Class used to handle a set of multiple radio buttons (<input type=\"radio\">).",
    "examples": [
      "// Given the following set of HTML radio buttons:\n//   <input type=\"radio\" name=\"graph_type\" value=\"pos\">\n//   <input type=\"radio\" name=\"graph_type\" value=\"vel\">\n//   <input type=\"radio\" name=\"graph_type\" value=\"accel\">\nvar graph_type = new Options(\"graph_type\", function(val) {\n   console.log(val);\n});"
    ],
    "lineNumber": 173,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Options"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 285,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/dom/dom.js~Options",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/dom/dom.js~Options#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "Name of the radio buttons."
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onChange",
        "description": "Callback function for when any of the radio buttons changes state."
      }
    ]
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "name",
    "memberof": "src/dom/dom.js~Options",
    "static": false,
    "longname": "src/dom/dom.js~Options#name",
    "access": "public",
    "description": "Sets the id of the input using the name as an argument. This id is then used to obtain the\njQuery object of the input.",
    "lineNumber": 187,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "obj",
    "memberof": "src/dom/dom.js~Options",
    "static": false,
    "longname": "src/dom/dom.js~Options#obj",
    "access": "public",
    "description": "jQuery reference to the input.",
    "lineNumber": 193,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "onChange",
    "memberof": "src/dom/dom.js~Options",
    "static": false,
    "longname": "src/dom/dom.js~Options#onChange",
    "access": "public",
    "description": "Callback function for when a radio button is selected. The value of the selected \nradio button is passed to the callback function as a parameter.",
    "lineNumber": 200,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "file",
    "name": "src/figures/Axis.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\nimport WorldElement from \"../WorldElement\";\nimport Renderer from \"../Renderer\";\n\n/**\n * The Axis class is responsible for drawing the axis onto the canvas and setting the new\n * origin used for the canvas. All objects displayed will be referenced to the position of the axis.\n * Therefore, by changing its position the origin is also displaced.\n * @private\n * @class Axis\n */\nexport default class Axis extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {number} [width=0] Initial width of the axis.\n   * @param {number} [height=0] Initial height of the canvas.\n   * @param {object} [opts] Object that contains valid Axis properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(width, height, opts) {\n    \n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the current height of the axis.\n     * @type {number}\n     */\n    this.height = height || 0;\n\n    /**\n     * Sets the current width of the axis.\n     * @type {number}\n     */\n    this.width = width || 0;\n\n    /**\n     * Flag for allowing the axis to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.isDraggable = true;\n\n    /**\n     * Sets the color of the main -x and -y axis.\n     * Default value is #CCCCCC.\n     * @type {string}\n     */\n    this.color = \"#CCCCCC\";\n\n    /**\n     * Sets the color of the grid.\n     * Default value is #EEEEEE.\n     * @type {string}\n     */\n    this.subAxisColor = \"#EEEEEE\";\n\n    /**\n     * Sets the cursor style when the mouse is over the axis.\n     * Default value is {@link CURSOR}.MOVE.\n     * @type {string}\n     */\n    this.cursor = constants.CURSOR.MOVE;\n\n    /**\n     * Sets the move style of the axis to change by pixels rather than by units.\n     * Default value is {@link MOVE_STYLE}.BY_PX.\n     * @type {string}\n     */\n    this.mouseMoveStyle = constants.MOVE_STYLE.BY_PX;\n\n    /**\n     * Stores the minimum dimensions that the axis can have given the current\n     * position and dimensions of the axis in both -x and -y directions.\n     * @type {number[]}\n     */\n    this.min = [0, 0];\n\n    /**\n     * Stores the maximum dimensions that the axis can have given the current\n     * position and dimensions of the axis in both -x and -y directions.\n     * @type {number[]}\n     */\n    this.max = [0, 0];\n\n    /**\n     * Flag for enabling the display of the -x axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.displayX = true;\n\n    /**\n     * Flag for enabling the display of the -y axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.displayY = true;\n\n    /**\n     * Sets the length of the ticks that are placed every \"unit\" in pixels.\n     * Default value is 12.\n     * @type {number}\n     */\n    this.tickSize = 12;\n    \n    /**\n     * Sets the length of the smaller ticks that are placed every \"unit\" / 2 in pixels.\n     * Default value is 8.\n     * @type {number}\n     */\n    this.tickSizeSmall = 8;\n\n    /**\n     * Sets the distance between the axis and the unit label.\n     * Default value is 5.\n     * @type {number}\n     */\n    this.textOffset = 5;\n\n    /**\n     * Flag for enabling the drawing of the negative part of the axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.negative = true;\n\n    /**\n     * Flag for enabling the drawing of the grid.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.grid = true;\n\n    /**\n     * Flag for placing the numbers on the outside of the first quadrant of the axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.outsideNumbers = true;\n\n    /**\n     * Sets the prerenderer for the Axis. It is enabled by default.\n     * @type {Renderer}\n     */\n    this.renderer = new Renderer({ enabled: true, isAxis: true, parent: this });\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Updates the dimensions of the axis when the world gets resized.\n   * @private\n   */\n  resize() {\n    this.width = this.world.width;\n    this.height = this.world.height;\n  }\n\n  /**\n   * Tests if the mouse is over the axis. If the axis is enabled it will return true, since at all\n   * moments the mouse is over the axis.\n   * @private\n   * @returns {boolean} True if the axis is enabled, false otherwise.\n   */\n  isMouseOver() {\n    return this.display;\n  }\n\n  /**\n   * Draws the axis onto the selected canvas (renderer by default). First, the dimension of the axis\n   * are calculated in order for the axis to do not extend more than the visible dimensions of the canvas.\n   * With that, a grid is drawn and finally the -x and -y axes are drawn.\n   * @private\n   */\n  drawAxis() {\n    const { scaleX, scaleY } = this.world;\n    const ctx = this.renderer.enabled ? this.renderer.ctx : this.world.ctx;\n    const width = this.width > 0 ? this.width : this.world.width;\n    const height = this.height > 0 ? this.height : this.world.height;\n    const minY = this.negative ? height - this.position.y : 0;\n    const maxY = -this.position.y;\n    const minX = this.negative ? -this.position.x : 0;\n    const maxX = width - this.position.x;\n\n    this.min = [minX, minY];\n    this.max = [maxX, maxY];\n\n    const fromX = Math.ceil(minX / scaleX.px) * scaleX.px;\n    const toX = Math.floor(maxX / scaleX.px) * scaleX.px;\n    const fromY = Math.ceil(maxY / scaleY.px) * scaleY.px;\n    const toY = Math.floor(minY / scaleY.px) * scaleY.px;\n    let x = 0;\n    let y = 0;\n\n    // Draw the grid\n    if (this.grid) {\n      ctx.beginPath();\n      ctx.strokeStyle = this.subAxisColor;\n      // Draw subdivisions of the Y axis\n      for (y = fromY; y <= toY; y += scaleY.px) {\n        if (y !== 0) {\n          ctx.moveTo(minX, y);\n          ctx.lineTo(maxX, y);\n        }\n      }\n      // Draw subdivisions of the X axis\n      for (x = fromX; x <= toX; x += scaleX.px) {\n        if (x !== 0) {\n          ctx.moveTo(x, minY);\n          ctx.lineTo(x, maxY);\n        }\n      }\n      ctx.stroke();\n      ctx.closePath();\n    }\n\n    // Draw Y axis ticks\n    ctx.beginPath();\n    ctx.strokeStyle = this.color;\n    this.font.toCtx(ctx);\n\n    // Make sure the Y axis is visible, if it is then\n    // draw the Y axis and the ticks and labels\n    if (\n      this.position.x < width + this.tickSize &&\n      this.position.x > -this.tickSize &&\n      this.displayY\n    ) {\n      // Draw Y axis\n      ctx.moveTo(0, minY);\n      ctx.lineTo(0, maxY);\n\n      // Calculate the text offset for the labels\n      const xOffset = this.outsideNumbers\n        ? -this.tickSize - this.textOffset\n        : this.tickSize + this.textOffset;\n      ctx.textAlign = this.outsideNumbers ? \"right\" : \"left\";\n\n      // Draw ticks subdividing the X axis\n      for (y = fromY; y <= toY; y += scaleY.px) {\n        // Do not draw a big tick and the scale when y = 0.\n        if (y !== 0) {\n          // Draw big ticks\n          ctx.moveTo(-this.tickSize, y);\n          ctx.lineTo(+this.tickSize, y);\n\n          // Draw scale\n          ctx.fillText(\n            utils.round(y * scaleY.toUnits, 3) + scaleY.unit,\n            xOffset,\n            y\n          );\n        }\n\n        // Draw small ticks\n        if (y - scaleY.px / 2 > maxY) {\n          ctx.moveTo(-this.tickSizeSmall, y - scaleY.px / 2);\n          ctx.lineTo(+this.tickSizeSmall, y - scaleY.px / 2);\n        }\n      }\n\n      // Last tick\n      if (toY + scaleY.px / 2 < minY) {\n        ctx.moveTo(-this.tickSizeSmall, toY + scaleY.px / 2);\n        ctx.lineTo(+this.tickSizeSmall, toY + scaleY.px / 2);\n      }\n    }\n\n    // Make sure the X axis is still visible, if it is then\n    // draw the X axis and the ticks and labels\n    if (\n      this.position.y < height + this.tickSize &&\n      this.position.y > -this.tickSize &&\n      this.displayX\n    ) {\n      // Draw X Axis\n      ctx.moveTo(minX, 0);\n      ctx.lineTo(maxX, 0);\n\n      // Calculate the text offset for the labels\n      const yOffset = this.outsideNumbers\n        ? 7 + this.tickSize + this.textOffset\n        : -7 - this.tickSize - this.textOffset;\n      ctx.textAlign = \"center\";\n\n      // Draw ticks subdividing the Y axis\n      for (x = fromX; x <= toX; x += scaleX.px) {\n        // Do not draw the big ticks when x = 0 unless no negative numbers are being displayed\n        if (x !== 0 || !this.negative) {\n          ctx.moveTo(x, -this.tickSize);\n          ctx.lineTo(x, +this.tickSize);\n        }\n\n        // Draw scale when x is not 0 unless it no negative numbers are being displayed\n        if ((x === 0 && !this.negative) || x !== 0) {\n          ctx.fillText(\n            utils.round(x * scaleX.toUnits, 3) + scaleX.unit,\n            x,\n            yOffset\n          );\n        }\n\n        // Draw small ticks\n        if (x - scaleX.px / 2 > minX) {\n          ctx.moveTo(x - scaleX.px / 2, -this.tickSizeSmall);\n          ctx.lineTo(x - scaleX.px / 2, +this.tickSizeSmall);\n        }\n      }\n\n      // Last tick\n      if (toX + scaleX.px / 2 < maxX) {\n        ctx.moveTo(toX + scaleX.px / 2, -this.tickSizeSmall);\n        ctx.lineTo(toX + scaleX.px / 2, +this.tickSizeSmall);\n      }\n    }\n\n    // As the zero point is labed by the x axis, display it if the y axis is\n    // still being display.\n    if (this.displayY && !this.displayX) {\n      const xOffset = this.outsideNumbers\n        ? -this.tickSize - this.textOffset\n        : this.tickSize + this.textOffset;\n      ctx.textAlign = this.outsideNumbers ? \"right\" : \"left\";\n      ctx.fillText(`0${scaleX.unit}`, xOffset, 0);\n    }\n\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  /**\n   * Main draw function for the axis called by the World automatically. Since the axis is prerendered, \n   * this function handles the toggling between the renderer and the canvas.\n   * @private\n   */\n  draw() {\n    if (this.renderer.enabled) {\n      if (this.renderer.rendered) {\n        this.renderer.draw();\n      } else {\n        this.renderer.begin();\n        this.drawAxis();\n        this.renderer.end();\n        this.renderer.draw();\n      }\n    } else {\n      this.drawAxis();\n    }\n  }\n\n  /**\n   * Test if a point is visible given the current position of the axis and the canvas size.\n   * @public\n   * @param {number} x Coordinate -x to test.\n   * @param {number} y Coordinate -y to test.\n   * @returns {boolean} True if the point is visible, false otherwise.\n   */\n  isPointVisible(x, y) {\n    if (this.min[0] <= x && x <= this.max[0]) {\n      if (this.min[1] >= y && y >= this.max[1]) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Axis.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 290,
    "kind": "class",
    "name": "Axis",
    "memberof": "src/figures/Axis.js",
    "static": true,
    "longname": "src/figures/Axis.js~Axis",
    "access": "private",
    "export": true,
    "importPath": "core/src/figures/Axis.js",
    "importStyle": "Axis",
    "description": "The Axis class is responsible for drawing the axis onto the canvas and setting the new\norigin used for the canvas. All objects displayed will be referenced to the position of the axis.\nTherefore, by changing its position the origin is also displaced.",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Axis"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 291,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "width",
        "description": "Initial width of the axis."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "height",
        "description": "Initial height of the canvas."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Axis properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#height",
    "access": "public",
    "description": "Sets the current height of the axis.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#width",
    "access": "public",
    "description": "Sets the current width of the axis.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "isDraggable",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#isDraggable",
    "access": "public",
    "description": "Flag for allowing the axis to be dragged around.\nDefault value is true.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 295,
    "kind": "member",
    "name": "color",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#color",
    "access": "public",
    "description": "Sets the color of the main -x and -y axis.\nDefault value is #CCCCCC.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 296,
    "kind": "member",
    "name": "subAxisColor",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#subAxisColor",
    "access": "public",
    "description": "Sets the color of the grid.\nDefault value is #EEEEEE.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "cursor",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#cursor",
    "access": "public",
    "description": "Sets the cursor style when the mouse is over the axis.\nDefault value is {@link CURSOR}.MOVE.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "mouseMoveStyle",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#mouseMoveStyle",
    "access": "public",
    "description": "Sets the move style of the axis to change by pixels rather than by units.\nDefault value is {@link MOVE_STYLE}.BY_PX.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "min",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#min",
    "access": "public",
    "description": "Stores the minimum dimensions that the axis can have given the current\nposition and dimensions of the axis in both -x and -y directions.",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "max",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#max",
    "access": "public",
    "description": "Stores the maximum dimensions that the axis can have given the current\nposition and dimensions of the axis in both -x and -y directions.",
    "lineNumber": 85,
    "type": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "displayX",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#displayX",
    "access": "public",
    "description": "Flag for enabling the display of the -x axis.\nDefault value is true.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "member",
    "name": "displayY",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#displayY",
    "access": "public",
    "description": "Flag for enabling the display of the -y axis.\nDefault value is true.",
    "lineNumber": 99,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 303,
    "kind": "member",
    "name": "tickSize",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#tickSize",
    "access": "public",
    "description": "Sets the length of the ticks that are placed every \"unit\" in pixels.\nDefault value is 12.",
    "lineNumber": 106,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "member",
    "name": "tickSizeSmall",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#tickSizeSmall",
    "access": "public",
    "description": "Sets the length of the smaller ticks that are placed every \"unit\" / 2 in pixels.\nDefault value is 8.",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 305,
    "kind": "member",
    "name": "textOffset",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#textOffset",
    "access": "public",
    "description": "Sets the distance between the axis and the unit label.\nDefault value is 5.",
    "lineNumber": 120,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 306,
    "kind": "member",
    "name": "negative",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#negative",
    "access": "public",
    "description": "Flag for enabling the drawing of the negative part of the axis.\nDefault value is true.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "grid",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#grid",
    "access": "public",
    "description": "Flag for enabling the drawing of the grid.\nDefault value is true.",
    "lineNumber": 134,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "outsideNumbers",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#outsideNumbers",
    "access": "public",
    "description": "Flag for placing the numbers on the outside of the first quadrant of the axis.\nDefault value is true.",
    "lineNumber": 141,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/figures/Axis.js~Axis",
    "static": false,
    "longname": "src/figures/Axis.js~Axis#renderer",
    "access": "public",
    "description": "Sets the prerenderer for the Axis. It is enabled by default.",
    "lineNumber": 147,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "resize",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#resize",
    "access": "private",
    "description": "Updates the dimensions of the axis when the world gets resized.",
    "lineNumber": 158,
    "params": [],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#isMouseOver",
    "access": "private",
    "description": "Tests if the mouse is over the axis. If the axis is enabled it will return true, since at all\nmoments the mouse is over the axis.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the axis is enabled, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the axis is enabled, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "drawAxis",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#drawAxis",
    "access": "private",
    "description": "Draws the axis onto the selected canvas (renderer by default). First, the dimension of the axis\nare calculated in order for the axis to do not extend more than the visible dimensions of the canvas.\nWith that, a grid is drawn and finally the -x and -y axes are drawn.",
    "lineNumber": 179,
    "params": [],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#draw",
    "access": "private",
    "description": "Main draw function for the axis called by the World automatically. Since the axis is prerendered, \nthis function handles the toggling between the renderer and the canvas.",
    "lineNumber": 340,
    "params": [],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "isPointVisible",
    "memberof": "src/figures/Axis.js~Axis",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Axis.js~Axis#isPointVisible",
    "access": "public",
    "description": "Test if a point is visible given the current position of the axis and the canvas size.",
    "lineNumber": 362,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the point is visible, false otherwise."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Coordinate -x to test."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Coordinate -y to test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the point is visible, false otherwise."
    }
  },
  {
    "__docId__": 319,
    "kind": "file",
    "name": "src/figures/Ball.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\nimport WorldElement from \"../WorldElement\";\n\n/**\n * The Ball class is a particle class used to draw round particles with the advantage that\n * they can be labeled and displayed with a gradient, giving a more realistic feel to the\n * particle.\n * @public\n * @class Ball\n */\nexport default class Ball extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {number} [r=1] Radius of the charge in units.\n   * @param {object} [opts] Object that contains valid Ball properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(r, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Flag for allowing the ball to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.isDraggable = true;\n\n\n    /**\n     * Flag for allowing the ball to become a topmost object when its beging dragged,\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.topmostOnDrag = true;\n\n    /**\n     * Radius of the ball in units.\n     * Default value is 1.\n     * @type {number}\n     */\n    this.r = r === undefined ? 1 : r;\n\n    /**\n     * Spot for writing a label on the ball. If the {@link Ball.upperLabel} is blank,\n     * then the lower label will be centered on the particle. If not, then it will be\n     * the lower label on the ball.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.lowerLabel = \"\";\n\n    /**\n     * Upper spot for writing a label on the bal..\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.upperLabel = \"\";\n\n    /**\n     * Flag for enabling a gradient on the ball. The color used for gradient\n     * is the one set in {@link Ball.color}.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.gradient = true;\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Tests if the mouse is over the ball.\n   * @private\n   * @returns {boolean} True if the mouse is over the ball, false otherwise.\n   */\n  isMouseOver() {\n    return (\n      utils.distSquared(\n        this.world.mouse.rx,\n        this.world.mouse.ry,\n        this.position.x,\n        this.position.y\n      ) <\n      this.r ** 2\n    );\n  }\n\n  /**\n   * Main draw function for the ball called by the World automatically.\n   * @private\n   */\n  draw() {\n    if (this.r === 0) return;\n    const { scaleX, scaleY, ctx } = this.world;\n    let { color } = this;\n    const px = this.position.x * scaleX.toPx;\n    const py = this.position.y * scaleY.toPx;\n    const pr = this.r * scaleX.toPx;\n    if (this.gradient) {\n      color = ctx.createRadialGradient(px, py, 0, px, py, pr);\n      color.addColorStop(0, \"white\");\n      color.addColorStop(1, this.color);\n    }\n    ctx.fillStyle = color;\n    ctx.beginPath();\n    ctx.arc(px, py, pr, 0, constants.TWO_PI);\n    ctx.fill();\n    ctx.closePath();\n    if (this.upperLabel !== \"\" || this.lowerLabel !== \"\") {\n      this.font.toCtx(ctx);\n      const offset = this.upperLabel !== \"\" && this.lowerLabel !== \"\" ? 7 : 0;\n      if (this.upperLabel !== \"\")\n        ctx.fillText(this.upperLabel, px, py - offset);\n      if (this.lowerLabel !== \"\")\n        ctx.fillText(this.lowerLabel, px, py + offset);\n    }\n  }\n\n  /**\n   * Gets a color depending on the value a charge has.\n   * If the charge is positive the color is {@link COLORS}.RED.\n   * If the charge is negative the color is {@link COLORS}.BLUE.\n   * If the charge is neutral the color is {@link COLORS}.GRAY.\n   * @public\n   * @param {number} charge Charge of the particle in coulombs.\n   * @returns {string} Color for the charge.\n   */\n  static getChargeColor(charge) {\n    if (charge > 0) {\n      return constants.COLORS.RED;\n    }\n    if (charge < 0) {\n      return constants.COLORS.BLUE;\n    }\n    return constants.COLORS.GRAY;\n  }\n\n  /**\n   * Gets the sign a charge must have depending on the value a charge has.\n   * If the charge is positive the sign is \"+\".\n   * If the charge is negative the sign is \"-\".\n   * If the charge is neutral the sign is \"\".\n   * @public\n   * @param {number} charge  Charge of the particle in coulombs.\n   * @returns {string} Sign for the charge.\n   */\n  static getChargeSign(charge) {\n    if (charge > 0) {\n      return \"+\";\n    }\n    if (charge < 0) {\n      return \"-\";\n    }\n    return \"0\";\n  }\n\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Ball.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 320,
    "kind": "class",
    "name": "Ball",
    "memberof": "src/figures/Ball.js",
    "static": true,
    "longname": "src/figures/Ball.js~Ball",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Ball.js",
    "importStyle": "Ball",
    "description": "The Ball class is a particle class used to draw round particles with the advantage that\nthey can be labeled and displayed with a gradient, giving a more realistic feel to the\nparticle.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Ball"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 321,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Ball.js~Ball",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Ball.js~Ball#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "r",
        "description": "Radius of the charge in units."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Ball properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "isDraggable",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#isDraggable",
    "access": "public",
    "description": "Flag for allowing the ball to be dragged around.\nDefault value is true.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "topmostOnDrag",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#topmostOnDrag",
    "access": "public",
    "description": "Flag for allowing the ball to become a topmost object when its beging dragged,\nDefault value is true.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "r",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#r",
    "access": "public",
    "description": "Radius of the ball in units.\nDefault value is 1.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "lowerLabel",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#lowerLabel",
    "access": "public",
    "description": "Spot for writing a label on the ball. If the {@link Ball.upperLabel} is blank,\nthen the lower label will be centered on the particle. If not, then it will be\nthe lower label on the ball.\nDefault value is \"\".",
    "lineNumber": 53,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "upperLabel",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#upperLabel",
    "access": "public",
    "description": "Upper spot for writing a label on the bal..\nDefault value is \"\".",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "gradient",
    "memberof": "src/figures/Ball.js~Ball",
    "static": false,
    "longname": "src/figures/Ball.js~Ball#gradient",
    "access": "public",
    "description": "Flag for enabling a gradient on the ball. The color used for gradient\nis the one set in {@link Ball.color}.\nDefault value is true.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 328,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/figures/Ball.js~Ball",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Ball.js~Ball#isMouseOver",
    "access": "private",
    "description": "Tests if the mouse is over the ball.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the mouse is over the ball, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the mouse is over the ball, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 329,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Ball.js~Ball",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Ball.js~Ball#draw",
    "access": "private",
    "description": "Main draw function for the ball called by the World automatically.",
    "lineNumber": 96,
    "params": [],
    "return": null
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "getChargeColor",
    "memberof": "src/figures/Ball.js~Ball",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/figures/Ball.js~Ball.getChargeColor",
    "access": "public",
    "description": "Gets a color depending on the value a charge has.\nIf the charge is positive the color is {@link COLORS}.RED.\nIf the charge is negative the color is {@link COLORS}.BLUE.\nIf the charge is neutral the color is {@link COLORS}.GRAY.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Color for the charge."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charge",
        "description": "Charge of the particle in coulombs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Color for the charge."
    }
  },
  {
    "__docId__": 331,
    "kind": "method",
    "name": "getChargeSign",
    "memberof": "src/figures/Ball.js~Ball",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/figures/Ball.js~Ball.getChargeSign",
    "access": "public",
    "description": "Gets the sign a charge must have depending on the value a charge has.\nIf the charge is positive the sign is \"+\".\nIf the charge is negative the sign is \"-\".\nIf the charge is neutral the sign is \"\".",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Sign for the charge."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "charge",
        "description": "Charge of the particle in coulombs."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Sign for the charge."
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/figures/Box.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\nimport WorldElement from \"../WorldElement\";\nimport Text from \"./box/Box.Text\";\nimport Graph from \"./box/Box.Graph\";\nimport Label from \"./box/Box.Label\";\n\n/**\n * A Box allows for a window like object to be displayed in the world. This window object\n * has the possibility to display text, labels and graphs, completely isolated\n * from the settings of the world. \n * A box object does not have a width or a height. Instead, it takes the dimensions\n * of the objects it contains.\n * @public\n * @class Box\n */\nexport default class Box extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Box properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the width of the Box in pixels.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.width = 0;\n\n    /**\n     * Sets the height of the Box in pixels.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.height = 0;\n\n    /**\n     * Sets the color of the Box. The color must have the format as in {@link BOX_COLORS}.\n     * The default value is {@link BOX_COLORS}.BLUE.\n     * @type {object}\n     * @property {string} BACKGROUND Background color.\n     * @property {string} BORDER Border color.\n     */\n    this.color = constants.BOX_COLORS.BLUE;\n\n    /**\n     * Sets the move style of the Box to change by pixels rather than by units.\n     * Default value is {@link MOVE_STYLE}.BY_PX.\n     * @type {string}\n     */\n    this.mouseMoveStyle = constants.MOVE_STYLE.BY_PX;\n\n    /**\n     * Flag for allowing the Box to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.isDraggable = true;\n    \n    /**\n     * Sets the padding in pixels that the Box has. \n     * @type {object}\n     * @property {number} left=10 Left padding in pixels.\n     * @property {number} bottom=10 Bottom padding in pixels.\n     * @property {number} right=10 Right padding in pixels.\n     * @property {number} top=10 Top padding.\n     */\n    this.padding = { top: 10, right: 10, bottom: 10, left: 10 };\n\n    /**\n     * Flag for displaying debug rectangles around the elements inside the Box.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.debug = false;\n\n    /**\n     * Sets the title for the Box.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.title = \"\";\n\n    /**\n     * Sets an array where all elements inside the Box are stored.\n     * Default value is []\n     * @type {Label[]|Text[]|Graph[]}\n     */\n    this.elements = [];\n\n    // Configure the font of the Box.\n    this.font.set({\n      weight: 500,\n      size: 16,\n      baseline: \"top\",\n      align: \"center\",\n      color: constants.COLORS.GRAY\n    });\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n  \n  /**\n   * Adds a Text to the Box.\n   * @param {number} width Width of the Text in pixels.\n   * @param {number} height Height of the Text in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   * @returns {Text} Newly added Text.\n   */\n  addText(width, height, opts) {\n    const tb = new Text(this, width, height, opts);\n    this.elements.push(tb);\n    this.calculateDimensions();\n    return tb;\n  }\n\n  /**\n   * Adds a Label to the Box.\n   * @param {number} width Width of the Label in pixels.\n   * @param {number} height Height of the Label in pixels.\n   * @param {object} [opts] Object that contains valid Label properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   * @returns {Label} Newly added Label.\n   */\n  addLabel(width, height, opts) {\n    const tb = new Label(this, width, height, opts);\n    this.elements.push(tb);\n    this.calculateDimensions();\n    return tb;\n  }\n\n  /**\n   * Adds a Graph to the Box.\n   * @param {number} width Width of the Graph in pixels.\n   * @param {number} height Height of the Graph in pixels.\n   * @param {object} [opts] Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   * @returns {Graph} Newly added Graph.\n   */\n  addGraph(width, height, opts) {\n    const gb = new Graph(this, width, height, opts);\n    this.elements.push(gb);\n    this.calculateDimensions();\n    return gb;\n  }\n\n  /**\n   * Sets the padding of the Box object.\n   * @public\n   * @param {number} top Top padding in pixels.\n   * @param {number} right Right padding in pixels.\n   * @param {number} bottom Bottom padding in pixels.\n   * @param {number} left Left padding in pixels.\n   */\n  setPadding(top, right, bottom, left) {\n    this.padding.top = top;\n    this.padding.right = right;\n    this.padding.bottom = bottom;\n    this.padding.left = left;\n    this.calculateDimensions();\n  }\n\n  /**\n   * Since the box takes the dimensions of the objects it contains, this\n   * function calculates these dimensions. The function must be called after setting\n   * the dimensions of the objects it contains.\n   * @public\n   */\n  calculateDimensions() {\n    this.width = 0;\n    this.height = 0;\n    for (let i = 0; i < this.elements.length; i++) {\n      const minWidth =\n        this.padding.left +\n        this.padding.right +\n        this.elements[i].position.x +\n        this.elements[i].width;\n      if (this.width < minWidth) this.width = Math.ceil(minWidth);\n      const minHeight =\n        this.padding.top +\n        this.padding.bottom +\n        this.elements[i].position.y +\n        this.elements[i].height;\n      if (this.height < minHeight) this.height = Math.ceil(minHeight);\n    }\n  }\n\n  /**\n   * Tests if the mouse is over the box.\n   * @private\n   * @returns {boolean} True if the mouse is over the box, false otherwise.\n   */\n  isMouseOver() {\n    return utils.isCoordInside(\n      this.world.mouse.x,\n      this.world.mouse.y,\n      this.position.x + this.width / 2,\n      this.position.y + this.height / 2,\n      this.width / 2,\n      this.height / 2\n    );\n  }\n\n  /**\n   * Main draw function for the Box called by the World automatically.\n   * @private\n   */\n  draw() {\n    const { ctx } = this.world;\n    const x0 = this.position.x - this.world.axis.position.x;\n    const y0 = this.position.y - this.world.axis.position.y;\n    ctx.beginPath();\n    ctx.lineWidth = 3;\n    ctx.fillStyle = this.color.BACKGROUND;\n    ctx.strokeStyle = this.color.BORDER;\n    ctx.rect(x0, y0, this.width, this.height);\n    ctx.stroke();\n    ctx.fill();\n    ctx.closePath();\n    ctx.lineWidth = 1;\n    if (this.debug) {\n      ctx.beginPath();\n      ctx.strokeStyle = constants.COLORS.RED;\n      ctx.rect(\n        x0 + this.padding.left,\n        y0 + this.padding.top,\n        this.width - this.padding.left - this.padding.right,\n        this.height - this.padding.top - this.padding.bottom\n      );\n      ctx.stroke();\n      ctx.closePath();\n    }\n    if (this.title !== \"\") {\n      ctx.beginPath();\n      this.font.toCtx(ctx);\n      ctx.fillText(this.title, x0 + this.width / 2, y0 + this.padding.top);\n      ctx.closePath();\n    }\n    for (let i = 0; i < this.elements.length; i++) {\n      ctx.save();\n      ctx.translate(\n        x0 + this.padding.left + this.elements[i].position.x,\n        y0 + this.padding.top + this.elements[i].position.y\n      );\n      if (this.debug && utils.isFunction(this.elements[i].debug))\n        this.elements[i].debug();\n      if (this.elements[i].display)\n        this.elements[i].draw(ctx, this.display.debug);\n      ctx.restore();\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Box.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "Box",
    "memberof": "src/figures/Box.js",
    "static": true,
    "longname": "src/figures/Box.js~Box",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Box.js",
    "importStyle": "Box",
    "description": "A Box allows for a window like object to be displayed in the world. This window object\nhas the possibility to display text, labels and graphs, completely isolated\nfrom the settings of the world. \nA box object does not have a width or a height. Instead, it takes the dimensions\nof the objects it contains.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Box"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Box properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#width",
    "access": "public",
    "description": "Sets the width of the Box in pixels.\nDefault value is 0.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#height",
    "access": "public",
    "description": "Sets the height of the Box in pixels.\nDefault value is 0.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "color",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#color",
    "access": "public",
    "description": "Sets the color of the Box. The color must have the format as in {@link BOX_COLORS}.\nThe default value is {@link BOX_COLORS}.BLUE.",
    "lineNumber": 49,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "BACKGROUND",
        "description": "Background color."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "BORDER",
        "description": "Border color."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "mouseMoveStyle",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#mouseMoveStyle",
    "access": "public",
    "description": "Sets the move style of the Box to change by pixels rather than by units.\nDefault value is {@link MOVE_STYLE}.BY_PX.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "member",
    "name": "isDraggable",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#isDraggable",
    "access": "public",
    "description": "Flag for allowing the Box to be dragged around.\nDefault value is true.",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 340,
    "kind": "member",
    "name": "padding",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#padding",
    "access": "public",
    "description": "Sets the padding in pixels that the Box has. ",
    "lineNumber": 73,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "left",
        "description": "Left padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "bottom",
        "description": "Bottom padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "right",
        "description": "Right padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "top",
        "description": "Top padding."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 341,
    "kind": "member",
    "name": "debug",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#debug",
    "access": "public",
    "description": "Flag for displaying debug rectangles around the elements inside the Box.\nDefault value is false.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 342,
    "kind": "member",
    "name": "title",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#title",
    "access": "public",
    "description": "Sets the title for the Box.\nDefault value is \"\".",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 343,
    "kind": "member",
    "name": "elements",
    "memberof": "src/figures/Box.js~Box",
    "static": false,
    "longname": "src/figures/Box.js~Box#elements",
    "access": "public",
    "description": "Sets an array where all elements inside the Box are stored.\nDefault value is []",
    "lineNumber": 94,
    "type": {
      "nullable": null,
      "types": [
        "Label[]",
        "Text[]",
        "Graph[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "addText",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#addText",
    "access": "public",
    "description": "Adds a Text to the Box.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Text} Newly added Text."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the Text in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the Text in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Text"
      ],
      "spread": false,
      "description": "Newly added Text."
    }
  },
  {
    "__docId__": 345,
    "kind": "method",
    "name": "addLabel",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#addLabel",
    "access": "public",
    "description": "Adds a Label to the Box.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Label} Newly added Label."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the Label in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the Label in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Label properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Label"
      ],
      "spread": false,
      "description": "Newly added Label."
    }
  },
  {
    "__docId__": 346,
    "kind": "method",
    "name": "addGraph",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#addGraph",
    "access": "public",
    "description": "Adds a Graph to the Box.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Graph} Newly added Graph."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the Graph in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the Graph in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Graph"
      ],
      "spread": false,
      "description": "Newly added Graph."
    }
  },
  {
    "__docId__": 347,
    "kind": "method",
    "name": "setPadding",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#setPadding",
    "access": "public",
    "description": "Sets the padding of the Box object.",
    "lineNumber": 160,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "Top padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "Right padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "Bottom padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "Left padding in pixels."
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "calculateDimensions",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#calculateDimensions",
    "access": "public",
    "description": "Since the box takes the dimensions of the objects it contains, this\nfunction calculates these dimensions. The function must be called after setting\nthe dimensions of the objects it contains.",
    "lineNumber": 174,
    "params": [],
    "return": null
  },
  {
    "__docId__": 353,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#isMouseOver",
    "access": "private",
    "description": "Tests if the mouse is over the box.",
    "lineNumber": 198,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the mouse is over the box, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the mouse is over the box, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 354,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Box.js~Box",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Box.js~Box#draw",
    "access": "private",
    "description": "Main draw function for the Box called by the World automatically.",
    "lineNumber": 213,
    "params": [],
    "return": null
  },
  {
    "__docId__": 355,
    "kind": "file",
    "name": "src/figures/Picture.js",
    "content": "import * as utils from \"../Utils\";\nimport WorldElement from \"../WorldElement\";\n\n/**\n * The Picture class is used to draw images on the screen. Extra attention must be made when waiting\n * for the image to load.\n * @public\n * @class Picture\n */\nexport default class Picture extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {string} path Path for the image.\n   * @param {object} [opts] Object that contains valid Picture properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(path, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Width of the scaled image in units.\n     * @type {number}\n     */\n    this.width = 0;\n\n    /**\n     * Height of the scaled image in units.\n     * @type {number}\n     */\n    this.height = 0;\n\n    /**\n     * Flag for allowing the picture to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */ \n    this.isDraggable = true;\n\n    /**\n     * Image object where picture will be loaded.\n     * @type {object}\n     */\n    this.img = new Image();\n    this.img.src = path;\n\n    /**\n     * Flag for when the image has fully loaded. It is set after the onload event fires.\n     * @type {boolean}\n     */\n    this.loaded = false;\n\n    /**\n     * Sets the pivot point around which the picture is drawn.\n     * Must be a number between 0 and 1.\n     * @type {object}\n     * @property {number} x X pivot point for the image.\n     * @property {number} y Y pivot point for the image.\n     */\n    this.pivot = { x: 0.5, y: 0.5 };\n\n    // Callback function for when the image gets loaded.\n    const self = this;\n    this.img.onload = () => {\n      self.loaded = true;\n    };\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Tests if the mouse is over the picture.\n   * @private\n   * @returns {boolean} True if the mouse is over the picture, false otherwise.\n   */\n  isMouseOver() {\n    return utils.isCoordInside(\n      this.world.mouse.rx,\n      this.world.mouse.ry,\n      this.position.x,\n      this.position.y,\n      this.width / 2,\n      this.height / 2\n    );\n  }\n\n  /**\n   * Tests if the image is fully loaded. This means that its properties such as the width are available.\n   * @public\n   * @returns {boolean} True if the image is fully loaded, false otherwise.\n   */\n  isLoaded() {\n    return this.loaded && isFinite(this.img.width) && this.img.width != 0;\n  }\n\n  /**\n   * Main draw function for the picture called by the World automatically.\n   * @private\n   */\n  draw() {\n\n    const { scaleX, scaleY, ctx } = this.world;\n    const w = Math.floor(this.img.width * this.scale);\n    const h = Math.floor(this.img.height * this.scale);\n    const px = this.position.x * scaleX.toPx;\n    const py = this.position.y * scaleY.toPx;\n    this.width = w * scaleX.toUnits;\n    this.height = h * scaleY.toUnits;\n\n    if (!this.loaded || !this.display) return;\n\n    // Draw image.\n    if (this.rotation !== 0) {\n      ctx.save();\n      ctx.translate(px, py);\n      ctx.rotate(this.rotation);\n      ctx.drawImage(this.img, -w * this.pivot.x, -h * this.pivot.y, w, h);\n      ctx.restore();\n    } else {\n      ctx.drawImage(\n        this.img,\n        px - w * this.pivot.x,\n        py - h * this.pivot.y,\n        w,\n        h\n      );\n    }\n    \n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Picture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 356,
    "kind": "class",
    "name": "Picture",
    "memberof": "src/figures/Picture.js",
    "static": true,
    "longname": "src/figures/Picture.js~Picture",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Picture.js",
    "importStyle": "Picture",
    "description": "The Picture class is used to draw images on the screen. Extra attention must be made when waiting\nfor the image to load.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Picture"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 357,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Picture.js~Picture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Picture.js~Picture#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "Path for the image."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Picture properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 358,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#width",
    "access": "public",
    "description": "Width of the scaled image in units.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 359,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#height",
    "access": "public",
    "description": "Height of the scaled image in units.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 360,
    "kind": "member",
    "name": "isDraggable",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#isDraggable",
    "access": "public",
    "description": "Flag for allowing the picture to be dragged around.\nDefault value is true.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "img",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#img",
    "access": "public",
    "description": "Image object where picture will be loaded.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "loaded",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#loaded",
    "access": "public",
    "description": "Flag for when the image has fully loaded. It is set after the onload event fires.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "pivot",
    "memberof": "src/figures/Picture.js~Picture",
    "static": false,
    "longname": "src/figures/Picture.js~Picture#pivot",
    "access": "public",
    "description": "Sets the pivot point around which the picture is drawn.\nMust be a number between 0 and 1.",
    "lineNumber": 61,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "X pivot point for the image."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Y pivot point for the image."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 364,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/figures/Picture.js~Picture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Picture.js~Picture#isMouseOver",
    "access": "private",
    "description": "Tests if the mouse is over the picture.",
    "lineNumber": 79,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the mouse is over the picture, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the mouse is over the picture, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 365,
    "kind": "method",
    "name": "isLoaded",
    "memberof": "src/figures/Picture.js~Picture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Picture.js~Picture#isLoaded",
    "access": "public",
    "description": "Tests if the image is fully loaded. This means that its properties such as the width are available.",
    "lineNumber": 95,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the image is fully loaded, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the image is fully loaded, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Picture.js~Picture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Picture.js~Picture#draw",
    "access": "private",
    "description": "Main draw function for the picture called by the World automatically.",
    "lineNumber": 103,
    "params": [],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/figures/Plot.js",
    "content": "import * as constants from \"../Constants\";\nimport * as utils from \"../Utils\";\nimport WorldElement from \"../WorldElement\";\n\n/**\n * The Plot class can be used to draw a line plot or a histogram on an axis. It\n * is also possible to add markers on top of a line plot with information\n * about the -x and -y values.\n * @public\n * @class Plot\n */\nexport default class Plot extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Array for storing the points.\n     * @type {object[]}\n     */\n    this.points = [];\n\n    /**\n     * Array for storing the markers.\n     * @type {object[]}\n     */\n    this.markers = [];\n\n    /**\n     * Sets the maximum amount of points the plot can have at a single time. Once \n     * the array of points fills up, the earliest points will be removed. \n     * This is done for memory purposes.\n     * Default value is 300.\n     * @type {number}\n     */\n    this.limit = 300;\n\n    /**\n     * Sets the radius of the markers.\n     * Default value is 4.\n     * @type {number}\n     */\n    this.markerRadius = 4;\n\n    /**\n     * Sets the linewidth of the plot in pixels.\n     * Default value is 2.\n     * @type {number}\n     */\n    this.lineWidth = 2;\n\n    /**\n     * Sets the label for the plot. Only used when the plot is added to a {@link Graph} object.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.label = \"\";\n\n    /**\n     * Flag for drawing all points in the plot regardless if the point is outside the\n     * visible range of the plot.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.drawInvisiblePoints = false;\n\n    /**\n     * Sets the type of plot. Any other value than \"line\" will result in a histogram plot.\n     * Default value is \"line\".\n     * @type {string}\n     */\n    this.style = \"line\";\n\n    /**\n     * When the plot is configured in histogram mode, the binWidth is the width of the\n     * bars in pixels.\n     * Default value is 3.\n     * @type {number}\n     */\n    this.binWidth = 3;\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Sets a label for the plot. Only used when the plot is added to a {@link Graph} object.\n   * @public\n   * @param {string} label Label for the plot.\n   */\n  setLabel(label) {\n    this.label = label;\n  }\n\n  /**\n   * Adds a point to the plot.\n   * @public\n   * @param {number} x -x coordinate of the point to add.\n   * @param {number} y -y coordinate of the point to add.\n   */\n  addPoint(x, y) {\n    this.points.push([x, y]);\n    if (this.points.length > this.limit && this.limit > 0) {\n      this.points.shift();\n    }\n  }\n\n  /**\n   * Adds a marker to the plot.\n   * @public\n   * @param {number} x -x coordinate of the marker to add.\n   * @param {number} y -y coordinate of the marker to add.\n   * @param {object} args Object with other properties that a marker can have.\n   * @param {string} args.label Top label of the marker.\n   * @param {string} args.lower_label Bottom label of the marker.\n   * @param {string} args.color HEX color of the marker. Default value is the color of the plot.\n   * @param {boolean} args.top Flag for choosing if the labels will be drawn over the marker or below the marker. Default value is true.\n   */\n  addMarker(x, y, args) {\n    // eslint-disable-next-line prefer-const\n    let input = {\n      x,\n      y,\n      label: \"\",\n      lower_label: \"\",\n      color: this.color,\n      top: true\n    };\n    utils.loadOptions(input, args);\n    this.markers.push(input);\n  }\n\n  /**\n   * Deletes all points and markers.\n   * @public\n   */\n  clear() {\n    this.points = [];\n    this.markers = [];\n  }\n\n  /**\n   * Main draw function for the Plot called by the World automatically.\n   * @private\n   */\n  draw() {\n    const { scaleX, scaleY, ctx } = this.world;\n    const prevLineWidth = ctx.lineWidth;\n\n    // Draw path.\n    if (this.style === \"line\") {}\n    ctx.beginPath();\n    ctx.lineWidth = this.lineWidth;\n    ctx.strokeStyle = this.color;\n    let disconnected = false;\n    for (let i = 0; i < this.points.length; i++) {\n\n      // Draw line plot.\n      const x = this.points[i][0] * scaleX.toPx;\n      const y = this.points[i][1] * scaleY.toPx;\n\n      if (this.style === \"line\") {\n        if (this.drawInvisiblePoints || this.world.axis.isPointVisible(x, y)) {\n          if (i === 0 || disconnected) {\n            ctx.moveTo(x, y);\n            disconnected = false;\n          } else {\n            ctx.lineTo(x, y);\n          }\n        } else {\n          disconnected = true;\n        }\n      } else {\n\n        // Draw histogram.\n        ctx.fillStyle = this.color;\n        ctx.rect(x - this.binWidth / 2, 0, this.binWidth, y);\n        ctx.fill();\n\n      }\n\n    }\n    ctx.stroke();\n    ctx.closePath();\n\n    // Draw markers.\n    this.font.set({ baseline: \"middle\" });\n    for (let i = 0; i < this.markers.length; i++) {\n      // Draw marker circles.\n      const x = this.markers[i].x * scaleX.toPx;\n      const y = this.markers[i].y * scaleY.toPx;\n      ctx.beginPath();\n      ctx.fillStyle = this.markers[i].color;\n      ctx.arc(x, y, this.markerRadius, 0, constants.TWO_PI);\n      ctx.fill();\n      // ctx.closePath();\n\n      // Draw marker label box.\n\n      // Draw marker labels.\n      if (this.markers[i].label !== \"\") {\n        const direction = this.markers[i].top ? -1 : 1;\n        this.font.toCtx(ctx);\n        if (this.markers[i].lower_label !== \"\") {\n          ctx.fillText(\n            this.markers[i].label,\n            x,\n            y + (this.markerRadius + 25) * direction\n          );\n          ctx.fillText(\n            this.markers[i].lower_label,\n            x,\n            y + (this.markerRadius + 10) * direction\n          );\n        } else {\n          ctx.fillText(\n            this.markers[i].label,\n            x,\n            y + (this.markerRadius + 10) * direction\n          );\n        }\n      }\n    }\n    ctx.lineWidth = prevLineWidth;\n  }\n\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Plot.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "class",
    "name": "Plot",
    "memberof": "src/figures/Plot.js",
    "static": true,
    "longname": "src/figures/Plot.js~Plot",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Plot.js",
    "importStyle": "Plot",
    "description": "The Plot class can be used to draw a line plot or a histogram on an axis. It\nis also possible to add markers on top of a line plot with information\nabout the -x and -y values.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Plot"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 371,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "points",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#points",
    "access": "public",
    "description": "Array for storing the points.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "markers",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#markers",
    "access": "public",
    "description": "Array for storing the markers.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "object[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "limit",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#limit",
    "access": "public",
    "description": "Sets the maximum amount of points the plot can have at a single time. Once \nthe array of points fills up, the earliest points will be removed. \nThis is done for memory purposes.\nDefault value is 300.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "markerRadius",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#markerRadius",
    "access": "public",
    "description": "Sets the radius of the markers.\nDefault value is 4.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "lineWidth",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#lineWidth",
    "access": "public",
    "description": "Sets the linewidth of the plot in pixels.\nDefault value is 2.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "member",
    "name": "label",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#label",
    "access": "public",
    "description": "Sets the label for the plot. Only used when the plot is added to a {@link Graph} object.\nDefault value is \"\".",
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 378,
    "kind": "member",
    "name": "drawInvisiblePoints",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#drawInvisiblePoints",
    "access": "public",
    "description": "Flag for drawing all points in the plot regardless if the point is outside the\nvisible range of the plot.\nDefault value is false.",
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 379,
    "kind": "member",
    "name": "style",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#style",
    "access": "public",
    "description": "Sets the type of plot. Any other value than \"line\" will result in a histogram plot.\nDefault value is \"line\".",
    "lineNumber": 78,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 380,
    "kind": "member",
    "name": "binWidth",
    "memberof": "src/figures/Plot.js~Plot",
    "static": false,
    "longname": "src/figures/Plot.js~Plot#binWidth",
    "access": "public",
    "description": "When the plot is configured in histogram mode, the binWidth is the width of the\nbars in pixels.\nDefault value is 3.",
    "lineNumber": 86,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "setLabel",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#setLabel",
    "access": "public",
    "description": "Sets a label for the plot. Only used when the plot is added to a {@link Graph} object.",
    "lineNumber": 98,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "label",
        "description": "Label for the plot."
      }
    ],
    "return": null
  },
  {
    "__docId__": 383,
    "kind": "method",
    "name": "addPoint",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#addPoint",
    "access": "public",
    "description": "Adds a point to the plot.",
    "lineNumber": 108,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate of the point to add."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate of the point to add."
      }
    ],
    "return": null
  },
  {
    "__docId__": 384,
    "kind": "method",
    "name": "addMarker",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#addMarker",
    "access": "public",
    "description": "Adds a marker to the plot.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate of the marker to add."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate of the marker to add."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "Object with other properties that a marker can have."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.label",
        "description": "Top label of the marker."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.lower_label",
        "description": "Bottom label of the marker."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.color",
        "description": "HEX color of the marker. Default value is the color of the plot."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.top",
        "description": "Flag for choosing if the labels will be drawn over the marker or below the marker. Default value is true."
      }
    ],
    "return": null
  },
  {
    "__docId__": 385,
    "kind": "method",
    "name": "clear",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#clear",
    "access": "public",
    "description": "Deletes all points and markers.",
    "lineNumber": 144,
    "params": [],
    "return": null
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Plot.js~Plot",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Plot.js~Plot#draw",
    "access": "private",
    "description": "Main draw function for the Plot called by the World automatically.",
    "lineNumber": 153,
    "params": [],
    "return": null
  },
  {
    "__docId__": 389,
    "kind": "file",
    "name": "src/figures/Shape.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\nimport Renderer from \"../Renderer\";\nimport WorldElement from \"../WorldElement\";\n\n/**\n * The Shape class is used to draw shapes manually onto the world. The class provides similar\n * functionality to the methods found in the context on a canvas with key difference\n * that all coordinates passed to the methods in the Shape class take as parameters real\n * units. This makes it possible to draw shapes in the world with ease.\n * @public\n */\nexport default class Shape extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {function} onDraw Function where the drawing process occurs.\n   * @param {object} [opts] Object that contains valid Shape properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(onDraw, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the currently active shape style.\n     * Default value is {@link SHAPE_STYLE}.NONE.\n     * @type {number}\n     */\n    this.shapeStyle = constants.SHAPE_STYLE.NONE;\n\n    /**\n     * Sets the fill color for shapes.\n     * Default value is {@link BOX_COLORS}.GREEN.BACKGROUND.\n     * @type {string}\n     */\n    this.fillColor = constants.BOX_COLORS.GREEN.BACKGROUND;\n\n    /**\n     * Sets the stroke color for shapes.\n     * Default value is {@link BOX_COLORS}.GREEN.BORDER.\n     * @type {string}\n     */\n    this.strokeColor = constants.BOX_COLORS.GREEN.BORDER;\n\n    /**\n     * Sets the default angle style. This means all angles used as parameters are provided and\n     * set with this style.\n     * Default value is {@link ANGLE_STYLE}.DEG.\n     * @type {number}\n     */\n    this.angleStyle = constants.ANGLE_STYLE.DEG;\n\n    /**\n     * Sets if the coordinates are referenced to the previous coordinates given or are \n     * allways absolute.\n     * Default value is {@link SHAPE_STYLE}.NONE.\n     * @type {number}\n     */\n    this.shapeMode = constants.SHAPE_STYLE.NONE;\n\n    /**\n     * Sets the previous position used by {@link Shape.lineTo} or {@link Shape.moveTo}.\n     * This is used if the {@link Shape.shapeMode} is set to {@link SHAPE_STYLE}.ACCOMULATIVE.\n     * @type {object}\n     * @property {number} x -x coordinate.\n     * @property {number} y -y coordinate.\n     */\n    this.prevPosition = { x: 0, y: 0 };\n\n    /**\n     * Callback function where the shape will be drawn.\n     * @type {function}\n     */\n    this.onDraw = utils.isFunction(onDraw) ? onDraw : undefined;\n\n    /**\n     * Sets the prerenderer for the Shape. It is disabled by default.\n     * @type {Renderer}\n     */\n    this.renderer = new Renderer({ enabled: false });\n    \n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Selects the currently active context for drawing the shape.\n   * @private\n   * @returns {object} The context where shape will be drawn.\n   */\n  selectCtx() {\n    return this.renderer.enabled ? this.renderer.ctx : this.world.ctx;\n  }\n\n  /**\n   * Starts a drawing path.\n   * @private\n   * @param {number} [s] Desired shape style. See {@link SHAPE_STYLE}.\n   */\n  begin(s) {\n    const ctx = this.selectCtx();\n    this.shapeStyle = s !== undefined ? s : constants.SHAPE_STYLE.NONE;\n    ctx.beginPath();\n  }\n\n  /**\n   * Closes a drawing path and fills and/or strokes it depending on the settings of\n   * {@link Shape.fillColor} and {@link Shape.strokeColor}.\n   * @public\n   */\n  end() {\n    const ctx = this.selectCtx();\n    if (this.fillColor !== undefined) {\n      ctx.fillStyle = this.fillColor;\n      ctx.fill();\n    }\n    if (this.strokeColor !== undefined) {\n      ctx.strokeStyle = this.strokeColor;\n      ctx.stroke();\n    }\n    ctx.closePath();\n  }\n\n  /**\n   * Main draw function for the shape called by the World automatically.\n   * @private\n   */\n  draw() {\n    if (utils.isFunction(this.onDraw)) {\n      if (this.renderer.enabled) {\n        if (this.renderer.rendered) {\n          this.renderer.draw();\n        } else {\n          this.renderer.begin();\n          this.onDraw();\n          this.renderer.end();\n          this.renderer.draw();\n        }\n      } else {\n        this.save();\n        this.onDraw();\n        this.restore();\n      }\n    }\n  }\n\n  /**\n   * Sets the starting position of drawing path. The path must be then continued by \n   * calling {@link Shape.lineTo}.\n   * @public\n   * @param {number} x0 Starting -x coordinate for the current drawing path.\n   * @param {number} y0 Starting -y coodinate for the current drawing path.\n   */\n  moveTo(x0, y0) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.prevPosition.x = x0 * scaleX.toPx;\n    this.prevPosition.y = y0 * scaleY.toPx;\n    ctx.moveTo(this.prevPosition.x, this.prevPosition.y);\n  }\n\n  /**\n   * Draws a line to coordinates (x0, y0). Before using this function, the function\n   * {@link Shape.moveTo} must be used to set the starting point of the line. Multiple calls\n   * to this function can be used to create a shape.\n   * @public\n   * @param {number} x0 Next -x coordinate for the line.\n   * @param {number} y0 Next -y coordinate for the line.\n   */\n  lineTo(x0, y0) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    if (this.shapeStyle === constants.SHAPE_STYLE.ACCOMULATIVE) {\n      this.prevPosition.x += x0 * scaleX.toPx;\n      this.prevPosition.y += y0 * scaleY.toPx;\n      ctx.lineTo(this.prevPosition.x, this.prevPosition.y);\n    } else {\n      ctx.lineTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n    }\n  }\n\n  /**\n   * Sets a fill color.\n   * @public\n   * @param {string} fillColor Fill color in HEX format.\n   */\n  fill(fillColor) {\n    this.fillColor = fillColor;\n  }\n\n  /** Disables filling the shapes drawn.\n   * @public\n   */\n  noFill() {\n    this.fillColor = undefined;\n  }\n\n  /**\n   * Sets a stroke color.\n   * @public\n   * @param {string} strokeColor Stroke color in HEX format.\n   */\n  stroke(strokeColor) {\n    this.strokeColor = strokeColor;\n  }\n\n  /**\n   * Disables stroking the shapes drawn.\n   * @public\n   */\n  noStroke() {\n    this.strokeColor = undefined;\n  }\n\n  /**\n   * Saves the current state of the shape.\n   * @public\n   */\n  save() {\n    const ctx = this.selectCtx();\n    ctx.save();\n  }\n\n  /**\n   * Restores the shape to the previously saved state.\n   * @public\n   */\n  restore() {\n    const ctx = this.selectCtx();\n    ctx.restore();\n  }\n\n  /**\n   * Sets the stroke weight of all lines.\n   * @public\n   * @param {number} weight Weight of the lines.\n   */\n  strokeWeight(weight) {\n    const ctx = this.selectCtx();\n    ctx.lineWidth = weight;\n  }\n\n  /**\n   * Sets the line dash of all lines.\n   * @public\n   * @param {number} i Length of the dash in pixels.\n   */\n  lineDash(i) {\n    const ctx = this.selectCtx();\n    ctx.setLineDash([i]);\n  }\n\n  /**\n   * Sets the rotation of the canvas. Before doing a rotation the shape must be saved and then\n   * restored. See {@link Shape.translate} for an example.\n   * @public\n   * @param {number} angle Desired rotation angle.\n   */\n  rotate(angle) {\n    const ctx = this.selectCtx();\n    ctx.rotate(-utils.rad(angle, this.angleStyle));\n  }\n\n  /**\n   * Sets the active angle style found in {@link ANGLE_STYLE}.\n   * @public\n   * @param {number} mode Desired angle style.\n   */\n  angleStyle(mode) {\n    this.angleStyle = mode;\n  }\n\n  /**\n   * Translates the origin to a new point (x, y). Doing a translation requires to first save\n   * the context by calling {@link Shape.save}, and when finalizing the drawing by calling\n   * {@link Shape.restore}. This ensures that the translation doesn't mess with the origin of\n   * the axis.\n   * Translation is also required when doing a rotation around a point.\n   * @example\n   * // The following example will draw a 5x5 box at coordinates (1, 1) with a rotation of 90°.\n   * var s = new Shape();\n   * s.save()\n   * s.translate(1, 1)\n   * s.rotate(90)\n   * s.rect(0, 0, 5, 5);\n   * s.restore();\n   * @public\n   * @param {number} x -x coordinate to translate.\n   * @param {number} y -y coordinate to translate.\n   */\n  translate(x, y) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    ctx.translate(x * scaleX.toPx, y * scaleY.toPx);\n  }\n\n  /**\n   * Draws a triangle given three sets of points.\n   * @public\n   * @param {number} x0 First -x coordinate of the triangle.\n   * @param {number} y0 First -y coordinate of the triangle.\n   * @param {number} x1 Second -x coordinate of the triangle.\n   * @param {number} y1 Second -y coordinate of the triangle.\n   * @param {number} x2 Third -x coordinate of the triangle.\n   * @param {number} y2 Third -y coordinate of the triangle.\n   */\n  triangle(x0, y0, x1, y1, x2, y2) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    ctx.moveTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n    ctx.lineTo(x1 * scaleX.toPx, y1 * scaleY.toPx);\n    ctx.lineTo(x2 * scaleX.toPx, y2 * scaleY.toPx);\n    ctx.lineTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n    this.end();\n  }\n\n  /**\n   * Draws a vector given a starting point and a magnitude and angle.\n   * @public\n   * @param {number} x0 Start -x coordinate of the vector.\n   * @param {number} y0 Start -y coordinate of the vector.\n   * @param {number} mag Magnitude of the vector.\n   * @param {number} angle Angle of the vector.\n   * @param {number} color Color of the vector in HEX format.\n   * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n   * @returns {number[]} Array with the -x and -y end coordinates of the vector.\n   */\n  vectorFromMag(x0, y0, mag, angle, color, dashed) {\n    this.fill(color);\n    this.stroke(color);\n    const x1 = x0 + mag * utils.cos(angle, this.angleStyle);\n    const y1 = y0 + mag * utils.sin(angle, this.angleStyle);\n    this.vector(x0, y0, x1, y1, dashed);\n    return [x1, y1];\n  }\n\n  /**\n   * Draws a vector between two points. The vector is a line with an equilateral triangle at\n   * the tip of the vector.\n   * @public\n   * @param {number} _x0 Start -x coordinate of the vector.\n   * @param {number} _y0 Start -y coordinate of the vector.\n   * @param {number} _x1 End -x coordinate of the vector.\n   * @param {number} _y1 End -y coordinate of the vector.\n   * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n   */\n  vector(_x0, _y0, _x1, _y1, dashed) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    const x0 = _x0 * scaleX.toPx;\n    let x1 = _x1 * scaleX.toPx;\n    const y0 = _y0 * scaleY.toPx;\n    let y1 = _y1 * scaleY.toPx;\n    const side = 0.2 * scaleX.toPx;\n    const height = side * constants.SIN60;\n    const angle = Math.atan2(y1 - y0, x1 - x0);\n    const prevStrokeWeight = ctx.lineWidth;\n    this.begin();\n    this.strokeWeight(2);\n    if (dashed) this.lineDash(5);\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    this.end();\n    if (dashed) this.lineDash(1);\n    this.begin();\n    if (angle !== 0) {\n      this.save();\n      ctx.translate(x1, y1);\n      ctx.rotate(angle);\n      x1 = 0;\n      y1 = 0;\n    }\n    ctx.moveTo(x1 - height / 2, y1 + side / 2);\n    ctx.lineTo(x1 - height / 2, y1 - side / 2);\n    ctx.lineTo(x1 + height / 2, y1);\n    ctx.lineTo(x1 - height / 2, y1 + side / 2);\n    this.end();\n    this.strokeWeight(prevStrokeWeight);\n    if (angle !== 0) {\n      this.restore();\n    }\n  }\n\n  /**\n   * Draws an equilateral triangle centered around the coordinates (x, y).\n   * @public\n   * @param {number} x Center -x coordinate of the triangle.\n   * @param {number} y Center -y coordinate of the triangle.\n   * @param {number} s Side length of the triangle.\n   * @param {number} r Rotation of the triangle.\n   */\n  equilateralTriangle(x, y, s, r) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    const side = s * scaleX.toPx;\n    const height = side * constants.SIN60;\n    let x0 = x * scaleX.toPx;\n    let y0 = y * scaleY.toPx;\n    this.begin();\n    if (r !== undefined && r !== 0) {\n      this.save();\n      ctx.translate(x0, y0);\n      this.rotate(r);\n      x0 = 0;\n      y0 = 0;\n    }\n    ctx.moveTo(x0 - height / 2, y0 + side / 2);\n    ctx.lineTo(x0 - height / 2, y0 - side / 2);\n    ctx.lineTo(x0 + height / 2, y0);\n    ctx.lineTo(x0 - height / 2, y0 + side / 2);\n    this.end();\n    if (r !== undefined && r !== 0) {\n      this.restore();\n    }\n  }\n\n  /**\n   * Draws a rectangle on the world.\n   * @public\n   * @param {number} x0 Bottom left -x coordinate of the rectangle.\n   * @param {number} y0 Bottom left -y coordinate of the rectangle.\n   * @param {number} w Width of the rectangle.\n   * @param {number} h Height of the rectangle.\n   */\n  rect(x0, y0, w, h) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    ctx.rect(\n      x0 * scaleX.toPx,\n      y0 * scaleY.toPx,\n      w * scaleX.toPx,\n      h * scaleY.toPx\n    );\n    this.end();\n  }\n\n  /**\n   * Draws a line on the world.\n   * @public\n   * @param {number} x0 Start -x coordinate of the line. \n   * @param {number} y0 Start -y coordinate of the line.\n   * @param {number} x1 End -x coordinate of the line.\n   * @param {number} y1 End -y coordinate of the line.\n   */\n  line(x0, y0, x1, y1) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    ctx.moveTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n    ctx.lineTo(x1 * scaleX.toPx, y1 * scaleY.toPx);\n    this.end();\n  }\n\n  /**\n   * Draws an arc or a circle on the world.\n   * @public\n   * @param {number} x0 Center -x coordinate of the ellipse.\n   * @param {number} y0 Center -y coordinate of the ellipse.\n   * @param {number} r Radius of the ellipse.\n   * @param {number} start Start angle of the ellipse.\n   * @param {number} end End angle of the ellipse.\n   */\n  arc(x0, y0, r, start, end) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    ctx.arc(\n      x0 * scaleX.toPx,\n      y0 * scaleY.toPx,\n      r * scaleX.toPx,\n      utils.rad(start, this.angleStyle),\n      utils.rad(end, this.angleStyle)\n    );\n    this.end();\n  }\n\n  /**\n   * Draws an ellipse on the world.\n   * @public  \n   * @param {number} x0 Center -x coordinate of the ellipse.\n   * @param {number} y0 Center -y coordinate of the ellipse.\n   * @param {number} w Width of the ellipse.\n   * @param {number} h Height of the ellipse.\n   * @param {number} start Start angle of the ellipse.\n   * @param {number} end End angle of the ellipse.\n   */\n  ellipse(x0, y0, w, h, start, end) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    ctx.ellipse(\n      x0 * scaleX.toPx,\n      y0 * scaleY.toPx,\n      Math.abs(w * scaleX.toPx),\n      Math.abs(h * scaleY.toPx),\n      0,\n      utils.rad(start, this.angleStyle),\n      utils.rad(end, this.angleStyle)\n    );\n    this.end();\n  }\n\n  /**\n   * Writes text on the world. The style of the text is set by {@link Shape.font}.\n   * @public\n   * @param {string} text Text to write.\n   * @param {number} x0 -x coordinate of the text.\n   * @param {number} y0 -y coordinate of the text.\n   */\n  text(text, x0, y0) {\n    const ctx = this.selectCtx();\n    const { scaleX, scaleY } = this.world;\n    this.begin();\n    this.font.toCtx(ctx);\n    ctx.fillText(text, x0 * scaleX.toPx, y0 * scaleY.toPx);\n    this.end();\n  }\n\n  /**\n   * Get the width of a text in units.\n   * @public\n   * @param {string} text Text to measure.\n   * @returns {number} Width of the text-\n   */\n  textWidth(text) {\n    const ctx = this.selectCtx();\n    const { scaleX } = this.world;\n    return ctx.measureText(text).width * scaleX.toUnits;\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Shape.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 390,
    "kind": "class",
    "name": "Shape",
    "memberof": "src/figures/Shape.js",
    "static": true,
    "longname": "src/figures/Shape.js~Shape",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Shape.js",
    "importStyle": "Shape",
    "description": "The Shape class is used to draw shapes manually onto the world. The class provides similar\nfunctionality to the methods found in the context on a canvas with key difference\nthat all coordinates passed to the methods in the Shape class take as parameters real\nunits. This makes it possible to draw shapes in the world with ease.",
    "lineNumber": 13,
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 391,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "onDraw",
        "description": "Function where the drawing process occurs."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Shape properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 392,
    "kind": "member",
    "name": "shapeStyle",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#shapeStyle",
    "access": "public",
    "description": "Sets the currently active shape style.\nDefault value is {@link SHAPE_STYLE}.NONE.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 393,
    "kind": "member",
    "name": "fillColor",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#fillColor",
    "access": "public",
    "description": "Sets the fill color for shapes.\nDefault value is {@link BOX_COLORS}.GREEN.BACKGROUND.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 394,
    "kind": "member",
    "name": "strokeColor",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#strokeColor",
    "access": "public",
    "description": "Sets the stroke color for shapes.\nDefault value is {@link BOX_COLORS}.GREEN.BORDER.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 396,
    "kind": "member",
    "name": "shapeMode",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#shapeMode",
    "access": "public",
    "description": "Sets if the coordinates are referenced to the previous coordinates given or are \nallways absolute.\nDefault value is {@link SHAPE_STYLE}.NONE.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 397,
    "kind": "member",
    "name": "prevPosition",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#prevPosition",
    "access": "public",
    "description": "Sets the previous position used by {@link Shape.lineTo} or {@link Shape.moveTo}.\nThis is used if the {@link Shape.shapeMode} is set to {@link SHAPE_STYLE}.ACCOMULATIVE.",
    "lineNumber": 69,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 398,
    "kind": "member",
    "name": "onDraw",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#onDraw",
    "access": "public",
    "description": "Callback function where the shape will be drawn.",
    "lineNumber": 75,
    "type": {
      "nullable": null,
      "types": [
        "function"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 399,
    "kind": "member",
    "name": "renderer",
    "memberof": "src/figures/Shape.js~Shape",
    "static": false,
    "longname": "src/figures/Shape.js~Shape#renderer",
    "access": "public",
    "description": "Sets the prerenderer for the Shape. It is disabled by default.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "Renderer"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 400,
    "kind": "method",
    "name": "selectCtx",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#selectCtx",
    "access": "private",
    "description": "Selects the currently active context for drawing the shape.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{object} The context where shape will be drawn."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": "The context where shape will be drawn."
    },
    "params": []
  },
  {
    "__docId__": 401,
    "kind": "method",
    "name": "begin",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#begin",
    "access": "private",
    "description": "Starts a drawing path.",
    "lineNumber": 102,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "s",
        "description": "Desired shape style. See {@link SHAPE_STYLE}."
      }
    ],
    "return": null
  },
  {
    "__docId__": 403,
    "kind": "method",
    "name": "end",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#end",
    "access": "public",
    "description": "Closes a drawing path and fills and/or strokes it depending on the settings of\n{@link Shape.fillColor} and {@link Shape.strokeColor}.",
    "lineNumber": 113,
    "params": [],
    "return": null
  },
  {
    "__docId__": 404,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#draw",
    "access": "private",
    "description": "Main draw function for the shape called by the World automatically.",
    "lineNumber": 130,
    "params": [],
    "return": null
  },
  {
    "__docId__": 405,
    "kind": "method",
    "name": "moveTo",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#moveTo",
    "access": "public",
    "description": "Sets the starting position of drawing path. The path must be then continued by \ncalling {@link Shape.lineTo}.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Starting -x coordinate for the current drawing path."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Starting -y coodinate for the current drawing path."
      }
    ],
    "return": null
  },
  {
    "__docId__": 406,
    "kind": "method",
    "name": "lineTo",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#lineTo",
    "access": "public",
    "description": "Draws a line to coordinates (x0, y0). Before using this function, the function\n{@link Shape.moveTo} must be used to set the starting point of the line. Multiple calls\nto this function can be used to create a shape.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Next -x coordinate for the line."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Next -y coordinate for the line."
      }
    ],
    "return": null
  },
  {
    "__docId__": 407,
    "kind": "method",
    "name": "fill",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#fill",
    "access": "public",
    "description": "Sets a fill color.",
    "lineNumber": 189,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fillColor",
        "description": "Fill color in HEX format."
      }
    ],
    "return": null
  },
  {
    "__docId__": 409,
    "kind": "method",
    "name": "noFill",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#noFill",
    "access": "public",
    "description": "Disables filling the shapes drawn.",
    "lineNumber": 196,
    "params": [],
    "return": null
  },
  {
    "__docId__": 411,
    "kind": "method",
    "name": "stroke",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#stroke",
    "access": "public",
    "description": "Sets a stroke color.",
    "lineNumber": 205,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "strokeColor",
        "description": "Stroke color in HEX format."
      }
    ],
    "return": null
  },
  {
    "__docId__": 413,
    "kind": "method",
    "name": "noStroke",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#noStroke",
    "access": "public",
    "description": "Disables stroking the shapes drawn.",
    "lineNumber": 213,
    "params": [],
    "return": null
  },
  {
    "__docId__": 415,
    "kind": "method",
    "name": "save",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#save",
    "access": "public",
    "description": "Saves the current state of the shape.",
    "lineNumber": 221,
    "params": [],
    "return": null
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "restore",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#restore",
    "access": "public",
    "description": "Restores the shape to the previously saved state.",
    "lineNumber": 230,
    "params": [],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "strokeWeight",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#strokeWeight",
    "access": "public",
    "description": "Sets the stroke weight of all lines.",
    "lineNumber": 240,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "weight",
        "description": "Weight of the lines."
      }
    ],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "lineDash",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#lineDash",
    "access": "public",
    "description": "Sets the line dash of all lines.",
    "lineNumber": 250,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "i",
        "description": "Length of the dash in pixels."
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "rotate",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#rotate",
    "access": "public",
    "description": "Sets the rotation of the canvas. Before doing a rotation the shape must be saved and then\nrestored. See {@link Shape.translate} for an example.",
    "lineNumber": 261,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Desired rotation angle."
      }
    ],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "angleStyle",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#angleStyle",
    "access": "public",
    "description": "Sets the active angle style found in {@link ANGLE_STYLE}.",
    "lineNumber": 271,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mode",
        "description": "Desired angle style."
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "translate",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#translate",
    "access": "public",
    "description": "Translates the origin to a new point (x, y). Doing a translation requires to first save\nthe context by calling {@link Shape.save}, and when finalizing the drawing by calling\n{@link Shape.restore}. This ensures that the translation doesn't mess with the origin of\nthe axis.\nTranslation is also required when doing a rotation around a point.",
    "examples": [
      "// The following example will draw a 5x5 box at coordinates (1, 1) with a rotation of 90°.\nvar s = new Shape();\ns.save()\ns.translate(1, 1)\ns.rotate(90)\ns.rect(0, 0, 5, 5);\ns.restore();"
    ],
    "lineNumber": 293,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x coordinate to translate."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "y coordinate to translate."
      }
    ],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "triangle",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#triangle",
    "access": "public",
    "description": "Draws a triangle given three sets of points.",
    "lineNumber": 309,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "First -x coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "First -y coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "Second -x coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "Second -y coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x2",
        "description": "Third -x coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y2",
        "description": "Third -y coordinate of the triangle."
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "vectorFromMag",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#vectorFromMag",
    "access": "public",
    "description": "Draws a vector given a starting point and a magnitude and angle.",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number[]} Array with the -x and -y end coordinates of the vector."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Start -x coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Start -y coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mag",
        "description": "Magnitude of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color of the vector in HEX format."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dashed",
        "description": "Flag for drawing the vector with a dashed line."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number[]"
      ],
      "spread": false,
      "description": "Array with the -x and -y end coordinates of the vector."
    }
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "vector",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#vector",
    "access": "public",
    "description": "Draws a vector between two points. The vector is a line with an equilateral triangle at\nthe tip of the vector.",
    "lineNumber": 350,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "_x0",
        "description": "Start -x coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "_y0",
        "description": "Start -y coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "_x1",
        "description": "End -x coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "_y1",
        "description": "End -y coordinate of the vector."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dashed",
        "description": "Flag for drawing the vector with a dashed line."
      }
    ],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "equilateralTriangle",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#equilateralTriangle",
    "access": "public",
    "description": "Draws an equilateral triangle centered around the coordinates (x, y).",
    "lineNumber": 395,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Center -x coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y",
        "description": "Center -y coordinate of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "s",
        "description": "Side length of the triangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Rotation of the triangle."
      }
    ],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "rect",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#rect",
    "access": "public",
    "description": "Draws a rectangle on the world.",
    "lineNumber": 428,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Bottom left -x coordinate of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Bottom left -y coordinate of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width of the rectangle."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height of the rectangle."
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "line",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#line",
    "access": "public",
    "description": "Draws a line on the world.",
    "lineNumber": 449,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Start -x coordinate of the line."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Start -y coordinate of the line."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "End -x coordinate of the line."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "End -y coordinate of the line."
      }
    ],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "arc",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#arc",
    "access": "public",
    "description": "Draws an arc or a circle on the world.",
    "lineNumber": 467,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Center -x coordinate of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Center -y coordinate of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "r",
        "description": "Radius of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start angle of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "End angle of the ellipse."
      }
    ],
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "ellipse",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#ellipse",
    "access": "public",
    "description": "Draws an ellipse on the world.",
    "lineNumber": 491,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Center -x coordinate of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Center -y coordinate of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "w",
        "description": "Width of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "h",
        "description": "Height of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "start",
        "description": "Start angle of the ellipse."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "end",
        "description": "End angle of the ellipse."
      }
    ],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "method",
    "name": "text",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#text",
    "access": "public",
    "description": "Writes text on the world. The style of the text is set by {@link Shape.font}.",
    "lineNumber": 514,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text to write."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "x coordinate of the text."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "y coordinate of the text."
      }
    ],
    "return": null
  },
  {
    "__docId__": 432,
    "kind": "method",
    "name": "textWidth",
    "memberof": "src/figures/Shape.js~Shape",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Shape.js~Shape#textWidth",
    "access": "public",
    "description": "Get the width of a text in units.",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Width of the text-"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "Text to measure."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Width of the text-"
    }
  },
  {
    "__docId__": 433,
    "kind": "file",
    "name": "src/figures/Vector.js",
    "content": "import * as utils from \"../Utils\";\nimport * as constants from \"../Constants\";\nimport WorldElement from \"../WorldElement\";\n\n/**\n * The Vector class is used for handling vector quantities and for drawing them onto the world.\n * @public\n * @class Vector\n */\nexport default class Vector extends WorldElement {\n\n  /**\n   * \n   * @param {object} [opts] Object that contains valid Vector properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the -x magnitude of the vector.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.x = 0;\n\n    /**\n     * Sets the -y magnitude of the vector.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.y = 0;\n\n    /**\n     * Flag for enabling the drawing of the vector's components.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.components = false;\n\n    /**\n     * Color of the components.\n     * Default value is {@link COLORS}.COMPONENT.\n     * @type {string}\n     */\n    this.componentColor = constants.COLORS.COMPONENT;\n\n    /**\n     * Flag for drawing the components at the starting point of the vector.\n     * Default value is true.\n     * @type {boolean}\n     */\n    this.componentsAtOrigin = true;\n\n    /**\n     * Flag for setting the angle style of the vector.\n     * Default value is {@link ANGLE_STYLE}.DEG.\n     * @type {number}\n     */\n    this.angleStyle = constants.ANGLE_STYLE.DEG;\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Tests if the mouse is over the vector.\n   * @private\n   * @returns {boolean} True if the mouse is over the vector, false otherwise.\n   */\n  isMouseOver() {\n    return (\n      utils.distSquared(\n        this.world.mouse.rx,\n        this.world.mouse.ry,\n        this.position.x,\n        this.position.y\n      ) < 1\n    );\n  }\n\n  /**\n   * Draws a vector between two points. The vector is a line with an equilateral triangle at\n   * the tip of the vector.\n   * @private\n   * @param {number} x0 Start -x coordinate of the vector in pixels.\n   * @param {number} y0 Start -y coordinate of the vector in pixels.\n   * @param {number} x1 End -x coordinate of the vector in pixels.\n   * @param {number} y1 End -y coordinate of the vector in pixels.\n   * @param {string} color Color of the vector in HEX format.\n   * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n   */\n  drawLine(x0, y0, x1, y1, color, dashed) {\n    const { ctx } = this.world;\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n    const mag = Math.sqrt(dx ** 2 + dy ** 2);\n    const a1 = Math.atan2(dy, dx);\n    const a2 = constants.FIFTH_PI;\n    const headlen = mag > 10 ? 10 : mag;\n\n    ctx.strokeStyle = color;\n    ctx.fillStyle = color;\n\n    ctx.beginPath();\n    if (dashed) ctx.setLineDash([7, 7]);\n    ctx.moveTo(x0, y0);\n    ctx.lineTo(x1, y1);\n    ctx.stroke();\n    ctx.closePath();\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    if (dashed) ctx.setLineDash([]);\n    ctx.lineTo(\n      x1 - Math.floor(headlen * Math.cos(a1 - a2)),\n      y1 - Math.floor(headlen * Math.sin(a1 - a2))\n    );\n    ctx.lineTo(\n      x1 - Math.floor(headlen * Math.cos(a1 + a2)),\n      y1 - Math.floor(headlen * Math.sin(a1 + a2))\n    );\n    ctx.lineTo(x1, y1);\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n  }\n  \n  /**\n   * Main draw function for the vector called by the World automatically.\n   * @private\n   */\n  draw() {\n    if (this.x === 0 && this.y === 0) return;\n    const { scaleX, scaleY, ctx } = this.world;\n    const fromX = Math.floor(this.position.x * scaleX.toPx);\n    const toX = Math.floor(fromX + this.x * scaleX.toPx * this.scale);\n    const fromY = Math.floor(this.position.y * scaleY.toPx);\n    const toY = Math.floor(fromY + this.y * scaleY.toPx * this.scale);\n    const prevLineWidth = ctx.lineWidth;\n    ctx.lineWidth = 2;\n    if (this.components) {\n      this.drawLine(fromX, fromY, toX, fromY, this.componentColor, true);\n      this.drawLine(\n        this.componentsAtOrigin ? fromX : toX,\n        fromY,\n        this.componentsAtOrigin ? fromX : toX,\n        toY,\n        this.componentColor,\n        true\n      );\n    }\n    this.drawLine(fromX, fromY, toX, toY, this.color, false);\n    ctx.lineWidth = prevLineWidth;\n  }\n\n  /**\n   * Set the vector's magnitude and angle.\n   * @public\n   * @param {number} mag Magnitude of the vector.\n   * @param {number} angle Angle of the vector.\n   */\n  setMag(mag, angle) {\n    this.x = mag * utils.cos(angle, this.angleStyle);\n    this.y = mag * utils.sin(angle, this.angleStyle);\n  }\n\n  /**\n   * Set the -x and -y components of the vector.\n   * @public\n   * @param {number|object} x -x component of the vector. If x is another vector, the components of this vector are used to set the target vector.\n   * @param {number} [y] -y component of the vector.\n   */\n  set(x, y) {\n    if (utils.isObject(x)) {\n      this.x = x.x || 0;\n      this.y = x.y || 0;\n    } else {\n      this.x = x || 0;\n      this.y = y || 0;\n    }\n  }\n\n  /**\n   * Add a value to the -x and -y components of the vector.\n   * @public\n   * @param {number|object} x Value to add to the -x component of the vector. If x is another vector, the components of this vector are added to the target vector.\n   * @param {number} [y] Value to add to the -y component of the vector.\n   */\n  add(x, y) {\n    if (utils.isObject(x)) {\n      this.x += x.x || 0;\n      this.y += x.y || 0;\n    } else {\n      this.x += x || 0;\n      this.y += y || 0;\n    }\n  }\n\n  /**\n   * Subtract a value to the -x and -y components of the vector.\n   * @public\n   * @param {number|object} x Value to subtract to the -x component of the vector. If x is another vector, the components of this vector are subtracted to the target vector.\n   * @param {number} [y] Value to subtract to the -y component of the vector.\n   */\n  sub(x, y) {\n    if (utils.isObject(x)) {\n      this.x -= x.x || 0;\n      this.y -= x.y || 0;\n    } else {\n      this.x -= x || 0;\n      this.y -= y || 0;\n    }\n  }\n\n /**\n   * Multiply the -x and -y components of the vector by a constant value.\n   * @public\n   * @param {number|object} x Value that multiplies the -x component of the vector. If x is another vector, the components of this vector are multiplied with the target vector.\n   * @param {number} [y] Value that multiplies the -y component of the vector.\n   */\n  mult(x, y) {\n    if (utils.isObject(x)) {\n      this.x *= x.x || 0;\n      this.y += x.y || 0;\n    } else if (y === undefined) {\n      this.x *= x || 0;\n      this.y *= x || 0;\n    } else {\n      this.x *= x || 0;\n      this.y *= y || 0;\n    }\n  }\n\n  /**\n   * Get a readable format of the vector's components.\n   * @public\n   * @returns {string} Readable string with the vector's -x and -y components.\n   */\n  print() {\n    return `x: ${this.x} y: ${this.y}`;\n  }\n\n  /**\n   * Dot product between two vectors.\n   * @public\n   * @param {number|object} x -x component of the vector used for calculating the dot product. If x is another vector, the dot product is calculated between x and the target vector.\n   * @param {number} [y]  -y component of the vector used for calculating the dot product.\n   * @return {number} The dot product between the two vector.\n   */\n  dot(x, y) {\n    if (utils.isObject(x)) {\n      return this.dot(x.x, x.y);\n    }\n    return this.x * x + this.y * y;\n  }\n\n  /**\n   * Get the magnitude of the vector.\n   * @public\n   * @returns {number} The magnitude of the vector.\n   */\n  mag() {\n    return Math.sqrt(this.x ** 2 + this.y ** 2);\n  }\n\n  /**\n   * Get the angle of the vector. The type of angle depends on the value of\n   * {@link Vector.angleStyle}.\n   * @public\n   * @returns {number} The angle of the vector.\n   */\n  angle() {\n    if (this.angleStyle === constants.ANGLE_STYLE.DEG) {\n      return Math.atan2(this.y, this.x) * constants.RAD_TO_DEG;\n    }\n    return Math.atan2(this.y, this.x);\n  }\n\n  /**\n   * Gets the standard angle of the vector. This means that the angle\n   * ranges from 0 to 360°. Only works when the angleStyle is in degrees.\n   * @public\n   * @returns {number} The standard angle.\n   */\n  standardAngle() {\n    const a = this.angle();\n    if (a < 0) {\n      return a + 360;\n    }\n    return a;\n  }\n\n  /**\n   * Get the magnitude squared of the vector.\n   * @public\n   * @returns {number} The magnitude squared of the vector.\n   */\n  magSquared() {\n    return this.x ** 2 + this.y ** 2;\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/Vector.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 434,
    "kind": "class",
    "name": "Vector",
    "memberof": "src/figures/Vector.js",
    "static": true,
    "longname": "src/figures/Vector.js~Vector",
    "access": "public",
    "export": true,
    "importPath": "core/src/figures/Vector.js",
    "importStyle": "Vector",
    "description": "The Vector class is used for handling vector quantities and for drawing them onto the world.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Vector"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 435,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Vector properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "x",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#x",
    "access": "public",
    "description": "Sets the -x magnitude of the vector.\nDefault value is 0.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "y",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#y",
    "access": "public",
    "description": "Sets the -y magnitude of the vector.\nDefault value is 0.",
    "lineNumber": 33,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "components",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#components",
    "access": "public",
    "description": "Flag for enabling the drawing of the vector's components.\nDefault value is false.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "componentColor",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#componentColor",
    "access": "public",
    "description": "Color of the components.\nDefault value is {@link COLORS}.COMPONENT.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "componentsAtOrigin",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#componentsAtOrigin",
    "access": "public",
    "description": "Flag for drawing the components at the starting point of the vector.\nDefault value is true.",
    "lineNumber": 54,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 441,
    "kind": "member",
    "name": "angleStyle",
    "memberof": "src/figures/Vector.js~Vector",
    "static": false,
    "longname": "src/figures/Vector.js~Vector#angleStyle",
    "access": "public",
    "description": "Flag for setting the angle style of the vector.\nDefault value is {@link ANGLE_STYLE}.DEG.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 442,
    "kind": "method",
    "name": "isMouseOver",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#isMouseOver",
    "access": "private",
    "description": "Tests if the mouse is over the vector.",
    "lineNumber": 73,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if the mouse is over the vector, false otherwise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if the mouse is over the vector, false otherwise."
    },
    "params": []
  },
  {
    "__docId__": 443,
    "kind": "method",
    "name": "drawLine",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#drawLine",
    "access": "private",
    "description": "Draws a vector between two points. The vector is a line with an equilateral triangle at\nthe tip of the vector.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x0",
        "description": "Start -x coordinate of the vector in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y0",
        "description": "Start -y coordinate of the vector in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "x1",
        "description": "End -x coordinate of the vector in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "y1",
        "description": "End -y coordinate of the vector in pixels."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color of the vector in HEX format."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "dashed",
        "description": "Flag for drawing the vector with a dashed line."
      }
    ],
    "return": null
  },
  {
    "__docId__": 444,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#draw",
    "access": "private",
    "description": "Main draw function for the vector called by the World automatically.",
    "lineNumber": 135,
    "params": [],
    "return": null
  },
  {
    "__docId__": 445,
    "kind": "method",
    "name": "setMag",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#setMag",
    "access": "public",
    "description": "Set the vector's magnitude and angle.",
    "lineNumber": 165,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "mag",
        "description": "Magnitude of the vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of the vector."
      }
    ],
    "return": null
  },
  {
    "__docId__": 448,
    "kind": "method",
    "name": "set",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#set",
    "access": "public",
    "description": "Set the -x and -y components of the vector.",
    "lineNumber": 176,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x component of the vector. If x is another vector, the components of this vector are used to set the target vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "y component of the vector."
      }
    ],
    "return": null
  },
  {
    "__docId__": 453,
    "kind": "method",
    "name": "add",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#add",
    "access": "public",
    "description": "Add a value to the -x and -y components of the vector.",
    "lineNumber": 192,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Value to add to the -x component of the vector. If x is another vector, the components of this vector are added to the target vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "Value to add to the -y component of the vector."
      }
    ],
    "return": null
  },
  {
    "__docId__": 458,
    "kind": "method",
    "name": "sub",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#sub",
    "access": "public",
    "description": "Subtract a value to the -x and -y components of the vector.",
    "lineNumber": 208,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Value to subtract to the -x component of the vector. If x is another vector, the components of this vector are subtracted to the target vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "Value to subtract to the -y component of the vector."
      }
    ],
    "return": null
  },
  {
    "__docId__": 463,
    "kind": "method",
    "name": "mult",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#mult",
    "access": "public",
    "description": "Multiply the -x and -y components of the vector by a constant value.",
    "lineNumber": 224,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "Value that multiplies the -x component of the vector. If x is another vector, the components of this vector are multiplied with the target vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "Value that multiplies the -y component of the vector."
      }
    ],
    "return": null
  },
  {
    "__docId__": 470,
    "kind": "method",
    "name": "print",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#print",
    "access": "public",
    "description": "Get a readable format of the vector's components.",
    "lineNumber": 242,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{string} Readable string with the vector's -x and -y components."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "Readable string with the vector's -x and -y components."
    },
    "params": []
  },
  {
    "__docId__": 471,
    "kind": "method",
    "name": "dot",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#dot",
    "access": "public",
    "description": "Dot product between two vectors.",
    "lineNumber": 253,
    "params": [
      {
        "nullable": null,
        "types": [
          "number",
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "x",
        "description": "x component of the vector used for calculating the dot product. If x is another vector, the dot product is calculated between x and the target vector."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "y",
        "description": "y component of the vector used for calculating the dot product."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The dot product between the two vector."
    }
  },
  {
    "__docId__": 472,
    "kind": "method",
    "name": "mag",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#mag",
    "access": "public",
    "description": "Get the magnitude of the vector.",
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The magnitude of the vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The magnitude of the vector."
    },
    "params": []
  },
  {
    "__docId__": 473,
    "kind": "method",
    "name": "angle",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#angle",
    "access": "public",
    "description": "Get the angle of the vector. The type of angle depends on the value of\n{@link Vector.angleStyle}.",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The angle of the vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The angle of the vector."
    },
    "params": []
  },
  {
    "__docId__": 474,
    "kind": "method",
    "name": "standardAngle",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#standardAngle",
    "access": "public",
    "description": "Gets the standard angle of the vector. This means that the angle\nranges from 0 to 360°. Only works when the angleStyle is in degrees.",
    "lineNumber": 288,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The standard angle."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The standard angle."
    },
    "params": []
  },
  {
    "__docId__": 475,
    "kind": "method",
    "name": "magSquared",
    "memberof": "src/figures/Vector.js~Vector",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/Vector.js~Vector#magSquared",
    "access": "public",
    "description": "Get the magnitude squared of the vector.",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} The magnitude squared of the vector."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "The magnitude squared of the vector."
    },
    "params": []
  },
  {
    "__docId__": 476,
    "kind": "file",
    "name": "src/figures/box/Box.Graph.js",
    "content": "import * as utils from \"../../Utils\";\nimport * as constants from \"../../Constants\";\nimport WorldElement from \"../../WorldElement\";\nimport Scale from \"../../Scale\";\nimport Axis from \"../Axis\";\nimport Plot from \"../Plot\";\n\n/**\n * A Graph Box allow for {@link Plot} elements to be displayed in the box using a different scale to\n * the main axis in the world.\n * A Graph object is created by calling the method {@link Box.addGraph} on the parent Box.\n * @private\n */\nexport default class Graph extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the graph in pixels.\n   * @param {number} height Height of the graph in pixels.\n   * @param {object} [opts] Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(box, width, height, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the parent box where te Graph will be placed.\n     * @type {Box}\n     */\n    this.box = box;\n\n    /**\n     * Sets the width of the Graph in pixels.\n     * @type {number}\n     */\n    this.width = width;\n\n    /**\n     * Sets the height of the Graph in pixels.\n     * @type {number}\n     */\n    this.height = height;\n\n    /**\n     * Array containing the plots displayed on the graph.\n     * @type {Plot[]}\n     */\n    this.plots = [];\n\n    /**\n     * Flag for enabling the display of the plot's legend. Usually turned on when\n     * more than one plot is being displayed.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.legends_enabled = false;\n\n    /**\n     * Sets the padding in pixels that the graph has. The padding is used to display\n     * the title, x label, and y label. The padding is then adjusted depending on the\n     * value of {@link Graph.legends_enabled} to accomodate the display of the legends.\n     * @type {object}\n     * @property {number} left=25 Left padding in pixels.\n     * @property {number} bottom=25 Bottom padding in pixels.\n     * @property {number} right=10 Right padding in pixels.\n     * @property {number} top=10 Top padding.\n     */\n    this.padding = { left: 25, bottom: 25, right: 10, top: 10 };\n\n    /**\n     * Scale object for the -x axis.\n     * Default scale is 20px per 1 unit.\n     * @type {Scale}\n     */\n    this.scaleX = new Scale(20, 1, \"\");\n\n    /**\n     * Scale object for the -y axis.\n     * Default scale is 20px per 1 unit.\n     * @type {Scale}\n     */\n    this.scaleY = new Scale(20, -1, \"\");\n\n    /**\n     * Sets the title for the graph.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.title = \"\";\n\n    /**\n     * Sets the label for the -x axis.\n     * Default value is \"x\".\n     * @type {string}\n     */\n    this.xlabel = \"x\";\n\n    /**\n     * Sets the label for the -y axis.\n     * Default value is \"y\".\n     * @type {string}\n     */\n    this.ylabel = \"y\";\n\n    /**\n     * Array that stores the position of the axis. See {@link Graph.setAxisPosition} for\n     * more details.\n     * Default value is [\"left\", \"bottom\"].\n     * @type {string[]}\n     */\n    this.axisPosition = [\"left\", \"bottom\"];\n\n    /**\n     * Context of the cavas where the Graph is drawn. The canvas is saved\n     * in order for the plots to be able to find it, since the parent of the Plot is\n     * this object.\n     * @type {object}\n     */\n    this.ctx = undefined;\n\n    /**\n     * Axis object used to draw the graph axis.\n     * @type {Axis}\n     */\n    this.axis = new Axis(\n      this.width - this.padding.left - this.padding.right,\n      this.height - this.padding.top - this.padding.bottom,\n      {\n        world: this,\n        color: constants.COLORS.GRAY,\n        subAxisColor: \"#DDDDDD\",\n        textOffset: 2,\n        tickSize: 4,\n        tickSizeSmall: 2,\n        outsideNumbers: false\n      }\n    );\n\n    // Configure the font used on the axis.\n    this.font.set({ size: 14, color: constants.COLORS.GRAY, baseline: \"top\" });\n\n    // Configure the axis font and disable the prerenderer.\n    this.axis.font.color = constants.COLORS.GRAY;\n    this.axis.renderer.enabled = false;\n    \n    // Configure the axis position.\n    this.setAxisPosition();\n    \n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Sets the origin of the axis. \n   * The -x axis has the following position options: center, right, left.\n   * The -y axis has the following position options: center, top, bottom.\n   * @public\n   * @param {string} [xPos] Desired position for the -x axis.\n   * @param {string} [yPos] Desired position for the -y axis.\n   */\n  setAxisPosition(xPos, yPos) {\n\n    if (xPos !== undefined) this.axisPosition[0] = xPos;\n    if (yPos !== undefined) this.axisPosition[1] = yPos;\n\n    let x = 0;\n    let y = this.axis.height;\n\n    if (this.axisPosition[0] === \"center\") {\n      x = this.axis.width / 2;\n    } else if (this.axisPosition[0] === \"right\") {\n      x = this.axis.width;\n    }\n    if (this.axisPosition[1] === \"top\") {\n      y = 0;\n    } else if (this.axisPosition[1] === \"center\") {\n      y = this.axis.height / 2;\n    }\n\n    this.axis.setPosition(x, y);\n\n  }\n\n  /**\n   * Calculates the dimensions of the axis based on the total Graph dimensions and\n   * the padding set. Then the calculated dimensions are set to the axis.\n   * @private\n   */\n  setAxisDimensions() {\n    this.axis.width = this.width - this.padding.left - this.padding.right;\n    this.axis.height = this.height - this.padding.top - this.padding.bottom;\n    this.setAxisPosition();\n  }\n\n  /**\n   * Change the dimensions of the Graph object.\n   * @public\n   * @param {number} width Width of the graph.\n   * @param {number} height Height of the graph.\n   */\n  setDimensions(width, height) {\n    this.width = width;\n    this.height = height;\n    this.setAxisDimensions();\n  }\n\n  /**\n   * Controls if the legens are displayed. If true, then the padding is adjusted\n   * to make space for it.\n   * @public\n   * @param {boolean} state Desired state for the legends.\n   */\n  legends(state) {\n    this.legends_enabled = state;\n    if (this.legends_enabled) {\n      this.padding.top = 25;\n    } else {\n      this.padding.top = 10;\n    }\n    this.setAxisDimensions();\n  }\n\n  /**\n   * Sets the padding of the Graph object.\n   * @public\n   * @param {number} top Top padding in pixels.\n   * @param {number} right Right padding in pixels.\n   * @param {number} bottom Bottom padding in pixels.\n   * @param {number} left Left padding in pixels.\n   */\n  setPadding(top, right, bottom, left) {\n    this.padding.top = top;\n    this.padding.right = right;\n    this.padding.bottom = bottom;\n    this.padding.left = left;\n    this.axis.width = this.width - left - right;\n    this.axis.height = this.height - top - bottom;\n    this.setAxisDimensions();\n  }\n\n  /**\n   * Adds a {@link Plot} to the graph.\n   * @public\n   * @param {object} opts Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   * @returns {Plot} The newly created plot object.\n   */\n  addPlot(opts) {\n    const plot = new Plot(opts);\n    plot.setWorld(this);\n    this.plots.push(plot);\n    return plot;\n  }\n\n  /**\n   * Sets the labels for the graph. Usually the graph title is left blank, and the box's title\n   * is used as title.\n   * @public\n   * @param {string} title Title of the graph.\n   * @param {string} xlabel Label for the -x axis.\n   * @param {string} ylabel Label for the -y axis.\n   */\n  setLabels(title, xlabel, ylabel) {\n    this.title = title;\n    this.xlabel = xlabel;\n    this.ylabel = ylabel;\n  }\n\n  /**\n   * Debug function used to draw a box around the dimensions of the Graph object. It\n   * also draws boxes around the padding sections with different fill colors in order\n   * to distinguish between them.\n   * The boxes are only drawn if the parent box has the flag {@link Box.debug} enabled.\n   * @private\n   */\n  debug() {\n    const { ctx } = this.box.world;\n\n    // Section above graph.\n    ctx.beginPath();\n    ctx.fillStyle = constants.BOX_COLORS.GREEN.BACKGROUND;\n    ctx.rect(0, 0, this.width - this.padding.right, this.padding.top);\n    ctx.fill();\n    ctx.closePath();\n\n    // Section bellow graph.\n    ctx.beginPath();\n    ctx.fillStyle = constants.BOX_COLORS.PURPLE.BACKGROUND;\n    ctx.rect(\n      0,\n      this.height - this.padding.bottom,\n      this.width,\n      this.padding.bottom\n    );\n    ctx.fill();\n    ctx.closePath();\n\n    // Section left of graph.\n    ctx.beginPath();\n    ctx.fillStyle = constants.BOX_COLORS.YELLOW.BACKGROUND;\n    ctx.rect(0, 0, this.padding.left, this.height - this.padding.bottom);\n    ctx.fill();\n    ctx.closePath();\n\n    // Circle at the origin of the axis.\n    ctx.beginPath();\n    ctx.arc(\n      this.axis.position.x + this.padding.left,\n      this.axis.position.y + this.padding.top,\n      4,\n      0,\n      constants.TWO_PI\n    );\n    ctx.stroke();\n    ctx.closePath();\n\n    // Red box around the graph dimensions.\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = constants.COLORS.RED;\n    ctx.rect(0, 0, this.width, this.height);\n    ctx.rect(\n      this.padding.left,\n      this.padding.top,\n      this.width - this.padding.left - this.padding.right,\n      this.height - this.padding.top - this.padding.bottom\n    );\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  /**\n   * Draw function for the Graph and Plots called by the parent box.\n   * @private\n   */\n  draw() {\n    const { ctx } = this.box.world;\n\n    // Draw legends.\n    if (this.legends_enabled) {\n      const legendSpace = this.width / this.plots.length;\n      for (let i = 0; i < this.plots.length; i += 1) {\n        ctx.beginPath();\n        this.font.set({ size: 12, baseline: \"middle\" });\n        this.font.toCtx(ctx);\n        const x = Math.floor(legendSpace / 2 + legendSpace * i);\n        const y = Math.floor(this.padding.top * 0.3);\n        ctx.fillText(this.plots[i].label, x, y);\n        ctx.fillStyle = this.plots[i].color;\n        ctx.arc(\n          Math.floor(x - ctx.measureText(this.plots[i].label).width / 2 - 10),\n          y,\n          4,\n          0,\n          constants.TWO_PI\n        );\n        ctx.fill();\n        ctx.closePath();\n      }\n    }\n\n    // Draw Title\n    if (this.title !== \"\") {\n      this.font.set({ size: 14 });\n      this.font.toCtx(ctx);\n      ctx.beginPath();\n      ctx.fillText(\n        this.title,\n        Math.floor(this.width / 2),\n        Math.floor(this.padding.top * 0.2)\n      );\n    }\n\n    // Draw X Label\n    this.font.set({ size: 12, baseline: 'bottom' });\n    this.font.toCtx(ctx);\n    ctx.fillText(\n      this.xlabel,\n      Math.floor(this.padding.left + this.axis.width / 2),\n      Math.floor(this.height)\n    );\n\n    // Draw Y Label\n    ctx.save();\n    ctx.translate(\n      Math.floor(0),\n      Math.floor(this.padding.top + this.axis.height / 2)\n    );\n    ctx.rotate(constants.HALF_PI);\n    ctx.fillText(this.ylabel, 0, 0);\n    ctx.restore();\n    ctx.closePath();\n\n    // Draw Axis\n    ctx.translate(\n      this.axis.position.x + this.padding.left,\n      this.axis.position.y + this.padding.top\n    );\n    this.ctx = ctx;\n    this.axis.draw();\n\n    // Draw plots.\n    for (let i = 0; i < this.plots.length; i += 1) {\n      if (this.plots[i].display) this.plots[i].draw();\n    }\n  }\n\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/box/Box.Graph.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 477,
    "kind": "class",
    "name": "Graph",
    "memberof": "src/figures/box/Box.Graph.js",
    "static": true,
    "longname": "src/figures/box/Box.Graph.js~Graph",
    "access": "private",
    "export": true,
    "importPath": "core/src/figures/box/Box.Graph.js",
    "importStyle": "Graph",
    "description": "A Graph Box allow for {@link Plot} elements to be displayed in the box using a different scale to\nthe main axis in the world.\nA Graph object is created by calling the method {@link Box.addGraph} on the parent Box.",
    "lineNumber": 14,
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 478,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Box"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": "Parent box."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the graph in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the graph in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 479,
    "kind": "member",
    "name": "box",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#box",
    "access": "public",
    "description": "Sets the parent box where te Graph will be placed.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Box"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 480,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#width",
    "access": "public",
    "description": "Sets the width of the Graph in pixels.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 481,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#height",
    "access": "public",
    "description": "Sets the height of the Graph in pixels.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 482,
    "kind": "member",
    "name": "plots",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#plots",
    "access": "public",
    "description": "Array containing the plots displayed on the graph.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Plot[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 483,
    "kind": "member",
    "name": "legends_enabled",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#legends_enabled",
    "access": "public",
    "description": "Flag for enabling the display of the plot's legend. Usually turned on when\nmore than one plot is being displayed.\nDefault value is false.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 484,
    "kind": "member",
    "name": "padding",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#padding",
    "access": "public",
    "description": "Sets the padding in pixels that the graph has. The padding is used to display\nthe title, x label, and y label. The padding is then adjusted depending on the\nvalue of {@link Graph.legends_enabled} to accomodate the display of the legends.",
    "lineNumber": 70,
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "left",
        "description": "Left padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "25",
        "defaultRaw": 25,
        "name": "bottom",
        "description": "Bottom padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "right",
        "description": "Right padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "defaultValue": "10",
        "defaultRaw": 10,
        "name": "top",
        "description": "Top padding."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 485,
    "kind": "member",
    "name": "scaleX",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#scaleX",
    "access": "public",
    "description": "Scale object for the -x axis.\nDefault scale is 20px per 1 unit.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Scale"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 486,
    "kind": "member",
    "name": "scaleY",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#scaleY",
    "access": "public",
    "description": "Scale object for the -y axis.\nDefault scale is 20px per 1 unit.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Scale"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 487,
    "kind": "member",
    "name": "title",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#title",
    "access": "public",
    "description": "Sets the title for the graph.\nDefault value is \"\".",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 488,
    "kind": "member",
    "name": "xlabel",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#xlabel",
    "access": "public",
    "description": "Sets the label for the -x axis.\nDefault value is \"x\".",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 489,
    "kind": "member",
    "name": "ylabel",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#ylabel",
    "access": "public",
    "description": "Sets the label for the -y axis.\nDefault value is \"y\".",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 490,
    "kind": "member",
    "name": "axisPosition",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#axisPosition",
    "access": "public",
    "description": "Array that stores the position of the axis. See {@link Graph.setAxisPosition} for\nmore details.\nDefault value is [\"left\", \"bottom\"].",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 491,
    "kind": "member",
    "name": "ctx",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#ctx",
    "access": "public",
    "description": "Context of the cavas where the Graph is drawn. The canvas is saved\nin order for the plots to be able to find it, since the parent of the Plot is\nthis object.",
    "lineNumber": 121,
    "type": {
      "nullable": null,
      "types": [
        "object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 492,
    "kind": "member",
    "name": "axis",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#axis",
    "access": "public",
    "description": "Axis object used to draw the graph axis.",
    "lineNumber": 127,
    "type": {
      "nullable": null,
      "types": [
        "Axis"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 493,
    "kind": "method",
    "name": "setAxisPosition",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#setAxisPosition",
    "access": "public",
    "description": "Sets the origin of the axis. \nThe -x axis has the following position options: center, right, left.\nThe -y axis has the following position options: center, top, bottom.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "xPos",
        "description": "Desired position for the -x axis."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "yPos",
        "description": "Desired position for the -y axis."
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "method",
    "name": "setAxisDimensions",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#setAxisDimensions",
    "access": "private",
    "description": "Calculates the dimensions of the axis based on the total Graph dimensions and\nthe padding set. Then the calculated dimensions are set to the axis.",
    "lineNumber": 192,
    "params": [],
    "return": null
  },
  {
    "__docId__": 495,
    "kind": "method",
    "name": "setDimensions",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#setDimensions",
    "access": "public",
    "description": "Change the dimensions of the Graph object.",
    "lineNumber": 204,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the graph."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the graph."
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "method",
    "name": "legends",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#legends",
    "access": "public",
    "description": "Controls if the legens are displayed. If true, then the padding is adjusted\nto make space for it.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "state",
        "description": "Desired state for the legends."
      }
    ],
    "return": null
  },
  {
    "__docId__": 500,
    "kind": "method",
    "name": "setPadding",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#setPadding",
    "access": "public",
    "description": "Sets the padding of the Graph object.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": "Top padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": "Right padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": "Bottom padding in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": "Left padding in pixels."
      }
    ],
    "return": null
  },
  {
    "__docId__": 501,
    "kind": "method",
    "name": "addPlot",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#addPlot",
    "access": "public",
    "description": "Adds a {@link Plot} to the graph.",
    "lineNumber": 250,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Plot} The newly created plot object."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": false,
        "name": "opts",
        "description": "Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Plot"
      ],
      "spread": false,
      "description": "The newly created plot object."
    }
  },
  {
    "__docId__": 502,
    "kind": "method",
    "name": "setLabels",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#setLabels",
    "access": "public",
    "description": "Sets the labels for the graph. Usually the graph title is left blank, and the box's title\nis used as title.",
    "lineNumber": 265,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "title",
        "description": "Title of the graph."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "xlabel",
        "description": "Label for the -x axis."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "ylabel",
        "description": "Label for the -y axis."
      }
    ],
    "return": null
  },
  {
    "__docId__": 506,
    "kind": "method",
    "name": "debug",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#debug",
    "access": "private",
    "description": "Debug function used to draw a box around the dimensions of the Graph object. It\nalso draws boxes around the padding sections with different fill colors in order\nto distinguish between them.\nThe boxes are only drawn if the parent box has the flag {@link Box.debug} enabled.",
    "lineNumber": 278,
    "params": [],
    "return": null
  },
  {
    "__docId__": 507,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/box/Box.Graph.js~Graph",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Graph.js~Graph#draw",
    "access": "private",
    "description": "Draw function for the Graph and Plots called by the parent box.",
    "lineNumber": 338,
    "params": [],
    "return": null
  },
  {
    "__docId__": 509,
    "kind": "file",
    "name": "src/figures/box/Box.Label.js",
    "content": "import * as utils from \"../../Utils\";\nimport * as constants from \"../../Constants\";\nimport WorldElement from \"../../WorldElement\";\nimport Box from \"../Box\";\n\n/**\n * A Label Box allows for a pair of label and value to be displayed. It is often used to display results.\n * A Label object is created by calling the method {@link Box.addLabel} on the parent Box.\n * @private\n * @class Label\n */\nexport default class Label extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the label in pixels.\n   * @param {number} height Height of the label in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(box, width, height, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the parent box where te Label will be placed.\n     * @type {Box}\n     */\n    this.box = box;\n\n    /**\n     * Sets the width of the Label in pixels.\n     * @type {number}\n     */\n    this.width = width;\n\n    /**\n     * Sets the height of the Label in pixels.\n     * Default value is 14.\n     * @type {number}\n     */\n    this.height = height || 14;\n\n    /**\n     * Sets the width that the name portion has. This also means that the value\n     * of the label is going to be displayed this amount of pixels to the left of it.\n     * Furthermore, the width of the label ({@link Label.width}) must be larger than this value.\n     * Default value is 75.\n     * @type {number}\n     */\n    this.labelWidth = 75;\n\n    /**\n     * Name of the label.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.name = \"\";\n\n    /**\n     * Sets the formated value for the label. \n     * This is the value that is displayed along the name.\n     * @type {string}\n     */\n    this.value = \"\";\n\n    /**\n     * Sets the units that the value will use.\n     * Default value is \"\".\n     * @type {string}\n     */\n    this.units = \"\";\n\n    /**\n     * Flag for automatically using the (k)ilo, (M)ega, (G)iga prefixes in order to shorten\n     * the length of the value.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.usePrefixes = false;\n\n    /**\n     * Sets the amount of decimal places displayed on the value.\n     * Default value is 2.\n     * @type {number}\n     */\n    this.decPlaces = 2;\n\n    /**\n     * Flag for fixing the decimal places to the amount set in {@link Label.decPlaces}.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.fixPlaces = false;\n\n    // Configure font settings for the label.\n    this.font.set({\n      align: \"left\",\n      size: 14,\n      baseline: \"middle\",\n      color: constants.COLORS.GRAY\n    });\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Sets the value of the label. Given any new value it is formated into a string with\n   * the provided settings in the object.\n   * @public\n   * @param {number} value New value for the label.\n   */\n  set(value) {\n    let newValue = value;\n    const absValue = Math.abs(value);\n    let newUnits = this.units;\n    if (this.usePrefixes) {\n      if (absValue > 1e32) {\n        newValue = constants.SYMBOL.INF;\n      } else if (absValue > 1e9) {\n        newValue /= 1e9;\n        newUnits = `G${this.units}`;\n      } else if (absValue > 1e6) {\n        newValue /= 1e6;\n        newUnits = `M${this.units}`;\n      } else if (absValue > 1e3) {\n        newValue /= 1e3;\n        newUnits = `k${this.units}`;\n      }\n    }\n    this.value = utils.formatValue(\n      newValue,\n      newUnits,\n      this.decPlaces,\n      this.fixPlaces\n    );\n  }\n\n  /**\n   * Debug function used to draw a box around the dimensions of the label object.\n   * It is only drawn if the parent box has the flag {@link Box.debug} enabled.\n   * @private\n   */\n  debug() {\n    const { ctx } = this.box.world;\n    ctx.beginPath();\n    ctx.strokeStyle = constants.COLORS.BLUE;\n    ctx.rect(0, 0, this.width, this.height);\n    ctx.moveTo(this.labelWidth, 0);\n    ctx.lineTo(this.labelWidth, this.height);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  /**\n   * Draw function for the Label called by the parent box.\n   * @private\n   */\n  draw() {\n    const { ctx } = this.box.world;\n    ctx.beginPath();\n    this.font.toCtx(ctx);\n    ctx.fillText(this.name, 0, this.height / 2);\n    ctx.fillText(this.value, this.labelWidth, this.height / 2);\n    ctx.closePath();\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/box/Box.Label.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 510,
    "kind": "class",
    "name": "Label",
    "memberof": "src/figures/box/Box.Label.js",
    "static": true,
    "longname": "src/figures/box/Box.Label.js~Label",
    "access": "private",
    "export": true,
    "importPath": "core/src/figures/box/Box.Label.js",
    "importStyle": "Label",
    "description": "A Label Box allows for a pair of label and value to be displayed. It is often used to display results.\nA Label object is created by calling the method {@link Box.addLabel} on the parent Box.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Label"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Box"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": "Parent box."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the label in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the label in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 512,
    "kind": "member",
    "name": "box",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#box",
    "access": "public",
    "description": "Sets the parent box where te Label will be placed.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Box"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 513,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#width",
    "access": "public",
    "description": "Sets the width of the Label in pixels.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#height",
    "access": "public",
    "description": "Sets the height of the Label in pixels.\nDefault value is 14.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "labelWidth",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#labelWidth",
    "access": "public",
    "description": "Sets the width that the name portion has. This also means that the value\nof the label is going to be displayed this amount of pixels to the left of it.\nFurthermore, the width of the label ({@link Label.width}) must be larger than this value.\nDefault value is 75.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "name",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#name",
    "access": "public",
    "description": "Name of the label.\nDefault value is \"\".",
    "lineNumber": 59,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "value",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#value",
    "access": "public",
    "description": "Sets the formated value for the label. \nThis is the value that is displayed along the name.",
    "lineNumber": 66,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "units",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#units",
    "access": "public",
    "description": "Sets the units that the value will use.\nDefault value is \"\".",
    "lineNumber": 73,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "usePrefixes",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#usePrefixes",
    "access": "public",
    "description": "Flag for automatically using the (k)ilo, (M)ega, (G)iga prefixes in order to shorten\nthe length of the value.\nDefault value is false.",
    "lineNumber": 81,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "decPlaces",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#decPlaces",
    "access": "public",
    "description": "Sets the amount of decimal places displayed on the value.\nDefault value is 2.",
    "lineNumber": 88,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "fixPlaces",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#fixPlaces",
    "access": "public",
    "description": "Flag for fixing the decimal places to the amount set in {@link Label.decPlaces}.\nDefault value is false.",
    "lineNumber": 95,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 522,
    "kind": "method",
    "name": "set",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#set",
    "access": "public",
    "description": "Sets the value of the label. Given any new value it is formated into a string with\nthe provided settings in the object.",
    "lineNumber": 116,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "New value for the label."
      }
    ],
    "return": null
  },
  {
    "__docId__": 524,
    "kind": "method",
    "name": "debug",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#debug",
    "access": "private",
    "description": "Debug function used to draw a box around the dimensions of the label object.\nIt is only drawn if the parent box has the flag {@link Box.debug} enabled.",
    "lineNumber": 147,
    "params": [],
    "return": null
  },
  {
    "__docId__": 525,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/box/Box.Label.js~Label",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Label.js~Label#draw",
    "access": "private",
    "description": "Draw function for the Label called by the parent box.",
    "lineNumber": 162,
    "params": [],
    "return": null
  },
  {
    "__docId__": 526,
    "kind": "file",
    "name": "src/figures/box/Box.Text.js",
    "content": "import * as utils from \"../../Utils\";\nimport * as constants from \"../../Constants\";\nimport WorldElement from \"../../WorldElement\";\n\n/**\n * A Text Box allows for text to be displayed on a Box element. The text can be multiline\n * containing \\n caracters.\n * A Text object is created by calling the method {@link Box.addText} on the parent Box.\n * @private\n * @class Text\n */\nexport default class Text extends WorldElement {\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the text in pixels.\n   * @param {number} height Height of the text in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  constructor(box, width, height, opts) {\n\n    // Extend WorldElement.\n    super();\n\n    /**\n     * Sets the parent box where te Text will be placed.\n     * @type {Box}\n     */\n    this.box = box;\n\n    /**\n     * Sets the width of the Text in pixels.\n     * @type {number}\n     */\n    this.width = width;\n\n    /**\n     * Sets the height of the Text in pixels.\n     * @type {number}\n     */\n    this.height = height;\n\n    /**\n     * Contains the string to be displayed separated by every \\n character.\n     * Default value is [].\n     * @type {string[]}\n     */\n    this.text = [];\n    \n    // Configure font settings for the text.\n    this.font.set({\n      align: \"left\",\n      size: 14,\n      baseline: \"top\",\n      color: constants.COLORS.GRAY\n    });\n\n    // Apply user settings.\n    utils.loadOptions(this, opts);\n\n  }\n\n  /**\n   * Sets the text that will be displayed. The text can have multiple lines.\n   * @public\n   * @param {string} rawText Text to be displayed.\n   */\n  setText(rawText) {\n    this.text = rawText.split(\"\\n\");\n  }\n\n  /**\n   * Debug function used to draw a box around the dimensions of the text object.\n   * It is only drawn if the parent box has the flag {@link Box.debug} enabled.\n   * @private\n   */\n  debug() {\n    const { ctx } = this.box.world;\n    ctx.beginPath();\n    ctx.strokeStyle = constants.COLORS.RED;\n    ctx.rect(0, 0, this.width, this.height);\n    ctx.stroke();\n    ctx.closePath();\n  }\n\n  /**\n   * Draw function for the Text called by the parent box.\n   * @private\n   */\n  draw() {\n    const { ctx } = this.box.world;\n    ctx.beginPath();\n    this.font.toCtx(ctx);\n    for (let i = 0; i < this.text.length; i += 1) {\n      ctx.fillText(this.text[i], 0, i * this.font.spacing * this.font.size);\n    }\n    ctx.closePath();\n  }\n}\n",
    "static": true,
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/src/figures/box/Box.Text.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 527,
    "kind": "class",
    "name": "Text",
    "memberof": "src/figures/box/Box.Text.js",
    "static": true,
    "longname": "src/figures/box/Box.Text.js~Text",
    "access": "private",
    "export": true,
    "importPath": "core/src/figures/box/Box.Text.js",
    "importStyle": "Text",
    "description": "A Text Box allows for text to be displayed on a Box element. The text can be multiline\ncontaining \\n caracters.\nA Text object is created by calling the method {@link Box.addText} on the parent Box.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Text"
      }
    ],
    "interface": false,
    "extends": [
      "src/WorldElement.js~WorldElement"
    ]
  },
  {
    "__docId__": 528,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Box"
        ],
        "spread": false,
        "optional": false,
        "name": "box",
        "description": "Parent box."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": "Width of the text in pixels."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "height",
        "description": "Height of the text in pixels."
      },
      {
        "nullable": null,
        "types": [
          "object"
        ],
        "spread": false,
        "optional": true,
        "name": "opts",
        "description": "Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored."
      }
    ]
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "box",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#box",
    "access": "public",
    "description": "Sets the parent box where te Text will be placed.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Box"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "width",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#width",
    "access": "public",
    "description": "Sets the width of the Text in pixels.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "height",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#height",
    "access": "public",
    "description": "Sets the height of the Text in pixels.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "text",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#text",
    "access": "public",
    "description": "Contains the string to be displayed separated by every \\n character.\nDefault value is [].",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 533,
    "kind": "method",
    "name": "setText",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#setText",
    "access": "public",
    "description": "Sets the text that will be displayed. The text can have multiple lines.",
    "lineNumber": 69,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "rawText",
        "description": "Text to be displayed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "debug",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#debug",
    "access": "private",
    "description": "Debug function used to draw a box around the dimensions of the text object.\nIt is only drawn if the parent box has the flag {@link Box.debug} enabled.",
    "lineNumber": 78,
    "params": [],
    "return": null
  },
  {
    "__docId__": 536,
    "kind": "method",
    "name": "draw",
    "memberof": "src/figures/box/Box.Text.js~Text",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/figures/box/Box.Text.js~Text#draw",
    "access": "private",
    "description": "Draw function for the Text called by the parent box.",
    "lineNumber": 91,
    "params": [],
    "return": null
  },
  {
    "kind": "index",
    "content": "# p$.js\n\np$.js is the physics and drawing engine for the simulations running at NewtonDreams.com.\nIt allows the user to focus on the mathematical aspect of the simulation while the library handles the drawing of objects. This means the user can program equations that use real units such as meters or seconds, and the library will handle the scaling to pixels.\n\nThe library provides different methods for handling shapes, images, particles, vectors, graphs, buttons, sliders, result labels, and many other functions. Furthermore, this library uses some optimizations techniques behind the scenes in order to optimize the use of resources on the target device (see `Renderer.js`).\n\nSince the website NewtonDreams.com is a responsive website, it was important for the library to be also responsive. The library handles the resizing of the canvas and allow the user to create responsive simulations that will work seamlessly between the browser on a computer and a mobile phone.\n\nThe library runs on a  `<canvas>` HTML object. Therefore, a latest browser is needed for developing simulations using this library.  It’s important to note that the whole library is wrapped around the namespace `p$`. This means that whenever an object, function or constant wants to be called `p$.` must be prepended to the object’s name.\n\nThe base object for all simulations is a `World` object (see `world.js`). Essentially, the world is the canvas, and all objects are handled by the world. Objects can be later added to the world, and such objects will be displayed depending on the properties set by the user. \n\nThe library provides basic functions used by all objects (see `utils.js`) and constants (see `constants.js`). All shapes added to the canvas are children from the parent class `WorldElement`. It is important to understand how this object works, since all objects are based on this object.\n\nOne of the main upgrades made to the library was the addition of the `Box` object. This object allows the user to display results and graphs on top of the simulation. It is a window-like object that can be moved around by the user.\n\n## Start Developing\n\nTo start developing simulations with p$.js download the following template. The zip file contains a single HTML file and a JavaScript file. The file can be opened locally without the need of having a local server. Nonetheless it is required to have an internet connection since the required files for the simulations are downloaded from the NewtonDreams.com server.\n\nFurthermore, these files are a stripped down version of the real template files. The files provided in the zip do not have the PHP code required for displaying the navigation, date, and titles from the file database.\n\n<a href=\"template.zip\">Download Template</a>\n\n## Author(s)\n\nEnrique Mireles Gutierrez - enrique.mireles@udem.edu\n",
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"core\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"./src/app.js\",\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"build\": \"webpack\",\n    \"watch\": \"webpack --watch\",\n    \"docs\": \"esdoc -c .esdoc.json\"\n  },\n  \"keywords\": [],\n  \"author\": \"Enrique Mireles Gutierrez\",\n  \"license\": \"\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.2.2\",\n    \"@babel/preset-env\": \"^7.2.3\",\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-loader\": \"^8.0.5\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.12.1\",\n    \"eslint-config-airbnb-base\": \"^13.1.0\",\n    \"eslint-config-prettier\": \"^3.5.0\",\n    \"eslint-plugin-import\": \"^2.14.0\",\n    \"eslint-plugin-prettier\": \"^3.0.1\",\n    \"jsdoc\": \"^3.5.5\",\n    \"jsdoc-export-default-interop\": \"^0.3.1\",\n    \"minami\": \"^1.2.3\",\n    \"prettier\": \"^1.15.3\",\n    \"webpack\": \"^4.28.4\",\n    \"webpack-cli\": \"^3.2.1\",\n    \"webpack-dev-server\": \"^3.1.14\",\n    \"webpack-livereload-plugin\": \"^2.2.0\"\n  },\n  \"dependencies\": {\n    \"docdash\": \"^1.0.2\"\n  }\n}\n",
    "longname": "/home/emireles/public_html/newtondreams-bs4/js/core/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]