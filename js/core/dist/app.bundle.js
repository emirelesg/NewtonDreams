!function(e){var n={};function t(i){if(n[i])return n[i].exports;var r=n[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,t),r.l=!0,r.exports}t.m=e,t.c=n,t.d=function(e,n,i){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:i})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)t.d(i,r,function(n){return e[n]}.bind(null,r));return i},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s="./src/app.js")}({"./src/Constants.js":
/*!**************************!*\
  !*** ./src/Constants.js ***!
  \**************************/
/*! exports provided: MOVE_STYLE, SHAPE_STYLE, ANGLE_STYLE, SYMBOL, CURSOR, RAD_TO_DEG, DEG_TO_RAD, M_TO_CM, CM_TO_M, CM3_TO_M3, PA_TO_ATM, PI, TWO_PI, HALF_PI, THIRD_PI, FOURTH_PI, FIFTH_PI, SIXTH_PI, LOG10, SIN60, COS60, SIN30, COS30, GRAVITY, K, E0, BOLTZMANN, AVOGADRO, OVER_NOTHING, DRAG_NOTHING, FONT, FONT_SIZE, FONT_COLOR, FONT_BASELINE, FONT_ALIGN, COLORS, BOX_COLORS */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MOVE_STYLE", function() { return MOVE_STYLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SHAPE_STYLE", function() { return SHAPE_STYLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANGLE_STYLE", function() { return ANGLE_STYLE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SYMBOL", function() { return SYMBOL; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CURSOR", function() { return CURSOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RAD_TO_DEG", function() { return RAD_TO_DEG; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEG_TO_RAD", function() { return DEG_TO_RAD; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "M_TO_CM", function() { return M_TO_CM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CM_TO_M", function() { return CM_TO_M; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CM3_TO_M3", function() { return CM3_TO_M3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PA_TO_ATM", function() { return PA_TO_ATM; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PI", function() { return PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TWO_PI", function() { return TWO_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HALF_PI", function() { return HALF_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "THIRD_PI", function() { return THIRD_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FOURTH_PI", function() { return FOURTH_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FIFTH_PI", function() { return FIFTH_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIXTH_PI", function() { return SIXTH_PI; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOG10", function() { return LOG10; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIN60", function() { return SIN60; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COS60", function() { return COS60; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SIN30", function() { return SIN30; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COS30", function() { return COS30; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRAVITY", function() { return GRAVITY; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "K", function() { return K; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "E0", function() { return E0; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOLTZMANN", function() { return BOLTZMANN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AVOGADRO", function() { return AVOGADRO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OVER_NOTHING", function() { return OVER_NOTHING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DRAG_NOTHING", function() { return DRAG_NOTHING; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FONT", function() { return FONT; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FONT_SIZE", function() { return FONT_SIZE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FONT_COLOR", function() { return FONT_COLOR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FONT_BASELINE", function() { return FONT_BASELINE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FONT_ALIGN", function() { return FONT_ALIGN; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COLORS", function() { return COLORS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BOX_COLORS", function() { return BOX_COLORS; });\n/**\n * @module Constants\n */\n\n/**\n * Defines how the coordinates of an object will be changed when the object is dragged around.\n * @property {string} BY_PX="px" The position of the object will be changed in pixels.\n * @property {string} BY_UNITS="units" The position of the object will be changed in units. \n */\nvar MOVE_STYLE = {\n  BY_PX: "px",\n  BY_UNITS: "units"\n};\n/**\n * Defines how a shape is drawn with the methods {@link Shape.moveTo} and {@link Shape.lineTo}.\n * @property {number} NONE=0 Every time a set of coordinates is provided they will be used as absolute coordinates.\n * @property {number} ACCOMULATIVE=1 The next set of coordinates will be used relative to the previous set of coordinates.\n */\n\nvar SHAPE_STYLE = {\n  NONE: 0,\n  ACCOMULATIVE: 1\n};\n/**\n * Defines if the angle used is in radians or degrees.\n * @property {number} DEG=1 Angle is in degrees.\n * @property {number} RAD=2 Angle is in radians.\n */\n\nvar ANGLE_STYLE = {\n  DEG: 1,\n  RAD: 2\n};\n/**\n * Useful symbols for simulations. The unicode of every symbol is used.\n * @property {string} BLANK=- Used for labels when no value is provided.\n * @property {string} THETA="θ"\n * @property {string} INF="\\u221e"\n * @property {string} MICRO="\\u03BC"\n * @property {string} OHM="\\u2126"\n * @property {string} LETTERS="ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n */\n\nvar SYMBOL = {\n  BLANK: "-",\n  THETA: "θ",\n  INF: "\\u221E",\n  MICRO: "\\u03BC",\n  OHM: "\\u2126",\n  LETTERS: "ABCDEFGHIJKLMNOPQRSTUVWXYZ"\n};\n/**\n * Types of cursors that an object can have when hovered or dragged.\n * @property {string} DEFAULT="default"\n * @property {string} POINTER="pointer"\n * @property {string} CROSS="cross"\n * @property {string} MOVE="move"\n * @property {string} TEXT="text"\n */\n\nvar CURSOR = {\n  DEFAULT: "default",\n  POINTER: "pointer",\n  CROSS: "cross",\n  MOVE: "move",\n  TEXT: "text"\n};\n/**\n * Conversion factor from radians to degrees.\n * @type {number}\n */\n\nvar RAD_TO_DEG = 180 / Math.PI;\n/**\n * Conversion factor from degrees to radians.\n * @type {number}\n */\n\nvar DEG_TO_RAD = Math.PI / 180;\n/**\n * Conversion factor from meters to centimeters.\n * @type {number}\n */\n\nvar M_TO_CM = 100;\n/**\n * Conversion factor from centimeters to meters.\n * @type {number}\n */\n\nvar CM_TO_M = 1 / 100;\n/**\n * Conversion factor from cubic centimeters to cubic meters.\n * @type {number}\n */\n\nvar CM3_TO_M3 = 1 / Math.pow(100, 3);\n/**\n * Conversion factor from pascals to atmospheres.\n * @type {number}\n */\n\nvar PA_TO_ATM = 9.86923E-6;\n/**\n * PI constant.\n * @type {number}\n */\n\nvar PI = Math.PI;\n/**\n * 2 * PI constant.\n * @type {number}\n */\n\n\nvar TWO_PI = PI * 2;\n/**\n * PI / 2 constant.\n * @type {number}\n */\n\nvar HALF_PI = PI / 2;\n/**\n * PI / 3 constant.\n * @type {number}\n */\n\nvar THIRD_PI = PI / 3;\n/**\n * PI / 4 constant.\n * @type {number}\n */\n\nvar FOURTH_PI = PI / 4;\n/**\n * PI / 5 constant.\n * @type {number}\n */\n\nvar FIFTH_PI = PI / 5;\n/**\n * PI / 6 constant.\n * @type {number}\n */\n\nvar SIXTH_PI = PI / 6;\n/**\n * Log 10 constant.\n * @type {number}\n */\n\nvar LOG10 = Math.log(10);\n/**\n * Sine of 60°.\n * @type {number}\n */\n\nvar SIN60 = Math.sin(THIRD_PI);\n/**\n * Cosine of 60°.\n * @type {number}\n */\n\nvar COS60 = Math.cos(THIRD_PI);\n/**\n * Sine of 30°.\n * @type {number}\n */\n\nvar SIN30 = COS60;\n/**\n * Cosine of 30°.\n * @type {number}\n */\n\nvar COS30 = SIN60;\n/**\n * Graviy constant.\n * @type {number}\n */\n\nvar GRAVITY = -9.81;\n/**\n * Coulomb\'s constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Coulomb_constant\n */\n\nvar K = 8.987e9;\n/**\n * Vacuum permittivity constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Vacuum_permittivity\n */\n\nvar E0 = 8.854e-12;\n/**\n * Boltzmann constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Boltzmann_constant\n */\n\nvar BOLTZMANN = 1.38064852E-23;\n/**\n * Avogadro constant.\n * @type {number}\n * @see https://en.wikipedia.org/wiki/Avogadro_constant\n */\n\nvar AVOGADRO = 6.0221409E23;\n/**\n * Used when the mouse isn\'t over an object.\n * @type {number}\n */\n\nvar OVER_NOTHING = -1;\n/**\n * Used when the mouse isn\'t dragging an object.\n * @type {null}\n */\n\nvar DRAG_NOTHING = null;\n/**\n * Defines the default font used for all simulations.\n */\n\nvar FONT = "-apple-system, BlinkMacSystemFont, Segoe UI, Helvetica Neue, Arial, Sans Serif";\n/**s\n * Defines the default font size for all simulations.\n */\n\nvar FONT_SIZE = "12";\n/**\n * Defines the default font color for all simulaions.\n */\n\nvar FONT_COLOR = "#444444";\n/**\n * Defines the valid font baselines.\n */\n\nvar FONT_BASELINE = ["top", "hanging", "middle", "alphabetic", "ideographic", "bottom"];\n/**\n * Defines teh valid font alignments.\n */\n\nvar FONT_ALIGN = ["left", "right", "center", "start", "end"];\n/**\n * Defines the default colors used for simulations.\n */\n\nvar COLORS = {\n  RED: "#F44336",\n  BLUE: "#007bff",\n  GREEN: "#4CAF50",\n  YELLOW: "#FFC510",\n  PURPLE: "#673AB7",\n  BROWN: "#795548",\n  LIGHT_GREEN: "#CDDC39",\n  GRAY: "#607D8B",\n  LIGHT_GRAY: "#8FA4AD",\n  WHITE: "#FFFFFF",\n  BLACK: "#000000",\n  COMPONENT: "#B7B7B7"\n};\n/**\n * Defines the default colors used for box displays.\n * Colors are provided in matching pairs of BACKGROUND and BORDER colors.\n */\n\nvar BOX_COLORS = {\n  BLUE: {\n    BACKGROUND: "#F0F5FF",\n    BORDER: "#A2C1FF"\n  },\n  GREEN: {\n    BACKGROUND: "#D5E8D4",\n    BORDER: "#82B366"\n  },\n  RED: {\n    BACKGROUND: "#F8CECC",\n    BORDER: "#B85450"\n  },\n  YELLOW: {\n    BACKGROUND: "#FFF2CC",\n    BORDER: "#D6B656"\n  },\n  ORANGE: {\n    BACKGROUND: "#FFE6CC",\n    BORDER: "#D79B00"\n  },\n  PURPLE: {\n    BACKGROUND: "#E1D5E7",\n    BORDER: "#9673A6"\n  },\n  GRAY: {\n    BACKGROUND: "#F5F5F5",\n    BORDER: "#CCCCCC"\n  }\n};\n\n//# sourceURL=webpack:///./src/Constants.js?')},"./src/Font.js":
/*!*********************!*\
  !*** ./src/Font.js ***!
  \*********************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Font; });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./src/Constants.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\n * Stores the font settings currently used by a World Element.\n * @private\n * @class Font\n */\n\nvar Font =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Font properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Font(opts) {\n    _classCallCheck(this, Font);\n\n    /**\n     * Sets the font size in pixels. \n     * Default value is {@link FONT_SIZE}.\n     * @type {number|string}\n     */\n    this.size = _Constants__WEBPACK_IMPORTED_MODULE_0__["FONT_SIZE"];\n    /**\n     * Sets the font face used.\n     * Default value is {@link FONT}.\n     * @type {string}\n     */\n\n    this.face = _Constants__WEBPACK_IMPORTED_MODULE_0__["FONT"];\n    /**\n     * Sets the font color in HEX format. \n     * Default value is {@link FONT_COLOR}.\n     * @type {string}\n     */\n\n    this.color = _Constants__WEBPACK_IMPORTED_MODULE_0__["FONT_COLOR"];\n    /**\n     * Sets the baseline value for the text.\n     * Default value is middle.\n     * @type {string}\n     */\n\n    this.baseline = "middle";\n    /**\n     * Sets the alignment value for the text.\n     * Default value is center.\n     * @type {string}\n     */\n\n    this.align = "center";\n    /**\n     * Sets the font weight used. If the font face has different weights available, another value can be selected.\n     * Default value is normal.\n     * @type {string}\n     */\n\n    this.weight = "normal";\n    /**\n     * Sets the line spacing between text lines. The value is multiplied by the current font size.\n     * Default value is 1.\n     * @type {number}\n     */\n\n    this.spacing = 1; // Apply user settings.\n\n    this.set(opts);\n  }\n  /**\n   * Given an object with valid properties, it assigns their values to the object.\n   * This allows for a signle line to modify multiple properties of the font object.\n   * @public\n   * @param {object} opts Object with font properties.\n   */\n\n\n  _createClass(Font, [{\n    key: "set",\n    value: function set(opts) {\n      if (opts) {\n        if (opts.size) this.size = opts.size;\n        if (opts.face) this.face = opts.face;\n        if (opts.color) this.color = opts.color;\n        if (opts.baseline && Font.validateBaseline(opts.baseline)) this.baseline = opts.baseline;\n        if (opts.align && Font.validateAlign(opts.align)) this.align = opts.align;\n        if (opts.weight) this.weight = opts.weight;\n        if (opts.spacing) this.spacing = opts.spacing;\n      }\n    }\n    /**\n     * Checks if the provided baseline value is valid for a canvas element.\n     * Valid baseline values include: "top", "hanging", "middle", "alphabetic", "ideographic", "bottom".\n     * @private \n     * @param {string} baseline Baseline value to check.\n     * @throws {error} Error when the baseline value is invalid.\n     * @returns {boolean} True if baseline value is valid.\n     */\n\n  }, {\n    key: "toCtx",\n\n    /**\n     * Sets the current font settings to the context.\n     * @private\n     * @param {object} ctx Canvas context object.\n     */\n    value: function toCtx(ctx) {\n      if (this.weight !== "normal") {\n        ctx.font = "".concat(this.weight, " ").concat(this.size, "px ").concat(this.face);\n      } else {\n        ctx.font = "".concat(this.size, "px ").concat(this.face);\n      }\n\n      ctx.textAlign = this.align;\n      ctx.textBaseline = this.baseline;\n      ctx.fillStyle = this.color;\n    }\n  }], [{\n    key: "validateBaseline",\n    value: function validateBaseline(baseline) {\n      if (_Constants__WEBPACK_IMPORTED_MODULE_0__["FONT_BASELINE"].includes(baseline)) {\n        return true;\n      }\n\n      throw new Error("".concat(baseline, " is not a valid baseline."));\n    }\n    /**\n     * Checks if the provided align value is valid for a canvas element.\n     * Valid align values: "left", "right", "center", "start", "end".\n     * @private \n     * @param {string} align Align value to check.\n     * @throws {error} Error when the align value is invalid.\n     * @returns {boolean} True if align value is valid.\n     */\n\n  }, {\n    key: "validateAlign",\n    value: function validateAlign(align) {\n      if (_Constants__WEBPACK_IMPORTED_MODULE_0__["FONT_ALIGN"].includes(align)) {\n        return true;\n      }\n\n      throw new Error("".concat(align, " is not a valid text align."));\n    }\n  }]);\n\n  return Font;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Font.js?')},"./src/Renderer.js":
/*!*************************!*\
  !*** ./src/Renderer.js ***!
  \*************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Renderer; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/Utils.js");\n/* harmony import */ var _World__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./World */ "./src/World.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/**\n * Enables an element to be prerendered in a hidden canvas. Once an element is prerendered it can be drawn to the main canvas faster.\n * If an element has not changed, then prerendered version will be used, thus optimizing the application.\n * @private\n * @class Renderer\n */\n\nvar Renderer =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Renderer properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Renderer(opts) {\n    _classCallCheck(this, Renderer);\n\n    /**\n     * Sets if the target object is an axis. It is important to set this property for all axis objects.\n     * Default value is false.\n     * @type {boolean}\n     */\n    this.isAxis = false;\n    /**\n     * Sets the object that will be prerendered.\n     * Default value is undefined.\n     * @type {object}\n     */\n\n    this.parent = undefined;\n    /**\n     * Flag for signaling when then object has been drawn in the hidden canvas.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.rendered = false;\n    /**\n     * Flag for switching the renderer on or off. If it is set to false, then the object will\n     * be drawn normally on the main canvas.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    this.enabled = true;\n    /**\n     * Sets the reference to the world object. \n     * Default value is undefined.\n     * @type {World}\n     */\n\n    this.world = undefined;\n    /**\n     * Sets if the rendered image will be drawn with respect to the axis of the world or not.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.absolute = false;\n    /**\n     * Canvas element where the object will be prerendered.\n     * @type {object}\n     */\n\n    this.canvas = document.createElement("canvas");\n    /**\n     * Context of the canvas element where the object will be prerendered.\n     * @type {object}\n     */\n\n    this.ctx = this.canvas.getContext("2d");\n    /**\n     * Function used to set the drawing procedure for the renderer.\n     * @type {function}\n     */\n\n    this.callback = undefined;\n    /**\n     * Arguments passed to the callback function used to draw onto the renderer.\n     * @type {*}\n     */\n\n    this.callbackArgs = undefined; // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](this, opts);\n  }\n  /**\n   * Sets the world object used by the renderer. It is automatically set by the world\n   * when the element is added to the world.\n   * @private\n   * @param {World} world World object where the renderer will draw the render.\n   */\n\n\n  _createClass(Renderer, [{\n    key: "setWorld",\n    value: function setWorld(world) {\n      this.world = world;\n      this.resize();\n    }\n    /**\n     * Sets the callback function for when the renderer is drawn.\n     * @param {function} f Callback function.\n     * @param {*} args Arguments passed to the callback function when called.\n     */\n\n  }, {\n    key: "setCallback",\n    value: function setCallback(f, args) {\n      this.resize();\n      this.render();\n      this.callback = f;\n      this.callbackArgs = args;\n    }\n    /**\n     * Set the flags required to start the rendering process.\n     * The flag {@link Renderer.enabled} is set to true and the flag {@link Renderer.rendered} is set to false.\n     * @public\n     */\n\n  }, {\n    key: "render",\n    value: function render() {\n      this.enabled = true;\n      this.rendered = false;\n    }\n    /**\n     * Resizes the rendered canvas to match the size of the world\'s canvas.\n     * It is automatically called when the canvas gets resized.\n     * @private\n     */\n\n  }, {\n    key: "resize",\n    value: function resize() {\n      var _this$world = this.world,\n          pxRatio = _this$world.pxRatio,\n          canvas = _this$world.canvas;\n      this.canvas.width = canvas.width;\n      this.canvas.height = canvas.height;\n      this.ctx.scale(pxRatio, pxRatio);\n      this.rendered = false;\n    }\n    /**\n     * Starts the drawing process of the rendered canvas on the world canvas.\n     * It sets the translation depending on the value of {@link Renderer.absolute}.\n     * @public\n     */\n\n  }, {\n    key: "begin",\n    value: function begin() {\n      var _this$world2 = this.world,\n          width = _this$world2.width,\n          height = _this$world2.height;\n      this.ctx.save();\n      this.ctx.clearRect(0, 0, width, height);\n\n      if (!this.absolute) {\n        var axis = this.isAxis ? this.parent : this.world.axis;\n        this.ctx.translate(axis.position.x, axis.position.y);\n      }\n    }\n    /**\n     * Finishes the drawing process of the rendered canvas on the world canvas.\n     * @public\n     */\n\n  }, {\n    key: "end",\n    value: function end() {\n      this.ctx.restore();\n      this.rendered = true;\n    }\n    /**\n     * Draws the rendered canvas onto the world canvas.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var _this$world3 = this.world,\n          width = _this$world3.width,\n          height = _this$world3.height,\n          ctx = _this$world3.ctx;\n\n      if (this.absolute) {\n        ctx.drawImage(this.canvas, 0, 0, width, height);\n      } else {\n        var axis = this.isAxis ? this.parent : this.world.axis;\n        ctx.drawImage(this.canvas, -axis.position.x, -axis.position.y, width, height);\n      }\n    }\n  }]);\n\n  return Renderer;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Renderer.js?')},"./src/Scale.js":
/*!**********************!*\
  !*** ./src/Scale.js ***!
  \**********************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Scale; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/Utils.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\n * Stores the scale properties in a particular axis (-x or -y).\n * @public\n * @class Scale\n */\n\nvar Scale =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {number} px Number of pixels that one magnitude value is equivalent.\n   * @param {number} mag Magnitude of the scale.\n   * @param {string} [unit=""] Unit of the scale.\n   */\n  function Scale(px, mag, unit) {\n    _classCallCheck(this, Scale);\n\n    /**\n     * Number of pixels that one magnitude value is equivalent.\n     * Default value is 0.\n     * @type {number}\n     */\n    this.px = 0;\n    /**\n     * Magnitude of the scale.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    this.mag = 0;\n    /**\n     * Units of the scale. These units are displayed in the axis.\n     * Default value is "".\n     * @type {string}\n     */\n\n    this.unit = "";\n    /**\n     * Conversion factor from units to pixels.\n     * Default value is 0.\n     * @type {number}\n     * @example\n     * var pixels = units * scale.toPixels;\n     */\n\n    this.toPx = 0;\n    /**\n     * Conversion factor from pixels to units.\n     * Default value is 0.\n     * @type {number}\n     * @example\n     * var units = pixels * scale.toUnits;\n     */\n\n    this.toUnits = 0; // Apply user settings.\n\n    this.set(px, mag, unit);\n  }\n  /**\n   * Sets the scale for the axis. It calculates the conversion factors between pixels and units.\n   * @public\n   * @param {number} px Number of pixels that one magnitude value is equivalent.\n   * @param {number} mag Magnitude of the scale.\n   * @param {string} [unit=""] Unit of the scale.\n   */\n\n\n  _createClass(Scale, [{\n    key: "set",\n    value: function set(px, mag, unit) {\n      this.px = px;\n      this.mag = mag;\n      this.unit = _Utils__WEBPACK_IMPORTED_MODULE_0__["isString"](unit) ? unit : "";\n      this.toPx = this.px / this.mag;\n      this.toUnits = this.mag / this.px;\n    }\n  }]);\n\n  return Scale;\n}();\n\n\n\n//# sourceURL=webpack:///./src/Scale.js?')},"./src/Utils.js":
/*!**********************!*\
  !*** ./src/Utils.js ***!
  \**********************/
/*! exports provided: getPixelRatio, fixId, round, clamp, cos, sin, isFunction, isObject, isString, distSquared, rad, isCoordInside, formatValue, loadOptions, calcStepSize, gaussian */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPixelRatio", function() { return getPixelRatio; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fixId", function() { return fixId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clamp", function() { return clamp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cos", function() { return cos; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sin", function() { return sin; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isString", function() { return isString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distSquared", function() { return distSquared; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rad", function() { return rad; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isCoordInside", function() { return isCoordInside; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatValue", function() { return formatValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "loadOptions", function() { return loadOptions; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calcStepSize", function() { return calcStepSize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gaussian", function() { return gaussian; });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./src/Constants.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\n\n/**\n * Obtains the pixel ratio of the device. Used to scale properly the canvas for high resolution devices.\n * @public\n * @param {object} ctx Canvas context object.\n * @returns {number} The pixel ratio of the device.\n */\n\nfunction getPixelRatio(ctx) {\n  var devicePixelRatio = window.devicePixelRatio || 1;\n  var backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n  return devicePixelRatio / backingStoreRatio;\n}\n/**\n * Makes sure that a HTML id allways has a # at the beginning. \n * If the provided id already has a # then it returns the same id, otherwise it is added.\n * @public\n * @param {string} id Id of an HTML object.\n * @returns {string} Id with a # prepended.\n */\n\nfunction fixId(id) {\n  return id[0] === "#" ? id : "#".concat(id);\n}\n/**\n * Round a number to a given amount of decimal places.\n * @public\n * @param {number} value Value to round.\n * @param {number} precision Amount of decimal places required.\n * @returns {number} Rounded number.\n */\n\nfunction round(value, precision) {\n  var multiplier = Math.pow(10, precision || 0);\n  return Math.round(value * multiplier) / multiplier;\n}\n/**\n * Constrain a value within a range of values.\n * If value > max then value = max;\n * If value < min then value = min;\n * @public\n * @param {number} val Value to clamp within range.\n * @param {number} min Minimum acceptable value.\n * @param {number} max Maximum acceptable value.\n * @returns {number} Constrained value to the given range.\n */\n\nfunction clamp(val, min, max) {\n  if (val > max) return max;\n  if (val < min) return min;\n  return val;\n}\n/**\n * Cosine function that can accept angles in radians or degrees.\n * @public\n * @param {number} val Angle for calculating the cosine.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Cosine of the angle.\n */\n\nfunction cos(val, type) {\n  return Math.cos(type === _Constants__WEBPACK_IMPORTED_MODULE_0__["ANGLE_STYLE"].DEG ? val * _Constants__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"] : val);\n}\n/**\n * Sine function that can accept angles in radians or degrees.\n * @public\n * @param {number} val Angle for calculating the sine.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Sine of the angle.\n */\n\nfunction sin(val, type) {\n  return Math.sin(type === _Constants__WEBPACK_IMPORTED_MODULE_0__["ANGLE_STYLE"].DEG ? val * _Constants__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"] : val);\n}\n/**\n * Test if an object is a function.\n * @public\n * @param {object} f Object to test.\n * @returns {boolean} True if the object is a function, false otherwise.\n */\n\nfunction isFunction(f) {\n  return typeof f === "function";\n}\n/**\n * Test if an object is an object.\n * @public\n * @param {object} o Object to test.\n * @returns {boolean} True if the object is an object, false otherwise.\n */\n\nfunction isObject(o) {\n  return _typeof(o) === "object";\n}\n/**\n * Test if an object is a string.\n * @public\n * @param {object} s Object to test.\n * @returns {boolean} True if the object is a string, false otherwise.\n */\n\nfunction isString(s) {\n  return typeof s === "string";\n}\n/**\n * Given a set of two points the squared distance is calculated.\n * This is faster than calculating the Euclidean distance between them, since no square root is calculated.\n * @public\n * @param {number} x0 Initial -x coordinate.\n * @param {number} y0 Initial -y coordinate.\n * @param {number} x1 Final -x coordinate.\n * @param {number} y1 Final -y coordinate.\n * @returns {number} The squared distance between points.\n */\n\nfunction distSquared(x0, y0, x1, y1) {\n  return Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2);\n}\n/**\n * Given an angle makes sure that it is in radians.\n * @public\n * @param {number} angle Angle to convert to radians.\n * @param {number} type Determines if the angle provided is in radians or in degrees. See {@link ANGLE_STYLE}.\n * @returns {number} Angle in radians.\n */\n\nfunction rad(angle, type) {\n  return type === _Constants__WEBPACK_IMPORTED_MODULE_0__["ANGLE_STYLE"].DEG ? angle * _Constants__WEBPACK_IMPORTED_MODULE_0__["DEG_TO_RAD"] : angle;\n}\n/**\n * Determines if a point is inside of a box.\n * Often used to test is the mouse is over an element.\n * @public\n * @param {number} x -x coordinate to test.\n * @param {number} y -y coordinate to test.\n * @param {number} bx -x center coordinate of the box.\n * @param {number} by -y center coordinate of the box.\n * @param {number} bw Half of the box\'s width.\n * @param {number} bh Half of the box\'s height.\n * @returns {boolean} True if point is within the box, false otherwise.\n */\n\nfunction isCoordInside(x, y, bx, by, bw, bh) {\n  return Math.pow(bx - x, 2) < Math.pow(bw, 2) && Math.pow(y - by, 2) < Math.pow(bh, 2);\n}\n/**\n * Format a number to have a certain number of decimal places and/or fixed places and\n * add a unit label. Used to format the strings of labels and sliders.\n * If the input value is a {@link SYMBOL} then return the same symbol.\n * @public\n * @param {number|string} val Input number. Can also be a string or a symbol such as in {@link SYMBOL}.\n * @param {string} units Units of the input number.\n * @param {number} decPlaces Amount of decimal places to round.\n * @param {boolean} fixPlaces Fix the amount of decimal places. If the number doesn\'t have enough, zeros will be added.\n * @returns {string} Formated number.\n */\n\nfunction formatValue(val, units, decPlaces, fixPlaces) {\n  if (val === _Constants__WEBPACK_IMPORTED_MODULE_0__["SYMBOL"].BLANK || val === _Constants__WEBPACK_IMPORTED_MODULE_0__["SYMBOL"].INF) return val;\n  var result = Number.isNaN(val) && val !== undefined ? 0 : round(val, decPlaces);\n  if (fixPlaces) result = result.toFixed(decPlaces);\n  return units === "°" || this.units === "º" ? "".concat(result, "\\xB0") : "".concat(result, " ").concat(units);\n}\n/**\n * Assign the matching properties from the args object to the obj object.\n * This allows for settings to be passed in single line and set on the receiving object.\n * Almost all World Element objects accept such settings on their constructors.\n * @example\n * loadOptions(font, { face: "Helvetica", size: 12 });\n * @public\n * @param {object} obj Object where the settings will be loaded.\n * @param {object} args Object with matching properties from obj.\n */\n\nfunction loadOptions(obj, args) {\n  if (args) {\n    var keys = Object.keys(args);\n\n    for (var i = 0; i < keys.length; i += 1) {\n      if (Object.prototype.hasOwnProperty.call(obj, keys[i])) {\n        obj[keys[i]] = args[keys[i]];\n      }\n    }\n  }\n}\n/**\n * Finds the best fitting scale for a given range. Used for simulations where the scale of the data\n * changes dramatically.\n * @param {number} value Corresponds to the range between the minimum required value to be displayed and the maximum required value to be displayed.\n * @param {number} stepAmount Desired amount of steps within the range.\n * @returns {number} Magnitude of the step size. \n */\n\nfunction calcStepSize(value, stepAmount) {\n  // Calculate initial guess at step size\n  var tempStep = value / stepAmount; // Get the magnitude of the step size\n\n  var mag = Math.floor(Math.log(tempStep) / _Constants__WEBPACK_IMPORTED_MODULE_0__["LOG10"]);\n  var magPow = Math.pow(10, mag); // Calculate the most significant digit of the new step size\n\n  var magMsd = Math.round(tempStep / magPow + 0.5); // Promote the MSD to either 1, 2, or 5\n\n  if (magMsd > 5.0) {\n    magMsd = 10.0;\n  } else if (magMsd > 2.0) {\n    magMsd = 5.0;\n  } else if (magMsd > 1) {\n    magMsd = 2.0;\n  }\n\n  return magMsd * magPow;\n}\n/**\n * Generate a random number following a gaussian distribuition.\n * @public\n * @param {number} n Amount of iterations.\n * @returns {number} Random number that follows a gaussian distribuition.\n */\n\nfunction gaussian(n) {\n  var sum = 0;\n\n  for (var i = 0; i < n; i += 1) {\n    sum += Math.random();\n  }\n\n  return sum / n;\n}\n\n//# sourceURL=webpack:///./src/Utils.js?')},"./src/World.js":
/*!**********************!*\
  !*** ./src/World.js ***!
  \**********************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return World; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Constants */ "./src/Constants.js");\n/* harmony import */ var _Scale__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Scale */ "./src/Scale.js");\n/* harmony import */ var _figures_Axis__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./figures/Axis */ "./src/figures/Axis.js");\n/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./WorldElement */ "./src/WorldElement.js");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n\n\n\n\n/**\n * The World class handles the canvas and the drawing of elements. It manages all touch and mouse events,\n * as well as the scaling and axis settings. All elements drawn to the canvas must go through a World object.\n * @public\n * @class World\n */\n\nvar World =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} id HTML id of the div where the World will be initiated.\n   * @param {function} drawCallback Function called every 60fps to draw animations.\n   * @param {function} resizeCallback Function called every time the canvas gets resized.\n   */\n  function World(id, drawCallback, resizeCallback) {\n    _classCallCheck(this, World);\n\n    /**\n     * jQuery reference to the div container of the canvas.\n     * @type {object}\n     */\n    this.container = $(_Utils__WEBPACK_IMPORTED_MODULE_0__["fixId"](id));\n    /**\n     * HTML canvas created for the world. Important to note is that the canvas does not have an alpha\n     * channel. This is done to optimize the framerate.\n     * @type {object}\n     */\n\n    this.canvas = document.createElement("canvas", {\n      alpha: false\n    });\n    /**\n     * Context of the created canvas for the world.\n     * @type {object}\n     */\n\n    this.ctx = this.canvas.getContext("2d");\n    /**\n     * Pixel ratio of the device.\n     * @type {number}\n     */\n\n    this.pxRatio = _Utils__WEBPACK_IMPORTED_MODULE_0__["getPixelRatio"](this.ctx);\n    /**\n     * Scale object for the -x axis.\n     * Default scale is 50px per 1 unit.\n     * @type {Scale}\n     */\n\n    this.scaleX = new _Scale__WEBPACK_IMPORTED_MODULE_2__["default"](50, 1);\n    /**\n     * Scale object for the -y axis.\n     * Default scale is 50px per 1 unit.\n     * @type {Scale}\n     */\n\n    this.scaleY = new _Scale__WEBPACK_IMPORTED_MODULE_2__["default"](50, -1);\n    /**\n     * Width of the canvas in pixels.\n     * @type {number}\n     */\n\n    this.width = 0;\n    /**\n     * Width before resizing the canvas to the new width. Used to determine if a change\n     * has occured in the width in order to continue with the resizing process.\n     * @type {number}\n     */\n\n    this.prevWidth = 0;\n    /**\n     * Height of the canvas in pixels.\n     * @type {number}\n     */\n\n    this.height = 0;\n    /**\n     * Array of elements added to the world.\n     * @type {WorldElement[]}\n     */\n\n    this.elements = [];\n    /**\n     * Axis object used to draw the main axis.\n     * @type {Axis}\n     */\n\n    this.axis = new _figures_Axis__WEBPACK_IMPORTED_MODULE_3__["default"]();\n    /**\n     * Callback function for when the elements are drawn to the canvas.\n     * @type {function}\n     */\n\n    this.onDraw = _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](drawCallback) ? drawCallback : null;\n    /**\n     * Callback function for when the canvas gets resized.\n     * @type {function}\n     */\n\n    this.onResize = _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](resizeCallback) ? resizeCallback : null;\n    /**\n     * Callback function for when the mouse moves over the canvas.\n     * @type {function}\n     */\n\n    this.onMouseMove = null;\n    /**\n     * Simple background color for the canvas. If set to ther value than {@link COLORS}.WHITE the canvas\n     * will draw a rectangle with the new color at the beginning of every draw cycle. When the background\n     * renderer is enabled, the color value is no more relevant.\n     * @type {string}\n     */\n\n    this.color = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].WHITE;\n    /**\n     * Request id number from the requestAnimationFrame. Used to determine if the animation has\n     * started.\n     * @type {number}\n     */\n\n    this.started = null;\n    /**\n     * Mouse object containing all mouse properties and values.\n     * @type {object}\n     * @property {number} x Current -x position of the mouse in pixels.\n     * @property {number} y Current -y position of the mouse in pixels.\n     * @property {number} px Previous -x position of the mouse in pixels.\n     * @property {number} py Previous -y position of the mouse in pixels.\n     * @property {number} dx Change in the -x direction in pixels.\n     * @property {number} dy Change in the -y direction in pixels.\n     * @property {number} rx Real -x position of the mouse with respect to the axis in units.\n     * @property {number} ry Real -y position of the mouse with respect to the axis in units.\n     * @property {boolean} down Flag for when the mouse is pressed down over the canvas.\n     * @property {boolean} inCanvas Flag for when the mouse is over the canvas.\n     * @property {object} dragging Contains the currently dragged {@link WorldElement}. If no element is dragged then the value is equal to {@link DRAG_NOTHING}.\n     * @property {object} over Contains the element that the mouse is currently over. If no element is under the mouse then the value is equal to {@link OVER_NOTHING}.\n     * @property {string} cursor Current cursor of the canvas. Changes depending if it is over an element.\n     */\n\n    this.mouse = {\n      x: 0,\n      y: 0,\n      px: 0,\n      py: 0,\n      dx: 0,\n      dy: 0,\n      rx: 0,\n      ry: 0,\n      down: false,\n      inCanvas: false,\n      dragging: _Constants__WEBPACK_IMPORTED_MODULE_1__["DRAG_NOTHING"],\n      over: _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"],\n      cursor: _Constants__WEBPACK_IMPORTED_MODULE_1__["CURSOR"].DEFAULT\n    };\n    /**\n     * Background renderer object. It is disabled by default. \n     * @type {Renderer}\n     */\n\n    this.background = new _Renderer__WEBPACK_IMPORTED_MODULE_4__["default"]({\n      absolute: true,\n      enabled: false,\n      world: this\n    }); // Add the canvas to the container.\n\n    this.container.append(this.canvas); // Add the axis to the list of elements.\n\n    this.add(this.axis); // Bind all events to the canvas and force a resize event.\n\n    this.bindEventListeners();\n    this.resize();\n  }\n  /**\n   * Once it has been determined that the mouse is over an element and a dragging process has begun,\n   * the position of the object must be updated to follow the mouse. The function looks at the value of \n   * {@link WorldElement.mouseMoveStyle} to determine if the position should be updated in pixels or in\n   * real values. The position is updated by adding the change in the mouse\'s position to the element.\n   * This creates a smoother movement. Finally, the callback function {@link WorldElement.onMouseMove} is\n   * called.\n   * @private\n   */\n\n\n  _createClass(World, [{\n    key: "moveElements",\n    value: function moveElements() {\n      var element = this.mouse.dragging;\n\n      if (element) {\n        if (this.mouse.inCanvas) {\n          if (element.mouseMoveStyle === _Constants__WEBPACK_IMPORTED_MODULE_1__["MOVE_STYLE"].BY_PX) {\n            element.addPosition(this.mouse.dx, this.mouse.dy);\n          } else {\n            element.addPosition(this.mouse.rdx, this.mouse.rdy);\n\n            if (!this.axis.negative) {\n              if (element.position.x < 0) element.position.x = 0;\n              if (element.position.y < 0) element.position.y = 0;\n            }\n          }\n\n          if (element.renderer) element.renderer.rendered = false;\n          if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](element.onMouseMove)) element.onMouseMove(element);\n        }\n\n        element.dragging = this.mouse.down && this.mouse.inCanvas;\n        element.mouse_over = element.dragging;\n        this.mouse.dragging = element.dragging ? this.mouse.dragging : _Constants__WEBPACK_IMPORTED_MODULE_1__["DRAG_NOTHING"];\n        element.topmost(element.dragging && element.topmostOnDrag);\n      }\n    }\n    /**\n     * Obtain the mouse or touch coordinates from the event data obtained from the callback. The data\n     * is obtained in pixels, howevere it is also converted to real units using the scale provided. It\n     * also calcualtes the previous positio and the change in position in both units (pixels and real units).\n     * @private\n     */\n\n  }, {\n    key: "getMousePosition",\n    value: function getMousePosition(e) {\n      var m = this.mouse;\n      var rect = this.canvas.getBoundingClientRect(); // Determine if it is a touch event or mouse event.\n\n      var evt;\n\n      if (e && !e.clientX) {\n        if (e.touches) {\n          var _e$touches = _slicedToArray(e.touches, 1);\n\n          evt = _e$touches[0];\n        } else if (e.changedTouches) {\n          var _e$changedTouches = _slicedToArray(e.changedTouches, 1);\n\n          evt = _e$changedTouches[0];\n        }\n      } else {\n        evt = e;\n      } // Save previous values\n\n\n      m.px = m.x;\n      m.py = m.y; // Calculate position in pixels.\n\n      m.x = Math.floor(evt.clientX - rect.left);\n      m.y = Math.floor(evt.clientY - rect.top); // Convert position to real units.\n\n      m.rx = (m.x - this.axis.position.x) * this.scaleX.toUnits;\n      m.ry = (m.y - this.axis.position.y) * this.scaleY.toUnits; // Calculate the delta in pixels.\n\n      m.dx = m.x - m.px;\n      m.dy = m.y - m.py; // Calculate the delta in real units.\n\n      m.rdx = m.dx * this.scaleX.toUnits;\n      m.rdy = m.dy * this.scaleY.toUnits;\n    }\n    /**\n     * Find if the mouse is over an element. It queries the method {@link WorldElement.isMouseOver} to check\n     * if the mouse is over the bounding box of the element.\n     * @private\n     */\n\n  }, {\n    key: "isMouseOverElement",\n    value: function isMouseOverElement() {\n      if (this.mouse.dragging !== _Constants__WEBPACK_IMPORTED_MODULE_1__["DRAG_NOTHING"]) return;\n      var found = _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"];\n\n      for (var i = this.elements.length - 1; i >= 0; i -= 1) {\n        if (this.elements[i].isMouseOver() && this.elements[i].display && this.elements[i].isDraggable && found === _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"]) {\n          found = i;\n          this.elements[i].mouseOver = true;\n        } else {\n          this.elements[i].mouseOver = false;\n        }\n      }\n\n      this.setCursor(found === _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"] ? _Constants__WEBPACK_IMPORTED_MODULE_1__["CURSOR"].DEFAULT : this.elements[found].cursor);\n      this.mouse.over = found;\n    }\n    /**\n     * Binds a callback function to the mouse, touch and resize event listeners.\n     * @private\n     */\n\n  }, {\n    key: "bindEventListeners",\n    value: function bindEventListeners() {\n      var self = this;\n      var callbacks = {\n        mousemove: function mousemove(e) {\n          self.getMousePosition(e);\n          self.isMouseOverElement();\n          self.moveElements();\n          if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onMouseMove)) self.onMouseMove();\n        },\n        mouseenter: function mouseenter(e) {\n          e.preventDefault();\n          self.mouse.inCanvas = true;\n        },\n        mouseleave: function mouseleave(e) {\n          e.preventDefault();\n          self.mouse.inCanvas = false;\n        },\n        mousedown: function mousedown(e) {\n          e.preventDefault();\n          self.getMousePosition(e);\n          self.isMouseOverElement();\n\n          if (self.mouse.over !== _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"]) {\n            self.mouse.dragging = self.elements[self.mouse.over];\n            self.mouse.down = true;\n          }\n        },\n        mouseup: function mouseup(e) {\n          e.preventDefault();\n          self.mouse.down = false;\n          self.moveElements();\n        },\n        touchstart: function touchstart(e) {\n          self.getMousePosition(e);\n          self.isMouseOverElement();\n\n          if (self.mouse.over !== _Constants__WEBPACK_IMPORTED_MODULE_1__["OVER_NOTHING"]) {\n            if (e.cancelable) e.preventDefault();\n            self.mouse.dragging = self.elements[self.mouse.over];\n            self.mouse.down = true;\n            self.mouse.inCanvas = true;\n          }\n        },\n        touchend: function touchend(e) {\n          if (self.mouse.dragging !== _Constants__WEBPACK_IMPORTED_MODULE_1__["DRAG_NOTHING"]) {\n            if (e.cancelable) e.preventDefault();\n            self.mouse.down = false;\n            self.mouse.inCanvas = false;\n            self.moveElements();\n          }\n        },\n        resize: function resize(e) {\n          self.resize(e);\n        }\n      };\n      window.addEventListener("resize", callbacks.resize, false);\n      window.addEventListener("mouseup", callbacks.mouseup, false);\n      this.canvas.addEventListener("mousemove", callbacks.mousemove, false);\n      this.canvas.addEventListener("mouseenter", callbacks.mouseenter, false);\n      this.canvas.addEventListener("mouseleave", callbacks.mouseleave, false);\n      this.canvas.addEventListener("mousedown", callbacks.mousedown, false);\n      this.canvas.addEventListener("touchmove", callbacks.mousemove, false);\n      this.canvas.addEventListener("touchstart", callbacks.touchstart, false);\n      this.canvas.addEventListener("touchend", callbacks.touchend, false);\n    }\n    /**\n     * Callback function for the resize event. It recalculates the width of the main canvas as well\n     * as all rendered canvases and their elements. It calls the callback function {@link World.onResize}.\n     * @private\n     */\n\n  }, {\n    key: "resize",\n    value: function resize(e) {\n      this.width = this.container.width();\n      var widthChange = Math.abs(this.prevWidth - this.width);\n      this.prevWidth = this.width;\n      this.height = this.container.height();\n      this.pxRatio = _Utils__WEBPACK_IMPORTED_MODULE_0__["getPixelRatio"](this.ctx);\n      this.canvas.width = Math.floor(this.width * this.pxRatio);\n      this.canvas.height = Math.floor(this.height * this.pxRatio);\n      this.canvas.style.width = "".concat(this.width, "px");\n      this.canvas.style.height = "".concat(this.height, "px");\n      this.ctx.scale(this.pxRatio, this.pxRatio);\n\n      if (this.background.enabled) {\n        this.background.resize();\n      }\n\n      for (var i = 0; i < this.elements.length; i++) {\n        if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.elements[i].resize)) this.elements[i].resize();\n        if (this.elements[i].renderer) this.elements[i].renderer.resize();\n      }\n\n      if (this.started && _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.onResize) && widthChange > 0) this.onResize();\n    }\n    /**\n     * Sets a new cursor for when the mouse is over the canvas.\n     * @public\n     * @param {string} cursor Valid cursor type.\n     */\n\n  }, {\n    key: "setCursor",\n    value: function setCursor(cursor) {\n      if (cursor !== this.mouse.cursor) {\n        this.canvas.style.cursor = cursor;\n        this.mouse.cursor = cursor;\n      }\n    }\n    /**\n     * Main draw function. Runs at 60fps and can\'t be stopped once the world is started.\n     * Therefore it is constantly drawing to the canvas. This further optimizes the code needed\n     * to run simulations.\n     * Looks at the background object to check if it\'s enabled. If so, it draws the prerendered image\n     * to the main canvas, thus avoiding to draw the background every time from scratch.\n     * The draw method {@link WorldElement.draw} is called for every element added to the world.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      this.onDraw();\n      this.ctx.lineCap = "round";\n      this.ctx.lineJoin = "round";\n      this.ctx.clearRect(0, 0, this.width, this.height); // Background.\n\n      if (this.background.enabled) {\n        if (this.background.rendered) {\n          this.background.draw();\n        } else if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.background.callback)) {\n          this.background.begin();\n          this.background.callback(this.background.ctx, this.background.callbackArgs);\n          this.background.end();\n          this.background.draw();\n        }\n      } else if (this.color !== _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].WHITE) {\n        this.ctx.fillStyle = this.color;\n        this.ctx.rect(0, 0, this.width, this.height);\n        this.ctx.fill();\n      }\n\n      this.ctx.save();\n      this.ctx.translate(this.axis.position.x, this.axis.position.y);\n      this.elements.sort(function (a, b) {\n        return a.zIndex - b.zIndex;\n      });\n\n      for (var i = 0; i < this.elements.length; i++) {\n        if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.elements[i].draw) && this.elements[i].display) this.elements[i].draw();\n      }\n\n      this.ctx.restore();\n      this.start();\n    }\n    /**\n     * Adds a {@link WorldElement} to the world. Multiple elements can be added in a\n     * single add function, they only need to be separated by comma.\n     * @public\n     * @param  {...WorldElement} args Elements to add to the world.\n     */\n\n  }, {\n    key: "add",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      for (var i = 0; i < args.length; i++) {\n        if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](args[i]) && Object.prototype.hasOwnProperty.call(args[i], "valid")) {\n          args[i].setWorld(this);\n          if (args[i].renderer) args[i].renderer.setWorld(this);\n          this.elements.push(args[i]);\n        }\n      }\n    }\n    /**\n     * Remove a {@link WorldElement} from the world. Multiple elements can be removed\n     * in a single remove function, they only need to be separated by comma.\n     * @public\n     * @param {...WorldElement} args Elements to remove from the world.\n     */\n\n  }, {\n    key: "remove",\n    value: function remove() {\n      for (var i = 0; i < arguments.length; i++) {\n        var index = this.elements.indexOf(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n\n        if (index > -1) {\n          this.elements[index].world = undefined;\n          this.elements.splice(index, 1);\n        }\n      }\n    }\n    /**\n     * Starts the animation loop of 60fps.\n     * @private\n     */\n\n  }, {\n    key: "start",\n    value: function start() {\n      var self = this;\n\n      if (this.started === null && _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.onResize)) {\n        this.onResize();\n      }\n\n      this.started = requestAnimationFrame(function () {\n        self.draw();\n      });\n    }\n    /**\n     * Creates a screenshot of the canvas and saves it as sc.png in the same folder\n     * as the main file from the simulation. The canvas data is passed to a php file \n     * that only runs at localhost.\n     * @public\n     */\n\n  }, {\n    key: "export",\n    value: function _export() {\n      // Split url to get simulation path\n      // /newtondreams-bs4/fisica/sim/\n      var urlArray = window.location.pathname.split("/");\n      var simType = urlArray[2];\n      var simName = urlArray[3];\n      $.ajax({\n        data: {\n          data: this.canvas.toDataURL(),\n          path: "/".concat(simType, "/").concat(simName, "/")\n        },\n        url: "../../php/export.php",\n        dataType: "html",\n        type: "post",\n        success: function success(response) {\n          console.log(response);\n        }\n      });\n    }\n    /**\n     * Makes sure that a box of width (xMin + xMax) and height {yMin + yMax} fits in the canvas.\n     * This is used when the dimensions of objects changes dynamically.\n     * @public\n     * @param {number} xMin Minimum x value required to be displayed.\n     * @param {number} xMax Maximum x value required to be displayed.\n     * @param {number} yMin Minimum y value required to be displayed.\n     * @param {number} yMax Maximum y value required to be displayed.\n     * @param {number} scale Scale given to the range provided. If the scale is > 1 then the bounding box will be larger than the data and thus will result in a better fit.\n     */\n\n  }, {\n    key: "fit",\n    value: function fit(xMin, xMax, yMin, yMax, scale) {\n      var xRange = Math.abs(xMin) + Math.abs(xMax);\n      var yRange = Math.abs(yMin) + Math.abs(yMax);\n      var xScale = _Utils__WEBPACK_IMPORTED_MODULE_0__["calcStepSize"](xRange * scale, this.width / this.scaleX.px);\n      var yScale = _Utils__WEBPACK_IMPORTED_MODULE_0__["calcStepSize"](yRange * scale, this.height / this.scaleY.px);\n      this.scaleX.set(this.scaleX.px, Number.isNaN(xScale) ? 1 : xScale, this.scaleX.unit);\n      this.scaleY.set(this.scaleY.px, Number.isNaN(yScale) ? -1 : -yScale, this.scaleY.unit);\n      var xCenter = Math.floor(Math.abs(xMin) * this.scaleX.toPx + (this.width - xRange * this.scaleX.toPx) / 2);\n      var yCenter = Math.floor(Math.abs(yMin) * this.scaleY.toPx + (this.height - yRange * this.scaleY.toPx) / 2);\n      this.axis.setPosition(xCenter, yCenter);\n    }\n  }]);\n\n  return World;\n}();\n\n\n\n//# sourceURL=webpack:///./src/World.js?')},"./src/WorldElement.js":
/*!*****************************!*\
  !*** ./src/WorldElement.js ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorldElement; });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./src/Constants.js");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/Utils.js");\n/* harmony import */ var _World__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./World */ "./src/World.js");\n/* harmony import */ var _Font__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Font */ "./src/Font.js");\n/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Renderer */ "./src/Renderer.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n/* eslint-disable class-methods-use-this */\n\n\n\n\n\n/**\n * Parent class for all elements added to the world. Sets the basic properties\n * and methods all objects need.\n * @private\n * @class WorldElement\n */\n\nvar WorldElement =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   */\n  function WorldElement() {\n    _classCallCheck(this, WorldElement);\n\n    /**\n     * Sets the world where this element is found. It is automatically set when added to the world.\n     * @type {World}\n     */\n    this.world = null;\n    /**\n     * Flag for enabling or diabling this element.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    this.display = true;\n    /**\n     * Sets the z-index of the element.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    this.zIndex = 0;\n    /**\n     * A copy of the z-index value is stored here. When the element is dragged around, \n     * the element moves as a topmost element (only if {@link WorldElement.topmostOnDrag} \n     * is set to true). Therefore, the z-index of the element is increased and must \n     * be restored when the mouse gets released. \n     * The default value is 0.\n     * @type {number}\n     */\n\n    this.savedZIndex = 0;\n    /**\n     * Sets the position of the element. The units can be in pixels or in units.\n     * Must look at the value of {@link WorldElement.mouseMoveStyle}.\n     * @type {object}\n     * @property {number} x=0 -x coordinate.\n     * @property {number} y=0 -y coordinate.\n     */\n\n    this.position = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Flag for determining if the element will be a top-most element when dragged around.\n     * This means the element can be behind other objects, but when its dragged it will\n     * temporarily have a higher z-index.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.topmostOnDrag = false;\n    /**\n     * Flag for allowing the element to be dragged around.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.isDraggable = false;\n    /**\n     * Flag set when the element is being dragged around.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.dragging = false;\n    /**\n     * Sets a callback function for when the element is dragged around.\n     * @type {function}\n     */\n\n    this.onMouseMove = undefined;\n    /**\n     * Flag set when the mouse is over the element.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.mouseOver = false;\n    /**\n     * Sets the move style of the element.\n     * Default value is {@link MOVE_STYLE}.BY_UNITS.\n     * @type {string}\n     */\n\n    this.mouseMoveStyle = _Constants__WEBPACK_IMPORTED_MODULE_0__["MOVE_STYLE"].BY_UNITS;\n    /**\n     * Sets the cursor style when the mouse is over the element.\n     * Default value is {@link CURSOR}.POINTER.\n     * @type {string}\n     */\n\n    this.cursor = _Constants__WEBPACK_IMPORTED_MODULE_0__["CURSOR"].POINTER;\n    /**\n     * Sets the color in HEX format of the element. The use of it depends on the type of element.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n\n    this.color = _Constants__WEBPACK_IMPORTED_MODULE_0__["COLORS"].RED;\n    /**\n     * Sets the drawing scale of the element. \n     * Until now this property is only useful for {@link Picture} objects.\n     * Default value is 1.\n     * @type {number}\n     */\n\n    this.scale = 1;\n    /**\n     * Sets the rotation of the element. The units depend on the value of element\'s angle style.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    this.rotation = 0;\n    /**\n     * Flag used to determine if an object is a child of WorldElement. \n     * Only these objects have a {@link WorldElement.valid} flag.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    this.valid = true;\n    /**\n     * Sets the renderer used for the element.\n     * The default value is undefined.\n     * @type {Renderer}\n     */\n\n    this.renderer = undefined;\n    /**\n     * Sets the current width of the element.\n     * The default value is 0.\n     * @type {number}\n     */\n\n    this.width = 0;\n    /**\n     * Sets the current height of the element.\n     * The default value is 0.\n     * @type {number}\n     */\n\n    this.height = 0;\n    /**\n     * Sets the font of the element.\n     * The default value is Font().\n     * @type {Font}\n     */\n\n    this.font = new _Font__WEBPACK_IMPORTED_MODULE_3__["default"]();\n  }\n  /**\n   * Sets the world object where element will be drawn. It is automatically set by the\n   * world when the element is added to it.\n   * @private\n   * @param {World} world World of the element.\n   */\n\n\n  _createClass(WorldElement, [{\n    key: "setWorld",\n    value: function setWorld(world) {\n      this.world = world;\n      this.resize();\n    }\n    /**\n     * Function called when the canvas gets resized. Enables the different element types to handle\n     * resize events differently depending on their needs. This is an empty resize function.\n     * @private\n     */\n\n  }, {\n    key: "resize",\n    value: function resize() {}\n    /**\n     * Function called when the mouse moves to check if the pointer is over the element.\n     * The function is later replaced by the different types of elements.\n     * @public\n     * @returns {boolean} Returns false by default.\n     */\n\n  }, {\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return false;\n    }\n    /**\n     * Sets the scale of the element.\n     * @public\n     * @param {number} s Scale value for the element. Must be between 1 and 0.\n     */\n\n  }, {\n    key: "setScale",\n    value: function setScale(s) {\n      this.scale = s >= 0 && s <= 1 ? s : 0;\n      if (this.renderer) this.renderer.rendered = false;\n    }\n    /**\n     * Sets the color in HEX format of the element.\n     * @public\n     * @param {string} c Desired color in HEX format.\n     */\n\n  }, {\n    key: "setColor",\n    value: function setColor(c) {\n      this.color = c;\n      if (this.renderer) this.renderer.rendered = false;\n    }\n    /**\n     * Sets if the element is draggable.\n     * @public\n     * @param {boolean} s True sets the element as draggable, false otherwise.\n     */\n\n  }, {\n    key: "draggable",\n    value: function draggable(s) {\n      this.isDraggable = s;\n    }\n    /**\n     * Sets the element as a topmost element.\n     * @private\n     * @param {boolean} state True sets the z-index to 1000, false sets the z-index to the saved z-index.\n     */\n\n  }, {\n    key: "topmost",\n    value: function topmost(state) {\n      this.zIndex = state ? 1000 : this.savedZIndex;\n    }\n    /**\n     * Sets the z-index of the element. It is used to sort the drawing order of the element.\n     * Those with the lowest z-index are drawn first. The highest z-index is drawn last.\n     * @public\n     * @param {number} z Desired z-index.\n     */\n\n  }, {\n    key: "setZ",\n    value: function setZ(z) {\n      this.zIndex = z;\n      this.savedZIndex = z;\n    }\n    /**\n     * Sets the position of the element.\n     * @public\n     * @param {number} x -x coordinate.\n     * @param {number} y -y coordinate.\n     */\n\n  }, {\n    key: "setPosition",\n    value: function setPosition(x, y) {\n      this.position.x = _Utils__WEBPACK_IMPORTED_MODULE_1__["round"](x, 3);\n      this.position.y = _Utils__WEBPACK_IMPORTED_MODULE_1__["round"](y, 3);\n      if (this.renderer) this.renderer.rendered = false;\n    }\n    /**\n     * Adds the provided coordinates to the position.\n     * @public\n     * @param {number} x -x coordinate.\n     * @param {number} y -y coordinate.\n     */\n\n  }, {\n    key: "addPosition",\n    value: function addPosition(x, y) {\n      this.position.x += _Utils__WEBPACK_IMPORTED_MODULE_1__["round"](x, 3);\n      this.position.y += _Utils__WEBPACK_IMPORTED_MODULE_1__["round"](y, 3);\n      if (this.renderer) this.renderer.rendered = false;\n    }\n  }]);\n\n  return WorldElement;\n}();\n\n\n\n//# sourceURL=webpack:///./src/WorldElement.js?')},"./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no exports provided */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Constants */ "./src/Constants.js");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Utils */ "./src/Utils.js");\n/* harmony import */ var _World__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./World */ "./src/World.js");\n/* harmony import */ var _dom_Slider__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dom/Slider */ "./src/dom/Slider.js");\n/* harmony import */ var _figures_Vector__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./figures/Vector */ "./src/figures/Vector.js");\n/* harmony import */ var _figures_Ball__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./figures/Ball */ "./src/figures/Ball.js");\n/* harmony import */ var _dom_dom__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./dom/dom */ "./src/dom/dom.js");\n/* harmony import */ var _figures_Picture__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./figures/Picture */ "./src/figures/Picture.js");\n/* harmony import */ var _figures_Shape__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./figures/Shape */ "./src/figures/Shape.js");\n/* harmony import */ var _figures_Plot__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./figures/Plot */ "./src/figures/Plot.js");\n/* harmony import */ var _figures_Box__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./figures/Box */ "./src/figures/Box.js");\n\n\n\n\n\n\n\n\n\n\n\n\nwindow.requestAnimationFrame = function () {\n  function backupTimeout(callback) {\n    window.setTimeout(callback, 1000 / 60);\n  }\n\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || backupTimeout;\n}();\n\nwindow.cancelAnimationFrame = function () {\n  return window.cancelAnimationFrame || window.webkitCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || clearTimeout;\n}();\n/**\n * The libray is exposed to the window object through this object.\n * Constants can be found by accessing p$.constants.\n * Utils can be accessed through p$.utils.\n * @type {object}\n */\n\n\nvar p$ = _Constants__WEBPACK_IMPORTED_MODULE_0__;\np$.Box = _figures_Box__WEBPACK_IMPORTED_MODULE_10__["default"];\np$.Ball = _figures_Ball__WEBPACK_IMPORTED_MODULE_5__["default"];\np$.Box = _figures_Box__WEBPACK_IMPORTED_MODULE_10__["default"];\np$.Picture = _figures_Picture__WEBPACK_IMPORTED_MODULE_7__["default"];\np$.Plot = _figures_Plot__WEBPACK_IMPORTED_MODULE_9__["default"];\np$.Shape = _figures_Shape__WEBPACK_IMPORTED_MODULE_8__["default"];\np$.Slider = _dom_Slider__WEBPACK_IMPORTED_MODULE_3__["default"];\np$.Vector = _figures_Vector__WEBPACK_IMPORTED_MODULE_4__["default"];\np$.World = _World__WEBPACK_IMPORTED_MODULE_2__["default"];\np$.utils = _Utils__WEBPACK_IMPORTED_MODULE_1__;\np$.dom = _dom_dom__WEBPACK_IMPORTED_MODULE_6__;\nwindow.p$ = p$;\n\n//# sourceURL=webpack:///./src/app.js?')},"./src/dom/Slider.js":
/*!***************************!*\
  !*** ./src/dom/Slider.js ***!
  \***************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Slider; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\n/**\n * Class used to handle the sliders and their labels. \n * @public\n * @class Slider\n */\n\nvar Slider =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Slider properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Slider(opts) {\n    _classCallCheck(this, Slider);\n\n    /**\n     * Sets the HTML base id of the slider and label element.\n     * In order for the slider to match with a label, the id must be the same for both elements.\n     * The ending changes depending if it is a slider or a label.\n     * This class will look for the id: {id}_slider and {id}_label, where id is this value.\n     * Default value is "".\n     * @type {string} Base id of the slider and label.\n     */\n    this.id = "";\n    /**\n     * Sets the color in HEX format of the slider.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n\n    this.color = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].RED;\n    /**\n     * Stores a copy of the current color. Used when the slider is disabled and\n     * the color must be later restored when the slider is enabled again.\n     * Default value is {@link COLORS}.RED.\n     * @type {string}\n     */\n\n    this.prevColor = this.color;\n    /**\n     * Sets the units that the slider will use.\n     * Default value is "".\n     * @type {string}\n     */\n\n    this.units = "";\n    /**\n     * Sets the starting position of the slider.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    this.start = 0;\n    /**\n     * Sets the minimum value of the slider.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    this.min = 0;\n    /**\n     * Sets the maximum value of the slider.\n     * Default value is 1.\n     * @type {number}\n     */\n\n    this.max = 1;\n    /**\n     * Sets the amount of decimal places displayed on the label.\n     * Default value is 1.\n     * @type {number}\n     */\n\n    this.decPlaces = 1;\n    /**\n     * Flag for fixing the decimal places to the amount set in {@link Slider.decPlaces}.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    this.fixPlaces = false;\n    /**\n     * Sets a callback for when the slider changes value.\n     * Default value is undefined.\n     * @type {function}\n     */\n\n    this.callback = undefined;\n    /**\n     * Sets the arguments passed to the callback function set in {@link Slider.callback}.\n     * Default value is undefined.\n     * @type {*}\n     */\n\n    this.callbackArgs = undefined; // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](this, opts);\n    /**\n     * Sets the current value of the slider.\n     * Default value is {@link Slider.start}.\n     * @type {number}\n     */\n\n    this.value = this.start;\n    /**\n     * Raw slider element obtained by document.getElementById.\n     * @type {object}\n     */\n\n    this.slider = document.getElementById("".concat(this.id, "_slider"));\n    /**\n     * Raw label element obtained by jQuery.\n     * @type {object}\n     */\n\n    this.label = $(_Utils__WEBPACK_IMPORTED_MODULE_0__["fixId"]("".concat(this.id, "_label"))); // Set the current color to the slider.\n\n    this.setColor();\n    this.setLabel(this.start); // Init slider using the provided values.\n\n    var self = this;\n    /* eslint-disable-next-line no-undef */\n\n    noUiSlider.create(this.slider, {\n      start: this.start,\n      connect: "lower",\n      range: {\n        min: this.min,\n        max: this.max\n      }\n    }); // Configure the callback for when the slider changes value.\n\n    this.slider.noUiSlider.on("slide", function (values) {\n      self.value = _Utils__WEBPACK_IMPORTED_MODULE_0__["round"](values[0], self.decPlaces);\n      self.setLabel(values[0]);\n\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.callback)) {\n        self.callback(self.callbackArgs);\n      }\n    });\n  }\n  /**\n   * Sets a value in the label. This value is formatted accoding to the settings in the element.\n   * @public\n   * @param {number} value Desired value to set in the label.\n   */\n\n\n  _createClass(Slider, [{\n    key: "setLabel",\n    value: function setLabel(value) {\n      this.label.val(_Utils__WEBPACK_IMPORTED_MODULE_0__["formatValue"](value, this.units, this.decPlaces, this.fixPlaces));\n    }\n    /**\n     * Sets a value in the slider. This modifies the value in the label.\n     * @public\n     * @param {number} value Desired value to set in the slider.\n     */\n\n  }, {\n    key: "set",\n    value: function set(value) {\n      var parsed = _Utils__WEBPACK_IMPORTED_MODULE_0__["clamp"](value, this.min, this.max);\n      this.slider.noUiSlider.set(parsed);\n      this.setLabel(parsed);\n      this.value = _Utils__WEBPACK_IMPORTED_MODULE_0__["round"](parsed, this.decPlaces);\n\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.callback)) {\n        this.callback(this.callbackArgs);\n      }\n    }\n    /**\n     * Get the current value of the slider.\n     * @public\n     * @returns {number} The current value of the slider.\n     */\n\n  }, {\n    key: "get",\n    value: function get() {\n      return this.value;\n    }\n    /**\n     * Enable or disable the slider. When the slider is disabled the color changes to {@link COLORS}.GRAY.\n     * Once it changes back to enabled, its previous color is restored.\n     * @public\n     * @param {boolean} state Desired state of the slider.\n     */\n\n  }, {\n    key: "enabled",\n    value: function enabled(state) {\n      this.slider.setAttribute("disabled", state);\n\n      if (state) {\n        this.setColor(this.prevColor);\n      } else {\n        this.prevColor = this.color;\n        this.setColor(_Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY);\n      }\n    }\n    /**\n     * Change the color of the slider.\n     * @public\n     * @param {string} color Desired HEX color.\n     */\n\n  }, {\n    key: "setColor",\n    value: function setColor(color) {\n      if (color !== undefined) this.color = color;\n      $("#".concat(this.id, "_slider")).css("background", this.color);\n    }\n  }]);\n\n  return Slider;\n}();\n\n\n\n//# sourceURL=webpack:///./src/dom/Slider.js?')},"./src/dom/dom.js":
/*!************************!*\
  !*** ./src/dom/dom.js ***!
  \************************/
/*! exports provided: default, Option, Button, Select, Options */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return DOMElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Option", function() { return Option; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Button", function() { return Button; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return Select; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Options", function() { return Options; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n/**\n * Parent class for handling DOM elements.\n * @private\n * @class DOMElement\n */\n\nvar DOMElement =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} id HTML Id of the element.\n   */\n  function DOMElement(id) {\n    _classCallCheck(this, DOMElement);\n\n    /**\n     * jQuery reference to the element.\n     * @type {object}\n     */\n    this.obj = $(_Utils__WEBPACK_IMPORTED_MODULE_0__["fixId"](id));\n  }\n  /**\n   * Enable or disable the DOM element.\n   * @param {boolean} state Desired state of the element.\n   */\n\n\n  _createClass(DOMElement, [{\n    key: "enabled",\n    value: function enabled(state) {\n      this.obj.prop("disabled", !state);\n    }\n  }]);\n\n  return DOMElement;\n}();\n/**\n * Class used to handle a checkbox (<input type="checkbox">).\n * @public\n * @class Option\n * @example\n * // Given the following HTML checkbox:\n * //   <input type="checkbox" id="showPoints">\n * var showPoints = new Option("showPoints", function(val) {\n *  console.log(val);\n * });\n */\n\n\n\nvar Option =\n/*#__PURE__*/\nfunction (_DOMElement) {\n  _inherits(Option, _DOMElement);\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the checkbox.\n   * @param {function} onClick Callback function for when the checkbox changes state.\n   */\n  function Option(id, onClick) {\n    var _this;\n\n    _classCallCheck(this, Option);\n\n    // Extend DOMElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Option).call(this, id));\n    /**\n     * Callback function for when the checkbox changes state. The new state of the \n     * checkbox is passed to the callback function as a parameter.\n     * @type {function}\n     */\n\n    _this.onClick = onClick; // Set the callback.\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.obj.on("click", function () {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onClick)) {\n        if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onClick)) self.onClick(self.obj.prop("checked"));\n      }\n    });\n\n    return _this;\n  }\n\n  return Option;\n}(DOMElement);\n/**\n * Class used to handle a button (<button>).\n * @public\n * @class Button\n * @example\n * // Given the following HTML button:\n * //   <button type="button" id="start"></button>\n * var start = new Button("start", function() {\n *  console.log("clicked");\n * });\n */\n\nvar Button =\n/*#__PURE__*/\nfunction (_DOMElement2) {\n  _inherits(Button, _DOMElement2);\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the button.\n   * @param {function} onClick Callback function for when button is pressed.\n   */\n  function Button(id, onClick) {\n    var _this2;\n\n    _classCallCheck(this, Button);\n\n    // Extend DOMElement.\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(Button).call(this, id));\n    /**\n     * Callback function for when the button gets pressed.\n     * @type {function}\n     */\n\n    _this2.onClick = onClick; // Set the callback.\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this2));\n\n    _this2.obj.on("click", function () {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onClick)) self.onClick();\n    });\n\n    return _this2;\n  }\n\n  return Button;\n}(DOMElement);\n/**\n * Class used to handle select elements (<select>).\n * @public\n * @class Select\n * @example\n * // Given the following HTML select element:\n * //   <select id="fx" name="fx">\n * //     <option value="1">Option 1</option>\n * //     <option value="2">Option 2</option>\n * //     <option value="3">Option 3</option>\n * //   </select>\n * var fx = new Select("fx", function(val) {\n *  console.log(val);\n * });\n */\n\nvar Select =\n/*#__PURE__*/\nfunction (_DOMElement3) {\n  _inherits(Select, _DOMElement3);\n\n  /**\n   * @constructor\n   * @param {string} id HTML id of the select element.\n   * @param {function} onChange Callback function for when the selected option changes.\n   */\n  function Select(id, onChange) {\n    var _this3;\n\n    _classCallCheck(this, Select);\n\n    // Extend DOMElement.\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, id));\n    /**\n     * Callback function for when the selected option changes. The value of the selected \n     * option is passed to the callback function as a parameter.\n     * @type {function}\n     */\n\n    _this3.onChange = onChange; // Set the callback.\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this3));\n\n    _this3.obj.on(\'change\', function () {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onChange)) self.onChange(self.obj.find(":selected").val());\n    });\n\n    return _this3;\n  }\n\n  return Select;\n}(DOMElement);\n/**\n * Class used to handle a set of multiple radio buttons (<input type="radio">).\n * @public\n * @class Options\n * @example\n * // Given the following set of HTML radio buttons:\n * //   <input type="radio" name="graph_type" value="pos">\n * //   <input type="radio" name="graph_type" value="vel">\n * //   <input type="radio" name="graph_type" value="accel">\n * var graph_type = new Options("graph_type", function(val) {\n *    console.log(val);\n * });\n */\n\nvar Options =\n/*#__PURE__*/\nfunction () {\n  /**\n   * @constructor\n   * @param {string} name Name of the radio buttons.\n   * @param {function} onChange Callback function for when any of the radio buttons changes state.\n   */\n  function Options(name, onChange) {\n    _classCallCheck(this, Options);\n\n    /**\n     * Sets the id of the input using the name as an argument. This id is then used to obtain the\n     * jQuery object of the input.\n     * @type {string}\n     */\n    this.name = "input[name=\\"".concat(name, "\\"]");\n    /**\n     * jQuery reference to the input.\n     * @type {object}\n     */\n\n    this.obj = $(this.name);\n    /**\n     * Callback function for when a radio button is selected. The value of the selected \n     * radio button is passed to the callback function as a parameter.\n     * @type {function}\n     */\n\n    this.onChange = onChange; // Set the callback.\n\n    var self = this;\n    this.obj.change(function () {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](self.onChange)) {\n        self.onChange($("".concat(self.name, ":checked")).val());\n      }\n    });\n  }\n  /**\n   * Enables or disables the radio options.\n   * @param {boolean} state Desired state of the element.\n   */\n\n\n  _createClass(Options, [{\n    key: "enabled",\n    value: function enabled(state) {\n      if (state) {\n        this.obj.parent().removeClass(\'disabled\');\n      } else {\n        this.obj.parent().addClass(\'disabled\');\n      }\n    }\n  }]);\n\n  return Options;\n}();\n\n//# sourceURL=webpack:///./src/dom/dom.js?')},"./src/figures/Axis.js":
/*!*****************************!*\
  !*** ./src/figures/Axis.js ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Axis; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\n/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Renderer */ "./src/Renderer.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n\n/**\n * The Axis class is responsible for drawing the axis onto the canvas and setting the new\n * origin used for the canvas. All objects displayed will be referenced to the position of the axis.\n * Therefore, by changing its position the origin is also displaced.\n * @private\n * @class Axis\n */\n\nvar Axis =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Axis, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {number} [width=0] Initial width of the axis.\n   * @param {number} [height=0] Initial height of the canvas.\n   * @param {object} [opts] Object that contains valid Axis properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Axis(width, height, opts) {\n    var _this;\n\n    _classCallCheck(this, Axis);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Axis).call(this));\n    /**\n     * Sets the current height of the axis.\n     * @type {number}\n     */\n\n    _this.height = height || 0;\n    /**\n     * Sets the current width of the axis.\n     * @type {number}\n     */\n\n    _this.width = width || 0;\n    /**\n     * Flag for allowing the axis to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.isDraggable = true;\n    /**\n     * Sets the color of the main -x and -y axis.\n     * Default value is #CCCCCC.\n     * @type {string}\n     */\n\n    _this.color = "#CCCCCC";\n    /**\n     * Sets the color of the grid.\n     * Default value is #EEEEEE.\n     * @type {string}\n     */\n\n    _this.subAxisColor = "#EEEEEE";\n    /**\n     * Sets the cursor style when the mouse is over the axis.\n     * Default value is {@link CURSOR}.MOVE.\n     * @type {string}\n     */\n\n    _this.cursor = _Constants__WEBPACK_IMPORTED_MODULE_1__["CURSOR"].MOVE;\n    /**\n     * Sets the move style of the axis to change by pixels rather than by units.\n     * Default value is {@link MOVE_STYLE}.BY_PX.\n     * @type {string}\n     */\n\n    _this.mouseMoveStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["MOVE_STYLE"].BY_PX;\n    /**\n     * Stores the minimum dimensions that the axis can have given the current\n     * position and dimensions of the axis in both -x and -y directions.\n     * @type {number[]}\n     */\n\n    _this.min = [0, 0];\n    /**\n     * Stores the maximum dimensions that the axis can have given the current\n     * position and dimensions of the axis in both -x and -y directions.\n     * @type {number[]}\n     */\n\n    _this.max = [0, 0];\n    /**\n     * Flag for enabling the display of the -x axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.displayX = true;\n    /**\n     * Flag for enabling the display of the -y axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.displayY = true;\n    /**\n     * Sets the length of the ticks that are placed every "unit" in pixels.\n     * Default value is 12.\n     * @type {number}\n     */\n\n    _this.tickSize = 12;\n    /**\n     * Sets the length of the smaller ticks that are placed every "unit" / 2 in pixels.\n     * Default value is 8.\n     * @type {number}\n     */\n\n    _this.tickSizeSmall = 8;\n    /**\n     * Sets the distance between the axis and the unit label.\n     * Default value is 5.\n     * @type {number}\n     */\n\n    _this.textOffset = 5;\n    /**\n     * Flag for enabling the drawing of the negative part of the axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.negative = true;\n    /**\n     * Flag for enabling the drawing of the grid.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.grid = true;\n    /**\n     * Flag for placing the numbers on the outside of the first quadrant of the axis.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.outsideNumbers = true;\n    /**\n     * Sets the prerenderer for the Axis. It is enabled by default.\n     * @type {Renderer}\n     */\n\n    _this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_3__["default"]({\n      enabled: true,\n      isAxis: true,\n      parent: _assertThisInitialized(_assertThisInitialized(_this))\n    }); // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Updates the dimensions of the axis when the world gets resized.\n   * @private\n   */\n\n\n  _createClass(Axis, [{\n    key: "resize",\n    value: function resize() {\n      this.width = this.world.width;\n      this.height = this.world.height;\n    }\n    /**\n     * Tests if the mouse is over the axis. If the axis is enabled it will return true, since at all\n     * moments the mouse is over the axis.\n     * @private\n     * @returns {boolean} True if the axis is enabled, false otherwise.\n     */\n\n  }, {\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return this.display;\n    }\n    /**\n     * Draws the axis onto the selected canvas (renderer by default). First, the dimension of the axis\n     * are calculated in order for the axis to do not extend more than the visible dimensions of the canvas.\n     * With that, a grid is drawn and finally the -x and -y axes are drawn.\n     * @private\n     */\n\n  }, {\n    key: "drawAxis",\n    value: function drawAxis() {\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY;\n      var ctx = this.renderer.enabled ? this.renderer.ctx : this.world.ctx;\n      var width = this.width > 0 ? this.width : this.world.width;\n      var height = this.height > 0 ? this.height : this.world.height;\n      var minY = this.negative ? height - this.position.y : 0;\n      var maxY = -this.position.y;\n      var minX = this.negative ? -this.position.x : 0;\n      var maxX = width - this.position.x;\n      this.min = [minX, minY];\n      this.max = [maxX, maxY];\n      var fromX = Math.ceil(minX / scaleX.px) * scaleX.px;\n      var toX = Math.floor(maxX / scaleX.px) * scaleX.px;\n      var fromY = Math.ceil(maxY / scaleY.px) * scaleY.px;\n      var toY = Math.floor(minY / scaleY.px) * scaleY.px;\n      var x = 0;\n      var y = 0; // Draw the grid\n\n      if (this.grid) {\n        ctx.beginPath();\n        ctx.strokeStyle = this.subAxisColor; // Draw subdivisions of the Y axis\n\n        for (y = fromY; y <= toY; y += scaleY.px) {\n          if (y !== 0) {\n            ctx.moveTo(minX, y);\n            ctx.lineTo(maxX, y);\n          }\n        } // Draw subdivisions of the X axis\n\n\n        for (x = fromX; x <= toX; x += scaleX.px) {\n          if (x !== 0) {\n            ctx.moveTo(x, minY);\n            ctx.lineTo(x, maxY);\n          }\n        }\n\n        ctx.stroke();\n        ctx.closePath();\n      } // Draw Y axis ticks\n\n\n      ctx.beginPath();\n      ctx.strokeStyle = this.color;\n      this.font.toCtx(ctx); // Make sure the Y axis is visible, if it is then\n      // draw the Y axis and the ticks and labels\n\n      if (this.position.x < width + this.tickSize && this.position.x > -this.tickSize && this.displayY) {\n        // Draw Y axis\n        ctx.moveTo(0, minY);\n        ctx.lineTo(0, maxY); // Calculate the text offset for the labels\n\n        var xOffset = this.outsideNumbers ? -this.tickSize - this.textOffset : this.tickSize + this.textOffset;\n        ctx.textAlign = this.outsideNumbers ? "right" : "left"; // Draw ticks subdividing the X axis\n\n        for (y = fromY; y <= toY; y += scaleY.px) {\n          // Do not draw a big tick and the scale when y = 0.\n          if (y !== 0) {\n            // Draw big ticks\n            ctx.moveTo(-this.tickSize, y);\n            ctx.lineTo(+this.tickSize, y); // Draw scale\n\n            ctx.fillText(_Utils__WEBPACK_IMPORTED_MODULE_0__["round"](y * scaleY.toUnits, 3) + scaleY.unit, xOffset, y);\n          } // Draw small ticks\n\n\n          if (y - scaleY.px / 2 > maxY) {\n            ctx.moveTo(-this.tickSizeSmall, y - scaleY.px / 2);\n            ctx.lineTo(+this.tickSizeSmall, y - scaleY.px / 2);\n          }\n        } // Last tick\n\n\n        if (toY + scaleY.px / 2 < minY) {\n          ctx.moveTo(-this.tickSizeSmall, toY + scaleY.px / 2);\n          ctx.lineTo(+this.tickSizeSmall, toY + scaleY.px / 2);\n        }\n      } // Make sure the X axis is still visible, if it is then\n      // draw the X axis and the ticks and labels\n\n\n      if (this.position.y < height + this.tickSize && this.position.y > -this.tickSize && this.displayX) {\n        // Draw X Axis\n        ctx.moveTo(minX, 0);\n        ctx.lineTo(maxX, 0); // Calculate the text offset for the labels\n\n        var yOffset = this.outsideNumbers ? 7 + this.tickSize + this.textOffset : -7 - this.tickSize - this.textOffset;\n        ctx.textAlign = "center"; // Draw ticks subdividing the Y axis\n\n        for (x = fromX; x <= toX; x += scaleX.px) {\n          // Do not draw the big ticks when x = 0 unless no negative numbers are being displayed\n          if (x !== 0 || !this.negative) {\n            ctx.moveTo(x, -this.tickSize);\n            ctx.lineTo(x, +this.tickSize);\n          } // Draw scale when x is not 0 unless it no negative numbers are being displayed\n\n\n          if (x === 0 && !this.negative || x !== 0) {\n            ctx.fillText(_Utils__WEBPACK_IMPORTED_MODULE_0__["round"](x * scaleX.toUnits, 3) + scaleX.unit, x, yOffset);\n          } // Draw small ticks\n\n\n          if (x - scaleX.px / 2 > minX) {\n            ctx.moveTo(x - scaleX.px / 2, -this.tickSizeSmall);\n            ctx.lineTo(x - scaleX.px / 2, +this.tickSizeSmall);\n          }\n        } // Last tick\n\n\n        if (toX + scaleX.px / 2 < maxX) {\n          ctx.moveTo(toX + scaleX.px / 2, -this.tickSizeSmall);\n          ctx.lineTo(toX + scaleX.px / 2, +this.tickSizeSmall);\n        }\n      } // As the zero point is labed by the x axis, display it if the y axis is\n      // still being display.\n\n\n      if (this.displayY && !this.displayX) {\n        var _xOffset = this.outsideNumbers ? -this.tickSize - this.textOffset : this.tickSize + this.textOffset;\n\n        ctx.textAlign = this.outsideNumbers ? "right" : "left";\n        ctx.fillText("0".concat(scaleX.unit), _xOffset, 0);\n      }\n\n      ctx.stroke();\n      ctx.closePath();\n    }\n    /**\n     * Main draw function for the axis called by the World automatically. Since the axis is prerendered, \n     * this function handles the toggling between the renderer and the canvas.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (this.renderer.enabled) {\n        if (this.renderer.rendered) {\n          this.renderer.draw();\n        } else {\n          this.renderer.begin();\n          this.drawAxis();\n          this.renderer.end();\n          this.renderer.draw();\n        }\n      } else {\n        this.drawAxis();\n      }\n    }\n    /**\n     * Test if a point is visible given the current position of the axis and the canvas size.\n     * @public\n     * @param {number} x Coordinate -x to test.\n     * @param {number} y Coordinate -y to test.\n     * @returns {boolean} True if the point is visible, false otherwise.\n     */\n\n  }, {\n    key: "isPointVisible",\n    value: function isPointVisible(x, y) {\n      if (this.min[0] <= x && x <= this.max[0]) {\n        if (this.min[1] >= y && y >= this.max[1]) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }]);\n\n  return Axis;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Axis.js?')},"./src/figures/Ball.js":
/*!*****************************!*\
  !*** ./src/figures/Ball.js ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Ball; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n/**\n * The Ball class is a particle class used to draw round particles with the advantage that\n * they can be labeled and displayed with a gradient, giving a more realistic feel to the\n * particle.\n * @public\n * @class Ball\n */\n\nvar Ball =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Ball, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {number} [r=1] Radius of the charge in units.\n   * @param {object} [opts] Object that contains valid Ball properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Ball(r, opts) {\n    var _this;\n\n    _classCallCheck(this, Ball);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Ball).call(this));\n    /**\n     * Flag for allowing the ball to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.isDraggable = true;\n    /**\n     * Flag for allowing the ball to become a topmost object when its beging dragged,\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.topmostOnDrag = true;\n    /**\n     * Radius of the ball in units.\n     * Default value is 1.\n     * @type {number}\n     */\n\n    _this.r = r === undefined ? 1 : r;\n    /**\n     * Spot for writing a label on the ball. If the {@link Ball.upperLabel} is blank,\n     * then the lower label will be centered on the particle. If not, then it will be\n     * the lower label on the ball.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.lowerLabel = "";\n    /**\n     * Upper spot for writing a label on the bal..\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.upperLabel = "";\n    /**\n     * Flag for enabling a gradient on the ball. The color used for gradient\n     * is the one set in {@link Ball.color}.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.gradient = true; // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Tests if the mouse is over the ball.\n   * @private\n   * @returns {boolean} True if the mouse is over the ball, false otherwise.\n   */\n\n\n  _createClass(Ball, [{\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return _Utils__WEBPACK_IMPORTED_MODULE_0__["distSquared"](this.world.mouse.rx, this.world.mouse.ry, this.position.x, this.position.y) < Math.pow(this.r, 2);\n    }\n    /**\n     * Main draw function for the ball called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (this.r === 0) return;\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY,\n          ctx = _this$world.ctx;\n      var color = this.color;\n      var px = this.position.x * scaleX.toPx;\n      var py = this.position.y * scaleY.toPx;\n      var pr = this.r * scaleX.toPx;\n\n      if (this.gradient) {\n        color = ctx.createRadialGradient(px, py, 0, px, py, pr);\n        color.addColorStop(0, "white");\n        color.addColorStop(1, this.color);\n      }\n\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.arc(px, py, pr, 0, _Constants__WEBPACK_IMPORTED_MODULE_1__["TWO_PI"]);\n      ctx.fill();\n      ctx.closePath();\n\n      if (this.upperLabel !== "" || this.lowerLabel !== "") {\n        this.font.toCtx(ctx);\n        var offset = this.upperLabel !== "" && this.lowerLabel !== "" ? 7 : 0;\n        if (this.upperLabel !== "") ctx.fillText(this.upperLabel, px, py - offset);\n        if (this.lowerLabel !== "") ctx.fillText(this.lowerLabel, px, py + offset);\n      }\n    }\n    /**\n     * Gets a color depending on the value a charge has.\n     * If the charge is positive the color is {@link COLORS}.RED.\n     * If the charge is negative the color is {@link COLORS}.BLUE.\n     * If the charge is neutral the color is {@link COLORS}.GRAY.\n     * @public\n     * @param {number} charge Charge of the particle in coulombs.\n     * @returns {string} Color for the charge.\n     */\n\n  }], [{\n    key: "getChargeColor",\n    value: function getChargeColor(charge) {\n      if (charge > 0) {\n        return _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].RED;\n      }\n\n      if (charge < 0) {\n        return _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].BLUE;\n      }\n\n      return _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY;\n    }\n    /**\n     * Gets the sign a charge must have depending on the value a charge has.\n     * If the charge is positive the sign is "+".\n     * If the charge is negative the sign is "-".\n     * If the charge is neutral the sign is "".\n     * @public\n     * @param {number} charge  Charge of the particle in coulombs.\n     * @returns {string} Sign for the charge.\n     */\n\n  }, {\n    key: "getChargeSign",\n    value: function getChargeSign(charge) {\n      if (charge > 0) {\n        return "+";\n      }\n\n      if (charge < 0) {\n        return "-";\n      }\n\n      return "0";\n    }\n  }]);\n\n  return Ball;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Ball.js?')},"./src/figures/Box.js":
/*!****************************!*\
  !*** ./src/figures/Box.js ***!
  \****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Box; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\n/* harmony import */ var _box_Box_Text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./box/Box.Text */ "./src/figures/box/Box.Text.js");\n/* harmony import */ var _box_Box_Graph__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./box/Box.Graph */ "./src/figures/box/Box.Graph.js");\n/* harmony import */ var _box_Box_Label__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./box/Box.Label */ "./src/figures/box/Box.Label.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n\n\n\n/**\n * A Box allows for a window like object to be displayed in the world. This window object\n * has the possibility to display text, labels and graphs, completely isolated\n * from the settings of the world. \n * A box object does not have a width or a height. Instead, it takes the dimensions\n * of the objects it contains.\n * @public\n * @class Box\n */\n\nvar Box =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Box, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Box properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Box(opts) {\n    var _this;\n\n    _classCallCheck(this, Box);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Box).call(this));\n    /**\n     * Sets the width of the Box in pixels.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    _this.width = 0;\n    /**\n     * Sets the height of the Box in pixels.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    _this.height = 0;\n    /**\n     * Sets the color of the Box. The color must have the format as in {@link BOX_COLORS}.\n     * The default value is {@link BOX_COLORS}.BLUE.\n     * @type {object}\n     * @property {string} BACKGROUND Background color.\n     * @property {string} BORDER Border color.\n     */\n\n    _this.color = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].BLUE;\n    /**\n     * Sets the move style of the Box to change by pixels rather than by units.\n     * Default value is {@link MOVE_STYLE}.BY_PX.\n     * @type {string}\n     */\n\n    _this.mouseMoveStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["MOVE_STYLE"].BY_PX;\n    /**\n     * Flag for allowing the Box to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.isDraggable = true;\n    /**\n     * Sets the padding in pixels that the Box has. \n     * @type {object}\n     * @property {number} left=10 Left padding in pixels.\n     * @property {number} bottom=10 Bottom padding in pixels.\n     * @property {number} right=10 Right padding in pixels.\n     * @property {number} top=10 Top padding.\n     */\n\n    _this.padding = {\n      top: 10,\n      right: 10,\n      bottom: 10,\n      left: 10\n    };\n    /**\n     * Flag for displaying debug rectangles around the elements inside the Box.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.debug = false;\n    /**\n     * Sets the title for the Box.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.title = "";\n    /**\n     * Sets an array where all elements inside the Box are stored.\n     * Default value is []\n     * @type {Label[]|Text[]|Graph[]}\n     */\n\n    _this.elements = []; // Configure the font of the Box.\n\n    _this.font.set({\n      weight: 500,\n      size: 16,\n      baseline: "top",\n      align: "center",\n      color: _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY\n    }); // Apply user settings.\n\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Adds a Text to the Box.\n   * @param {number} width Width of the Text in pixels.\n   * @param {number} height Height of the Text in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   * @returns {Text} Newly added Text.\n   */\n\n\n  _createClass(Box, [{\n    key: "addText",\n    value: function addText(width, height, opts) {\n      var tb = new _box_Box_Text__WEBPACK_IMPORTED_MODULE_3__["default"](this, width, height, opts);\n      this.elements.push(tb);\n      this.calculateDimensions();\n      return tb;\n    }\n    /**\n     * Adds a Label to the Box.\n     * @param {number} width Width of the Label in pixels.\n     * @param {number} height Height of the Label in pixels.\n     * @param {object} [opts] Object that contains valid Label properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n     * @returns {Label} Newly added Label.\n     */\n\n  }, {\n    key: "addLabel",\n    value: function addLabel(width, height, opts) {\n      var tb = new _box_Box_Label__WEBPACK_IMPORTED_MODULE_5__["default"](this, width, height, opts);\n      this.elements.push(tb);\n      this.calculateDimensions();\n      return tb;\n    }\n    /**\n     * Adds a Graph to the Box.\n     * @param {number} width Width of the Graph in pixels.\n     * @param {number} height Height of the Graph in pixels.\n     * @param {object} [opts] Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n     * @returns {Graph} Newly added Graph.\n     */\n\n  }, {\n    key: "addGraph",\n    value: function addGraph(width, height, opts) {\n      var gb = new _box_Box_Graph__WEBPACK_IMPORTED_MODULE_4__["default"](this, width, height, opts);\n      this.elements.push(gb);\n      this.calculateDimensions();\n      return gb;\n    }\n    /**\n     * Sets the padding of the Box object.\n     * @public\n     * @param {number} top Top padding in pixels.\n     * @param {number} right Right padding in pixels.\n     * @param {number} bottom Bottom padding in pixels.\n     * @param {number} left Left padding in pixels.\n     */\n\n  }, {\n    key: "setPadding",\n    value: function setPadding(top, right, bottom, left) {\n      this.padding.top = top;\n      this.padding.right = right;\n      this.padding.bottom = bottom;\n      this.padding.left = left;\n      this.calculateDimensions();\n    }\n    /**\n     * Since the box takes the dimensions of the objects it contains, this\n     * function calculates these dimensions. The function must be called after setting\n     * the dimensions of the objects it contains.\n     * @public\n     */\n\n  }, {\n    key: "calculateDimensions",\n    value: function calculateDimensions() {\n      this.width = 0;\n      this.height = 0;\n\n      for (var i = 0; i < this.elements.length; i++) {\n        var minWidth = this.padding.left + this.padding.right + this.elements[i].position.x + this.elements[i].width;\n        if (this.width < minWidth) this.width = Math.ceil(minWidth);\n        var minHeight = this.padding.top + this.padding.bottom + this.elements[i].position.y + this.elements[i].height;\n        if (this.height < minHeight) this.height = Math.ceil(minHeight);\n      }\n    }\n    /**\n     * Tests if the mouse is over the box.\n     * @private\n     * @returns {boolean} True if the mouse is over the box, false otherwise.\n     */\n\n  }, {\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return _Utils__WEBPACK_IMPORTED_MODULE_0__["isCoordInside"](this.world.mouse.x, this.world.mouse.y, this.position.x + this.width / 2, this.position.y + this.height / 2, this.width / 2, this.height / 2);\n    }\n    /**\n     * Main draw function for the Box called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var ctx = this.world.ctx;\n      var x0 = this.position.x - this.world.axis.position.x;\n      var y0 = this.position.y - this.world.axis.position.y;\n      ctx.beginPath();\n      ctx.lineWidth = 3;\n      ctx.fillStyle = this.color.BACKGROUND;\n      ctx.strokeStyle = this.color.BORDER;\n      ctx.rect(x0, y0, this.width, this.height);\n      ctx.stroke();\n      ctx.fill();\n      ctx.closePath();\n      ctx.lineWidth = 1;\n\n      if (this.debug) {\n        ctx.beginPath();\n        ctx.strokeStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].RED;\n        ctx.rect(x0 + this.padding.left, y0 + this.padding.top, this.width - this.padding.left - this.padding.right, this.height - this.padding.top - this.padding.bottom);\n        ctx.stroke();\n        ctx.closePath();\n      }\n\n      if (this.title !== "") {\n        ctx.beginPath();\n        this.font.toCtx(ctx);\n        ctx.fillText(this.title, x0 + this.width / 2, y0 + this.padding.top);\n        ctx.closePath();\n      }\n\n      for (var i = 0; i < this.elements.length; i++) {\n        ctx.save();\n        ctx.translate(x0 + this.padding.left + this.elements[i].position.x, y0 + this.padding.top + this.elements[i].position.y);\n        if (this.debug && _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.elements[i].debug)) this.elements[i].debug();\n        if (this.elements[i].display) this.elements[i].draw(ctx, this.display.debug);\n        ctx.restore();\n      }\n    }\n  }]);\n\n  return Box;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Box.js?')},"./src/figures/Picture.js":
/*!********************************!*\
  !*** ./src/figures/Picture.js ***!
  \********************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Picture; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n/**\n * The Picture class is used to draw images on the screen. Extra attention must be made when waiting\n * for the image to load.\n * @public\n * @class Picture\n */\n\nvar Picture =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Picture, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {string} path Path for the image.\n   * @param {object} [opts] Object that contains valid Picture properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Picture(path, opts) {\n    var _this;\n\n    _classCallCheck(this, Picture);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Picture).call(this));\n    /**\n     * Width of the scaled image in units.\n     * @type {number}\n     */\n\n    _this.width = 0;\n    /**\n     * Height of the scaled image in units.\n     * @type {number}\n     */\n\n    _this.height = 0;\n    /**\n     * Flag for allowing the picture to be dragged around.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.isDraggable = true;\n    /**\n     * Image object where picture will be loaded.\n     * @type {object}\n     */\n\n    _this.img = new Image();\n    _this.img.src = path;\n    /**\n     * Flag for when the image has fully loaded. It is set after the onload event fires.\n     * @type {boolean}\n     */\n\n    _this.loaded = false;\n    /**\n     * Sets the pivot point around which the picture is drawn.\n     * Must be a number between 0 and 1.\n     * @type {object}\n     * @property {number} x X pivot point for the image.\n     * @property {number} y Y pivot point for the image.\n     */\n\n    _this.pivot = {\n      x: 0.5,\n      y: 0.5\n    }; // Callback function for when the image gets loaded.\n\n    var self = _assertThisInitialized(_assertThisInitialized(_this));\n\n    _this.img.onload = function () {\n      self.loaded = true;\n    }; // Apply user settings.\n\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Tests if the mouse is over the picture.\n   * @private\n   * @returns {boolean} True if the mouse is over the picture, false otherwise.\n   */\n\n\n  _createClass(Picture, [{\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return _Utils__WEBPACK_IMPORTED_MODULE_0__["isCoordInside"](this.world.mouse.rx, this.world.mouse.ry, this.position.x, this.position.y, this.width / 2, this.height / 2);\n    }\n    /**\n     * Tests if the image is fully loaded. This means that its properties such as the width are available.\n     * @public\n     * @returns {boolean} True if the image is fully loaded, false otherwise.\n     */\n\n  }, {\n    key: "isLoaded",\n    value: function isLoaded() {\n      return this.loaded && isFinite(this.img.width) && this.img.width != 0;\n    }\n    /**\n     * Main draw function for the picture called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY,\n          ctx = _this$world.ctx;\n      var w = Math.floor(this.img.width * this.scale);\n      var h = Math.floor(this.img.height * this.scale);\n      var px = this.position.x * scaleX.toPx;\n      var py = this.position.y * scaleY.toPx;\n      this.width = w * scaleX.toUnits;\n      this.height = h * scaleY.toUnits;\n      if (!this.loaded || !this.display) return; // Draw image.\n\n      if (this.rotation !== 0) {\n        ctx.save();\n        ctx.translate(px, py);\n        ctx.rotate(this.rotation);\n        ctx.drawImage(this.img, -w * this.pivot.x, -h * this.pivot.y, w, h);\n        ctx.restore();\n      } else {\n        ctx.drawImage(this.img, px - w * this.pivot.x, py - h * this.pivot.y, w, h);\n      }\n    }\n  }]);\n\n  return Picture;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_1__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Picture.js?')},"./src/figures/Plot.js":
/*!*****************************!*\
  !*** ./src/figures/Plot.js ***!
  \*****************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Plot; });\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n/**\n * The Plot class can be used to draw a line plot or a histogram on an axis. It\n * is also possible to add markers on top of a line plot with information\n * about the -x and -y values.\n * @public\n * @class Plot\n */\n\nvar Plot =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Plot, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {object} [opts] Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Plot(opts) {\n    var _this;\n\n    _classCallCheck(this, Plot);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Plot).call(this));\n    /**\n     * Array for storing the points.\n     * @type {object[]}\n     */\n\n    _this.points = [];\n    /**\n     * Array for storing the markers.\n     * @type {object[]}\n     */\n\n    _this.markers = [];\n    /**\n     * Sets the maximum amount of points the plot can have at a single time. Once \n     * the array of points fills up, the earliest points will be removed. \n     * This is done for memory purposes.\n     * Default value is 300.\n     * @type {number}\n     */\n\n    _this.limit = 300;\n    /**\n     * Sets the radius of the markers.\n     * Default value is 4.\n     * @type {number}\n     */\n\n    _this.markerRadius = 4;\n    /**\n     * Sets the linewidth of the plot in pixels.\n     * Default value is 2.\n     * @type {number}\n     */\n\n    _this.lineWidth = 2;\n    /**\n     * Sets the label for the plot. Only used when the plot is added to a {@link Graph} object.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.label = "";\n    /**\n     * Flag for drawing all points in the plot regardless if the point is outside the\n     * visible range of the plot.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.drawInvisiblePoints = false;\n    /**\n     * Sets the type of plot. Any other value than "line" will result in a histogram plot.\n     * Default value is "line".\n     * @type {string}\n     */\n\n    _this.style = "line";\n    /**\n     * When the plot is configured in histogram mode, the binWidth is the width of the\n     * bars in pixels.\n     * Default value is 3.\n     * @type {number}\n     */\n\n    _this.binWidth = 3; // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_1__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Sets a label for the plot. Only used when the plot is added to a {@link Graph} object.\n   * @public\n   * @param {string} label Label for the plot.\n   */\n\n\n  _createClass(Plot, [{\n    key: "setLabel",\n    value: function setLabel(label) {\n      this.label = label;\n    }\n    /**\n     * Adds a point to the plot.\n     * @public\n     * @param {number} x -x coordinate of the point to add.\n     * @param {number} y -y coordinate of the point to add.\n     */\n\n  }, {\n    key: "addPoint",\n    value: function addPoint(x, y) {\n      this.points.push([x, y]);\n\n      if (this.points.length > this.limit && this.limit > 0) {\n        this.points.shift();\n      }\n    }\n    /**\n     * Adds a marker to the plot.\n     * @public\n     * @param {number} x -x coordinate of the marker to add.\n     * @param {number} y -y coordinate of the marker to add.\n     * @param {object} args Object with other properties that a marker can have.\n     * @param {string} args.label Top label of the marker.\n     * @param {string} args.lower_label Bottom label of the marker.\n     * @param {string} args.color HEX color of the marker. Default value is the color of the plot.\n     * @param {boolean} args.top Flag for choosing if the labels will be drawn over the marker or below the marker. Default value is true.\n     */\n\n  }, {\n    key: "addMarker",\n    value: function addMarker(x, y, args) {\n      // eslint-disable-next-line prefer-const\n      var input = {\n        x: x,\n        y: y,\n        label: "",\n        lower_label: "",\n        color: this.color,\n        top: true\n      };\n      _Utils__WEBPACK_IMPORTED_MODULE_1__["loadOptions"](input, args);\n      this.markers.push(input);\n    }\n    /**\n     * Deletes all points and markers.\n     * @public\n     */\n\n  }, {\n    key: "clear",\n    value: function clear() {\n      this.points = [];\n      this.markers = [];\n    }\n    /**\n     * Main draw function for the Plot called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY,\n          ctx = _this$world.ctx;\n      var prevLineWidth = ctx.lineWidth; // Draw path.\n\n      if (this.style === "line") {}\n\n      ctx.beginPath();\n      ctx.lineWidth = this.lineWidth;\n      ctx.strokeStyle = this.color;\n      var disconnected = false;\n\n      for (var i = 0; i < this.points.length; i++) {\n        // Draw line plot.\n        var x = this.points[i][0] * scaleX.toPx;\n        var y = this.points[i][1] * scaleY.toPx;\n\n        if (this.style === "line") {\n          if (this.drawInvisiblePoints || this.world.axis.isPointVisible(x, y)) {\n            if (i === 0 || disconnected) {\n              ctx.moveTo(x, y);\n              disconnected = false;\n            } else {\n              ctx.lineTo(x, y);\n            }\n          } else {\n            disconnected = true;\n          }\n        } else {\n          // Draw histogram.\n          ctx.fillStyle = this.color;\n          ctx.rect(x - this.binWidth / 2, 0, this.binWidth, y);\n          ctx.fill();\n        }\n      }\n\n      ctx.stroke();\n      ctx.closePath(); // Draw markers.\n\n      this.font.set({\n        baseline: "middle"\n      });\n\n      for (var _i = 0; _i < this.markers.length; _i++) {\n        // Draw marker circles.\n        var _x = this.markers[_i].x * scaleX.toPx;\n\n        var _y = this.markers[_i].y * scaleY.toPx;\n\n        ctx.beginPath();\n        ctx.fillStyle = this.markers[_i].color;\n        ctx.arc(_x, _y, this.markerRadius, 0, _Constants__WEBPACK_IMPORTED_MODULE_0__["TWO_PI"]);\n        ctx.fill(); // ctx.closePath();\n        // Draw marker label box.\n        // Draw marker labels.\n\n        if (this.markers[_i].label !== "") {\n          var direction = this.markers[_i].top ? -1 : 1;\n          this.font.toCtx(ctx);\n\n          if (this.markers[_i].lower_label !== "") {\n            ctx.fillText(this.markers[_i].label, _x, _y + (this.markerRadius + 25) * direction);\n            ctx.fillText(this.markers[_i].lower_label, _x, _y + (this.markerRadius + 10) * direction);\n          } else {\n            ctx.fillText(this.markers[_i].label, _x, _y + (this.markerRadius + 10) * direction);\n          }\n        }\n      }\n\n      ctx.lineWidth = prevLineWidth;\n    }\n  }]);\n\n  return Plot;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Plot.js?')},"./src/figures/Shape.js":
/*!******************************!*\
  !*** ./src/figures/Shape.js ***!
  \******************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Shape; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _Renderer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Renderer */ "./src/Renderer.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n\n/**\n * The Shape class is used to draw shapes manually onto the world. The class provides similar\n * functionality to the methods found in the context on a canvas with key difference\n * that all coordinates passed to the methods in the Shape class take as parameters real\n * units. This makes it possible to draw shapes in the world with ease.\n * @public\n */\n\nvar Shape =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Shape, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {function} onDraw Function where the drawing process occurs.\n   * @param {object} [opts] Object that contains valid Shape properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Shape(onDraw, opts) {\n    var _this;\n\n    _classCallCheck(this, Shape);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Shape).call(this));\n    /**\n     * Sets the currently active shape style.\n     * Default value is {@link SHAPE_STYLE}.NONE.\n     * @type {number}\n     */\n\n    _this.shapeStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["SHAPE_STYLE"].NONE;\n    /**\n     * Sets the fill color for shapes.\n     * Default value is {@link BOX_COLORS}.GREEN.BACKGROUND.\n     * @type {string}\n     */\n\n    _this.fillColor = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].GREEN.BACKGROUND;\n    /**\n     * Sets the stroke color for shapes.\n     * Default value is {@link BOX_COLORS}.GREEN.BORDER.\n     * @type {string}\n     */\n\n    _this.strokeColor = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].GREEN.BORDER;\n    /**\n     * Sets the default angle style. This means all angles used as parameters are provided and\n     * set with this style.\n     * Default value is {@link ANGLE_STYLE}.DEG.\n     * @type {number}\n     */\n\n    _this.angleStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["ANGLE_STYLE"].DEG;\n    /**\n     * Sets if the coordinates are referenced to the previous coordinates given or are \n     * allways absolute.\n     * Default value is {@link SHAPE_STYLE}.NONE.\n     * @type {number}\n     */\n\n    _this.shapeMode = _Constants__WEBPACK_IMPORTED_MODULE_1__["SHAPE_STYLE"].NONE;\n    /**\n     * Sets the previous position used by {@link Shape.lineTo} or {@link Shape.moveTo}.\n     * This is used if the {@link Shape.shapeMode} is set to {@link SHAPE_STYLE}.ACCOMULATIVE.\n     * @type {object}\n     * @property {number} x -x coordinate.\n     * @property {number} y -y coordinate.\n     */\n\n    _this.prevPosition = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * Callback function where the shape will be drawn.\n     * @type {function}\n     */\n\n    _this.onDraw = _Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](onDraw) ? onDraw : undefined;\n    /**\n     * Sets the prerenderer for the Shape. It is disabled by default.\n     * @type {Renderer}\n     */\n\n    _this.renderer = new _Renderer__WEBPACK_IMPORTED_MODULE_2__["default"]({\n      enabled: false\n    }); // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Selects the currently active context for drawing the shape.\n   * @private\n   * @returns {object} The context where shape will be drawn.\n   */\n\n\n  _createClass(Shape, [{\n    key: "selectCtx",\n    value: function selectCtx() {\n      return this.renderer.enabled ? this.renderer.ctx : this.world.ctx;\n    }\n    /**\n     * Starts a drawing path.\n     * @private\n     * @param {number} [s] Desired shape style. See {@link SHAPE_STYLE}.\n     */\n\n  }, {\n    key: "begin",\n    value: function begin(s) {\n      var ctx = this.selectCtx();\n      this.shapeStyle = s !== undefined ? s : _Constants__WEBPACK_IMPORTED_MODULE_1__["SHAPE_STYLE"].NONE;\n      ctx.beginPath();\n    }\n    /**\n     * Closes a drawing path and fills and/or strokes it depending on the settings of\n     * {@link Shape.fillColor} and {@link Shape.strokeColor}.\n     * @public\n     */\n\n  }, {\n    key: "end",\n    value: function end() {\n      var ctx = this.selectCtx();\n\n      if (this.fillColor !== undefined) {\n        ctx.fillStyle = this.fillColor;\n        ctx.fill();\n      }\n\n      if (this.strokeColor !== undefined) {\n        ctx.strokeStyle = this.strokeColor;\n        ctx.stroke();\n      }\n\n      ctx.closePath();\n    }\n    /**\n     * Main draw function for the shape called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isFunction"](this.onDraw)) {\n        if (this.renderer.enabled) {\n          if (this.renderer.rendered) {\n            this.renderer.draw();\n          } else {\n            this.renderer.begin();\n            this.onDraw();\n            this.renderer.end();\n            this.renderer.draw();\n          }\n        } else {\n          this.save();\n          this.onDraw();\n          this.restore();\n        }\n      }\n    }\n    /**\n     * Sets the starting position of drawing path. The path must be then continued by \n     * calling {@link Shape.lineTo}.\n     * @public\n     * @param {number} x0 Starting -x coordinate for the current drawing path.\n     * @param {number} y0 Starting -y coodinate for the current drawing path.\n     */\n\n  }, {\n    key: "moveTo",\n    value: function moveTo(x0, y0) {\n      var ctx = this.selectCtx();\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY;\n      this.prevPosition.x = x0 * scaleX.toPx;\n      this.prevPosition.y = y0 * scaleY.toPx;\n      ctx.moveTo(this.prevPosition.x, this.prevPosition.y);\n    }\n    /**\n     * Draws a line to coordinates (x0, y0). Before using this function, the function\n     * {@link Shape.moveTo} must be used to set the starting point of the line. Multiple calls\n     * to this function can be used to create a shape.\n     * @public\n     * @param {number} x0 Next -x coordinate for the line.\n     * @param {number} y0 Next -y coordinate for the line.\n     */\n\n  }, {\n    key: "lineTo",\n    value: function lineTo(x0, y0) {\n      var ctx = this.selectCtx();\n      var _this$world2 = this.world,\n          scaleX = _this$world2.scaleX,\n          scaleY = _this$world2.scaleY;\n\n      if (this.shapeStyle === _Constants__WEBPACK_IMPORTED_MODULE_1__["SHAPE_STYLE"].ACCOMULATIVE) {\n        this.prevPosition.x += x0 * scaleX.toPx;\n        this.prevPosition.y += y0 * scaleY.toPx;\n        ctx.lineTo(this.prevPosition.x, this.prevPosition.y);\n      } else {\n        ctx.lineTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n      }\n    }\n    /**\n     * Sets a fill color.\n     * @public\n     * @param {string} fillColor Fill color in HEX format.\n     */\n\n  }, {\n    key: "fill",\n    value: function fill(fillColor) {\n      this.fillColor = fillColor;\n    }\n    /** Disables filling the shapes drawn.\n     * @public\n     */\n\n  }, {\n    key: "noFill",\n    value: function noFill() {\n      this.fillColor = undefined;\n    }\n    /**\n     * Sets a stroke color.\n     * @public\n     * @param {string} strokeColor Stroke color in HEX format.\n     */\n\n  }, {\n    key: "stroke",\n    value: function stroke(strokeColor) {\n      this.strokeColor = strokeColor;\n    }\n    /**\n     * Disables stroking the shapes drawn.\n     * @public\n     */\n\n  }, {\n    key: "noStroke",\n    value: function noStroke() {\n      this.strokeColor = undefined;\n    }\n    /**\n     * Saves the current state of the shape.\n     * @public\n     */\n\n  }, {\n    key: "save",\n    value: function save() {\n      var ctx = this.selectCtx();\n      ctx.save();\n    }\n    /**\n     * Restores the shape to the previously saved state.\n     * @public\n     */\n\n  }, {\n    key: "restore",\n    value: function restore() {\n      var ctx = this.selectCtx();\n      ctx.restore();\n    }\n    /**\n     * Sets the stroke weight of all lines.\n     * @public\n     * @param {number} weight Weight of the lines.\n     */\n\n  }, {\n    key: "strokeWeight",\n    value: function strokeWeight(weight) {\n      var ctx = this.selectCtx();\n      ctx.lineWidth = weight;\n    }\n    /**\n     * Sets the line dash of all lines.\n     * @public\n     * @param {number} i Length of the dash in pixels.\n     */\n\n  }, {\n    key: "lineDash",\n    value: function lineDash(i) {\n      var ctx = this.selectCtx();\n      ctx.setLineDash([i]);\n    }\n    /**\n     * Sets the rotation of the canvas. Before doing a rotation the shape must be saved and then\n     * restored. See {@link Shape.translate} for an example.\n     * @public\n     * @param {number} angle Desired rotation angle.\n     */\n\n  }, {\n    key: "rotate",\n    value: function rotate(angle) {\n      var ctx = this.selectCtx();\n      ctx.rotate(-_Utils__WEBPACK_IMPORTED_MODULE_0__["rad"](angle, this.angleStyle));\n    }\n    /**\n     * Sets the active angle style found in {@link ANGLE_STYLE}.\n     * @public\n     * @param {number} mode Desired angle style.\n     */\n\n  }, {\n    key: "angleStyle",\n    value: function angleStyle(mode) {\n      this.angleStyle = mode;\n    }\n    /**\n     * Translates the origin to a new point (x, y). Doing a translation requires to first save\n     * the context by calling {@link Shape.save}, and when finalizing the drawing by calling\n     * {@link Shape.restore}. This ensures that the translation doesn\'t mess with the origin of\n     * the axis.\n     * Translation is also required when doing a rotation around a point.\n     * @example\n     * // The following example will draw a 5x5 box at coordinates (1, 1) with a rotation of 90°.\n     * var s = new Shape();\n     * s.save()\n     * s.translate(1, 1)\n     * s.rotate(90)\n     * s.rect(0, 0, 5, 5);\n     * s.restore();\n     * @public\n     * @param {number} x -x coordinate to translate.\n     * @param {number} y -y coordinate to translate.\n     */\n\n  }, {\n    key: "translate",\n    value: function translate(x, y) {\n      var ctx = this.selectCtx();\n      var _this$world3 = this.world,\n          scaleX = _this$world3.scaleX,\n          scaleY = _this$world3.scaleY;\n      ctx.translate(x * scaleX.toPx, y * scaleY.toPx);\n    }\n    /**\n     * Draws a triangle given three sets of points.\n     * @public\n     * @param {number} x0 First -x coordinate of the triangle.\n     * @param {number} y0 First -y coordinate of the triangle.\n     * @param {number} x1 Second -x coordinate of the triangle.\n     * @param {number} y1 Second -y coordinate of the triangle.\n     * @param {number} x2 Third -x coordinate of the triangle.\n     * @param {number} y2 Third -y coordinate of the triangle.\n     */\n\n  }, {\n    key: "triangle",\n    value: function triangle(x0, y0, x1, y1, x2, y2) {\n      var ctx = this.selectCtx();\n      var _this$world4 = this.world,\n          scaleX = _this$world4.scaleX,\n          scaleY = _this$world4.scaleY;\n      this.begin();\n      ctx.moveTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n      ctx.lineTo(x1 * scaleX.toPx, y1 * scaleY.toPx);\n      ctx.lineTo(x2 * scaleX.toPx, y2 * scaleY.toPx);\n      ctx.lineTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n      this.end();\n    }\n    /**\n     * Draws a vector given a starting point and a magnitude and angle.\n     * @public\n     * @param {number} x0 Start -x coordinate of the vector.\n     * @param {number} y0 Start -y coordinate of the vector.\n     * @param {number} mag Magnitude of the vector.\n     * @param {number} angle Angle of the vector.\n     * @param {number} color Color of the vector in HEX format.\n     * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n     * @returns {number[]} Array with the -x and -y end coordinates of the vector.\n     */\n\n  }, {\n    key: "vectorFromMag",\n    value: function vectorFromMag(x0, y0, mag, angle, color, dashed) {\n      this.fill(color);\n      this.stroke(color);\n      var x1 = x0 + mag * _Utils__WEBPACK_IMPORTED_MODULE_0__["cos"](angle, this.angleStyle);\n      var y1 = y0 + mag * _Utils__WEBPACK_IMPORTED_MODULE_0__["sin"](angle, this.angleStyle);\n      this.vector(x0, y0, x1, y1, dashed);\n      return [x1, y1];\n    }\n    /**\n     * Draws a vector between two points. The vector is a line with an equilateral triangle at\n     * the tip of the vector.\n     * @public\n     * @param {number} _x0 Start -x coordinate of the vector.\n     * @param {number} _y0 Start -y coordinate of the vector.\n     * @param {number} _x1 End -x coordinate of the vector.\n     * @param {number} _y1 End -y coordinate of the vector.\n     * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n     */\n\n  }, {\n    key: "vector",\n    value: function vector(_x0, _y0, _x1, _y1, dashed) {\n      var ctx = this.selectCtx();\n      var _this$world5 = this.world,\n          scaleX = _this$world5.scaleX,\n          scaleY = _this$world5.scaleY;\n      var x0 = _x0 * scaleX.toPx;\n      var x1 = _x1 * scaleX.toPx;\n      var y0 = _y0 * scaleY.toPx;\n      var y1 = _y1 * scaleY.toPx;\n      var side = 0.2 * scaleX.toPx;\n      var height = side * _Constants__WEBPACK_IMPORTED_MODULE_1__["SIN60"];\n      var angle = Math.atan2(y1 - y0, x1 - x0);\n      var prevStrokeWeight = ctx.lineWidth;\n      this.begin();\n      this.strokeWeight(2);\n      if (dashed) this.lineDash(5);\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      this.end();\n      if (dashed) this.lineDash(1);\n      this.begin();\n\n      if (angle !== 0) {\n        this.save();\n        ctx.translate(x1, y1);\n        ctx.rotate(angle);\n        x1 = 0;\n        y1 = 0;\n      }\n\n      ctx.moveTo(x1 - height / 2, y1 + side / 2);\n      ctx.lineTo(x1 - height / 2, y1 - side / 2);\n      ctx.lineTo(x1 + height / 2, y1);\n      ctx.lineTo(x1 - height / 2, y1 + side / 2);\n      this.end();\n      this.strokeWeight(prevStrokeWeight);\n\n      if (angle !== 0) {\n        this.restore();\n      }\n    }\n    /**\n     * Draws an equilateral triangle centered around the coordinates (x, y).\n     * @public\n     * @param {number} x Center -x coordinate of the triangle.\n     * @param {number} y Center -y coordinate of the triangle.\n     * @param {number} s Side length of the triangle.\n     * @param {number} r Rotation of the triangle.\n     */\n\n  }, {\n    key: "equilateralTriangle",\n    value: function equilateralTriangle(x, y, s, r) {\n      var ctx = this.selectCtx();\n      var _this$world6 = this.world,\n          scaleX = _this$world6.scaleX,\n          scaleY = _this$world6.scaleY;\n      var side = s * scaleX.toPx;\n      var height = side * _Constants__WEBPACK_IMPORTED_MODULE_1__["SIN60"];\n      var x0 = x * scaleX.toPx;\n      var y0 = y * scaleY.toPx;\n      this.begin();\n\n      if (r !== undefined && r !== 0) {\n        this.save();\n        ctx.translate(x0, y0);\n        this.rotate(r);\n        x0 = 0;\n        y0 = 0;\n      }\n\n      ctx.moveTo(x0 - height / 2, y0 + side / 2);\n      ctx.lineTo(x0 - height / 2, y0 - side / 2);\n      ctx.lineTo(x0 + height / 2, y0);\n      ctx.lineTo(x0 - height / 2, y0 + side / 2);\n      this.end();\n\n      if (r !== undefined && r !== 0) {\n        this.restore();\n      }\n    }\n    /**\n     * Draws a rectangle on the world.\n     * @public\n     * @param {number} x0 Bottom left -x coordinate of the rectangle.\n     * @param {number} y0 Bottom left -y coordinate of the rectangle.\n     * @param {number} w Width of the rectangle.\n     * @param {number} h Height of the rectangle.\n     */\n\n  }, {\n    key: "rect",\n    value: function rect(x0, y0, w, h) {\n      var ctx = this.selectCtx();\n      var _this$world7 = this.world,\n          scaleX = _this$world7.scaleX,\n          scaleY = _this$world7.scaleY;\n      this.begin();\n      ctx.rect(x0 * scaleX.toPx, y0 * scaleY.toPx, w * scaleX.toPx, h * scaleY.toPx);\n      this.end();\n    }\n    /**\n     * Draws a line on the world.\n     * @public\n     * @param {number} x0 Start -x coordinate of the line. \n     * @param {number} y0 Start -y coordinate of the line.\n     * @param {number} x1 End -x coordinate of the line.\n     * @param {number} y1 End -y coordinate of the line.\n     */\n\n  }, {\n    key: "line",\n    value: function line(x0, y0, x1, y1) {\n      var ctx = this.selectCtx();\n      var _this$world8 = this.world,\n          scaleX = _this$world8.scaleX,\n          scaleY = _this$world8.scaleY;\n      this.begin();\n      ctx.moveTo(x0 * scaleX.toPx, y0 * scaleY.toPx);\n      ctx.lineTo(x1 * scaleX.toPx, y1 * scaleY.toPx);\n      this.end();\n    }\n    /**\n     * Draws an arc or a circle on the world.\n     * @public\n     * @param {number} x0 Center -x coordinate of the ellipse.\n     * @param {number} y0 Center -y coordinate of the ellipse.\n     * @param {number} r Radius of the ellipse.\n     * @param {number} start Start angle of the ellipse.\n     * @param {number} end End angle of the ellipse.\n     */\n\n  }, {\n    key: "arc",\n    value: function arc(x0, y0, r, start, end) {\n      var ctx = this.selectCtx();\n      var _this$world9 = this.world,\n          scaleX = _this$world9.scaleX,\n          scaleY = _this$world9.scaleY;\n      this.begin();\n      ctx.arc(x0 * scaleX.toPx, y0 * scaleY.toPx, r * scaleX.toPx, _Utils__WEBPACK_IMPORTED_MODULE_0__["rad"](start, this.angleStyle), _Utils__WEBPACK_IMPORTED_MODULE_0__["rad"](end, this.angleStyle));\n      this.end();\n    }\n    /**\n     * Draws an ellipse on the world.\n     * @public  \n     * @param {number} x0 Center -x coordinate of the ellipse.\n     * @param {number} y0 Center -y coordinate of the ellipse.\n     * @param {number} w Width of the ellipse.\n     * @param {number} h Height of the ellipse.\n     * @param {number} start Start angle of the ellipse.\n     * @param {number} end End angle of the ellipse.\n     */\n\n  }, {\n    key: "ellipse",\n    value: function ellipse(x0, y0, w, h, start, end) {\n      var ctx = this.selectCtx();\n      var _this$world10 = this.world,\n          scaleX = _this$world10.scaleX,\n          scaleY = _this$world10.scaleY;\n      this.begin();\n      ctx.ellipse(x0 * scaleX.toPx, y0 * scaleY.toPx, Math.abs(w * scaleX.toPx), Math.abs(h * scaleY.toPx), 0, _Utils__WEBPACK_IMPORTED_MODULE_0__["rad"](start, this.angleStyle), _Utils__WEBPACK_IMPORTED_MODULE_0__["rad"](end, this.angleStyle));\n      this.end();\n    }\n    /**\n     * Writes text on the world. The style of the text is set by {@link Shape.font}.\n     * @public\n     * @param {string} text Text to write.\n     * @param {number} x0 -x coordinate of the text.\n     * @param {number} y0 -y coordinate of the text.\n     */\n\n  }, {\n    key: "text",\n    value: function text(_text, x0, y0) {\n      var ctx = this.selectCtx();\n      var _this$world11 = this.world,\n          scaleX = _this$world11.scaleX,\n          scaleY = _this$world11.scaleY;\n      this.begin();\n      this.font.toCtx(ctx);\n      ctx.fillText(_text, x0 * scaleX.toPx, y0 * scaleY.toPx);\n      this.end();\n    }\n    /**\n     * Get the width of a text in units.\n     * @public\n     * @param {string} text Text to measure.\n     * @returns {number} Width of the text-\n     */\n\n  }, {\n    key: "textWidth",\n    value: function textWidth(text) {\n      var ctx = this.selectCtx();\n      var scaleX = this.world.scaleX;\n      return ctx.measureText(text).width * scaleX.toUnits;\n    }\n  }]);\n\n  return Shape;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_3__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Shape.js?')},"./src/figures/Vector.js":
/*!*******************************!*\
  !*** ./src/figures/Vector.js ***!
  \*******************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Vector; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n/**\n * The Vector class is used for handling vector quantities and for drawing them onto the world.\n * @public\n * @class Vector\n */\n\nvar Vector =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Vector, _WorldElement);\n\n  /**\n   * \n   * @param {object} [opts] Object that contains valid Vector properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Vector(opts) {\n    var _this;\n\n    _classCallCheck(this, Vector);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Vector).call(this));\n    /**\n     * Sets the -x magnitude of the vector.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    _this.x = 0;\n    /**\n     * Sets the -y magnitude of the vector.\n     * Default value is 0.\n     * @type {number}\n     */\n\n    _this.y = 0;\n    /**\n     * Flag for enabling the drawing of the vector\'s components.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.components = false;\n    /**\n     * Color of the components.\n     * Default value is {@link COLORS}.COMPONENT.\n     * @type {string}\n     */\n\n    _this.componentColor = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].COMPONENT;\n    /**\n     * Flag for drawing the components at the starting point of the vector.\n     * Default value is true.\n     * @type {boolean}\n     */\n\n    _this.componentsAtOrigin = true;\n    /**\n     * Flag for setting the angle style of the vector.\n     * Default value is {@link ANGLE_STYLE}.DEG.\n     * @type {number}\n     */\n\n    _this.angleStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["ANGLE_STYLE"].DEG; // Apply user settings.\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Tests if the mouse is over the vector.\n   * @private\n   * @returns {boolean} True if the mouse is over the vector, false otherwise.\n   */\n\n\n  _createClass(Vector, [{\n    key: "isMouseOver",\n    value: function isMouseOver() {\n      return _Utils__WEBPACK_IMPORTED_MODULE_0__["distSquared"](this.world.mouse.rx, this.world.mouse.ry, this.position.x, this.position.y) < 1;\n    }\n    /**\n     * Draws a vector between two points. The vector is a line with an equilateral triangle at\n     * the tip of the vector.\n     * @private\n     * @param {number} x0 Start -x coordinate of the vector in pixels.\n     * @param {number} y0 Start -y coordinate of the vector in pixels.\n     * @param {number} x1 End -x coordinate of the vector in pixels.\n     * @param {number} y1 End -y coordinate of the vector in pixels.\n     * @param {string} color Color of the vector in HEX format.\n     * @param {boolean} dashed Flag for drawing the vector with a dashed line.\n     */\n\n  }, {\n    key: "drawLine",\n    value: function drawLine(x0, y0, x1, y1, color, dashed) {\n      var ctx = this.world.ctx;\n      var dx = x1 - x0;\n      var dy = y1 - y0;\n      var mag = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));\n      var a1 = Math.atan2(dy, dx);\n      var a2 = _Constants__WEBPACK_IMPORTED_MODULE_1__["FIFTH_PI"];\n      var headlen = mag > 10 ? 10 : mag;\n      ctx.strokeStyle = color;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      if (dashed) ctx.setLineDash([7, 7]);\n      ctx.moveTo(x0, y0);\n      ctx.lineTo(x1, y1);\n      ctx.stroke();\n      ctx.closePath();\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      if (dashed) ctx.setLineDash([]);\n      ctx.lineTo(x1 - Math.floor(headlen * Math.cos(a1 - a2)), y1 - Math.floor(headlen * Math.sin(a1 - a2)));\n      ctx.lineTo(x1 - Math.floor(headlen * Math.cos(a1 + a2)), y1 - Math.floor(headlen * Math.sin(a1 + a2)));\n      ctx.lineTo(x1, y1);\n      ctx.fill();\n      ctx.stroke();\n      ctx.closePath();\n    }\n    /**\n     * Main draw function for the vector called by the World automatically.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      if (this.x === 0 && this.y === 0) return;\n      var _this$world = this.world,\n          scaleX = _this$world.scaleX,\n          scaleY = _this$world.scaleY,\n          ctx = _this$world.ctx;\n      var fromX = Math.floor(this.position.x * scaleX.toPx);\n      var toX = Math.floor(fromX + this.x * scaleX.toPx * this.scale);\n      var fromY = Math.floor(this.position.y * scaleY.toPx);\n      var toY = Math.floor(fromY + this.y * scaleY.toPx * this.scale);\n      var prevLineWidth = ctx.lineWidth;\n      ctx.lineWidth = 2;\n\n      if (this.components) {\n        this.drawLine(fromX, fromY, toX, fromY, this.componentColor, true);\n        this.drawLine(this.componentsAtOrigin ? fromX : toX, fromY, this.componentsAtOrigin ? fromX : toX, toY, this.componentColor, true);\n      }\n\n      this.drawLine(fromX, fromY, toX, toY, this.color, false);\n      ctx.lineWidth = prevLineWidth;\n    }\n    /**\n     * Set the vector\'s magnitude and angle.\n     * @public\n     * @param {number} mag Magnitude of the vector.\n     * @param {number} angle Angle of the vector.\n     */\n\n  }, {\n    key: "setMag",\n    value: function setMag(mag, angle) {\n      this.x = mag * _Utils__WEBPACK_IMPORTED_MODULE_0__["cos"](angle, this.angleStyle);\n      this.y = mag * _Utils__WEBPACK_IMPORTED_MODULE_0__["sin"](angle, this.angleStyle);\n    }\n    /**\n     * Set the -x and -y components of the vector.\n     * @public\n     * @param {number|object} x -x component of the vector. If x is another vector, the components of this vector are used to set the target vector.\n     * @param {number} [y] -y component of the vector.\n     */\n\n  }, {\n    key: "set",\n    value: function set(x, y) {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](x)) {\n        this.x = x.x || 0;\n        this.y = x.y || 0;\n      } else {\n        this.x = x || 0;\n        this.y = y || 0;\n      }\n    }\n    /**\n     * Add a value to the -x and -y components of the vector.\n     * @public\n     * @param {number|object} x Value to add to the -x component of the vector. If x is another vector, the components of this vector are added to the target vector.\n     * @param {number} [y] Value to add to the -y component of the vector.\n     */\n\n  }, {\n    key: "add",\n    value: function add(x, y) {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](x)) {\n        this.x += x.x || 0;\n        this.y += x.y || 0;\n      } else {\n        this.x += x || 0;\n        this.y += y || 0;\n      }\n    }\n    /**\n     * Subtract a value to the -x and -y components of the vector.\n     * @public\n     * @param {number|object} x Value to subtract to the -x component of the vector. If x is another vector, the components of this vector are subtracted to the target vector.\n     * @param {number} [y] Value to subtract to the -y component of the vector.\n     */\n\n  }, {\n    key: "sub",\n    value: function sub(x, y) {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](x)) {\n        this.x -= x.x || 0;\n        this.y -= x.y || 0;\n      } else {\n        this.x -= x || 0;\n        this.y -= y || 0;\n      }\n    }\n    /**\n      * Multiply the -x and -y components of the vector by a constant value.\n      * @public\n      * @param {number|object} x Value that multiplies the -x component of the vector. If x is another vector, the components of this vector are multiplied with the target vector.\n      * @param {number} [y] Value that multiplies the -y component of the vector.\n      */\n\n  }, {\n    key: "mult",\n    value: function mult(x, y) {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](x)) {\n        this.x *= x.x || 0;\n        this.y += x.y || 0;\n      } else if (y === undefined) {\n        this.x *= x || 0;\n        this.y *= x || 0;\n      } else {\n        this.x *= x || 0;\n        this.y *= y || 0;\n      }\n    }\n    /**\n     * Get a readable format of the vector\'s components.\n     * @public\n     * @returns {string} Readable string with the vector\'s -x and -y components.\n     */\n\n  }, {\n    key: "print",\n    value: function print() {\n      return "x: ".concat(this.x, " y: ").concat(this.y);\n    }\n    /**\n     * Dot product between two vectors.\n     * @public\n     * @param {number|object} x -x component of the vector used for calculating the dot product. If x is another vector, the dot product is calculated between x and the target vector.\n     * @param {number} [y]  -y component of the vector used for calculating the dot product.\n     * @return {number} The dot product between the two vector.\n     */\n\n  }, {\n    key: "dot",\n    value: function dot(x, y) {\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isObject"](x)) {\n        return this.dot(x.x, x.y);\n      }\n\n      return this.x * x + this.y * y;\n    }\n    /**\n     * Get the magnitude of the vector.\n     * @public\n     * @returns {number} The magnitude of the vector.\n     */\n\n  }, {\n    key: "mag",\n    value: function mag() {\n      return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    }\n    /**\n     * Get the angle of the vector. The type of angle depends on the value of\n     * {@link Vector.angleStyle}.\n     * @public\n     * @returns {number} The angle of the vector.\n     */\n\n  }, {\n    key: "angle",\n    value: function angle() {\n      if (this.angleStyle === _Constants__WEBPACK_IMPORTED_MODULE_1__["ANGLE_STYLE"].DEG) {\n        return Math.atan2(this.y, this.x) * _Constants__WEBPACK_IMPORTED_MODULE_1__["RAD_TO_DEG"];\n      }\n\n      return Math.atan2(this.y, this.x);\n    }\n    /**\n     * Gets the standard angle of the vector. This means that the angle\n     * ranges from 0 to 360°. Only works when the angleStyle is in degrees.\n     * @public\n     * @returns {number} The standard angle.\n     */\n\n  }, {\n    key: "standardAngle",\n    value: function standardAngle() {\n      var a = this.angle();\n\n      if (a < 0) {\n        return a + 360;\n      }\n\n      return a;\n    }\n    /**\n     * Get the magnitude squared of the vector.\n     * @public\n     * @returns {number} The magnitude squared of the vector.\n     */\n\n  }, {\n    key: "magSquared",\n    value: function magSquared() {\n      return Math.pow(this.x, 2) + Math.pow(this.y, 2);\n    }\n  }]);\n\n  return Vector;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/Vector.js?')},"./src/figures/box/Box.Graph.js":
/*!**************************************!*\
  !*** ./src/figures/box/Box.Graph.js ***!
  \**************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Graph; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../WorldElement */ "./src/WorldElement.js");\n/* harmony import */ var _Scale__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../Scale */ "./src/Scale.js");\n/* harmony import */ var _Axis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../Axis */ "./src/figures/Axis.js");\n/* harmony import */ var _Plot__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Plot */ "./src/figures/Plot.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n\n\n\n/**\n * A Graph Box allow for {@link Plot} elements to be displayed in the box using a different scale to\n * the main axis in the world.\n * A Graph object is created by calling the method {@link Box.addGraph} on the parent Box.\n * @private\n */\n\nvar Graph =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Graph, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the graph in pixels.\n   * @param {number} height Height of the graph in pixels.\n   * @param {object} [opts] Object that contains valid Graph properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Graph(box, width, height, opts) {\n    var _this;\n\n    _classCallCheck(this, Graph);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Graph).call(this));\n    /**\n     * Sets the parent box where te Graph will be placed.\n     * @type {Box}\n     */\n\n    _this.box = box;\n    /**\n     * Sets the width of the Graph in pixels.\n     * @type {number}\n     */\n\n    _this.width = width;\n    /**\n     * Sets the height of the Graph in pixels.\n     * @type {number}\n     */\n\n    _this.height = height;\n    /**\n     * Array containing the plots displayed on the graph.\n     * @type {Plot[]}\n     */\n\n    _this.plots = [];\n    /**\n     * Flag for enabling the display of the plot\'s legend. Usually turned on when\n     * more than one plot is being displayed.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.legends_enabled = false;\n    /**\n     * Sets the padding in pixels that the graph has. The padding is used to display\n     * the title, x label, and y label. The padding is then adjusted depending on the\n     * value of {@link Graph.legends_enabled} to accomodate the display of the legends.\n     * @type {object}\n     * @property {number} left=25 Left padding in pixels.\n     * @property {number} bottom=25 Bottom padding in pixels.\n     * @property {number} right=10 Right padding in pixels.\n     * @property {number} top=10 Top padding.\n     */\n\n    _this.padding = {\n      left: 25,\n      bottom: 25,\n      right: 10,\n      top: 10\n    };\n    /**\n     * Scale object for the -x axis.\n     * Default scale is 20px per 1 unit.\n     * @type {Scale}\n     */\n\n    _this.scaleX = new _Scale__WEBPACK_IMPORTED_MODULE_3__["default"](20, 1, "");\n    /**\n     * Scale object for the -y axis.\n     * Default scale is 20px per 1 unit.\n     * @type {Scale}\n     */\n\n    _this.scaleY = new _Scale__WEBPACK_IMPORTED_MODULE_3__["default"](20, -1, "");\n    /**\n     * Sets the title for the graph.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.title = "";\n    /**\n     * Sets the label for the -x axis.\n     * Default value is "x".\n     * @type {string}\n     */\n\n    _this.xlabel = "x";\n    /**\n     * Sets the label for the -y axis.\n     * Default value is "y".\n     * @type {string}\n     */\n\n    _this.ylabel = "y";\n    /**\n     * Array that stores the position of the axis. See {@link Graph.setAxisPosition} for\n     * more details.\n     * Default value is ["left", "bottom"].\n     * @type {string[]}\n     */\n\n    _this.axisPosition = ["left", "bottom"];\n    /**\n     * Context of the cavas where the Graph is drawn. The canvas is saved\n     * in order for the plots to be able to find it, since the parent of the Plot is\n     * this object.\n     * @type {object}\n     */\n\n    _this.ctx = undefined;\n    /**\n     * Axis object used to draw the graph axis.\n     * @type {Axis}\n     */\n\n    _this.axis = new _Axis__WEBPACK_IMPORTED_MODULE_4__["default"](_this.width - _this.padding.left - _this.padding.right, _this.height - _this.padding.top - _this.padding.bottom, {\n      world: _assertThisInitialized(_assertThisInitialized(_this)),\n      color: _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY,\n      subAxisColor: "#DDDDDD",\n      textOffset: 2,\n      tickSize: 4,\n      tickSizeSmall: 2,\n      outsideNumbers: false\n    }); // Configure the font used on the axis.\n\n    _this.font.set({\n      size: 14,\n      color: _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY,\n      baseline: "top"\n    }); // Configure the axis font and disable the prerenderer.\n\n\n    _this.axis.font.color = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY;\n    _this.axis.renderer.enabled = false; // Configure the axis position.\n\n    _this.setAxisPosition(); // Apply user settings.\n\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Sets the origin of the axis. \n   * The -x axis has the following position options: center, right, left.\n   * The -y axis has the following position options: center, top, bottom.\n   * @public\n   * @param {string} [xPos] Desired position for the -x axis.\n   * @param {string} [yPos] Desired position for the -y axis.\n   */\n\n\n  _createClass(Graph, [{\n    key: "setAxisPosition",\n    value: function setAxisPosition(xPos, yPos) {\n      if (xPos !== undefined) this.axisPosition[0] = xPos;\n      if (yPos !== undefined) this.axisPosition[1] = yPos;\n      var x = 0;\n      var y = this.axis.height;\n\n      if (this.axisPosition[0] === "center") {\n        x = this.axis.width / 2;\n      } else if (this.axisPosition[0] === "right") {\n        x = this.axis.width;\n      }\n\n      if (this.axisPosition[1] === "top") {\n        y = 0;\n      } else if (this.axisPosition[1] === "center") {\n        y = this.axis.height / 2;\n      }\n\n      this.axis.setPosition(x, y);\n    }\n    /**\n     * Calculates the dimensions of the axis based on the total Graph dimensions and\n     * the padding set. Then the calculated dimensions are set to the axis.\n     * @private\n     */\n\n  }, {\n    key: "setAxisDimensions",\n    value: function setAxisDimensions() {\n      this.axis.width = this.width - this.padding.left - this.padding.right;\n      this.axis.height = this.height - this.padding.top - this.padding.bottom;\n      this.setAxisPosition();\n    }\n    /**\n     * Change the dimensions of the Graph object.\n     * @public\n     * @param {number} width Width of the graph.\n     * @param {number} height Height of the graph.\n     */\n\n  }, {\n    key: "setDimensions",\n    value: function setDimensions(width, height) {\n      this.width = width;\n      this.height = height;\n      this.setAxisDimensions();\n    }\n    /**\n     * Controls if the legens are displayed. If true, then the padding is adjusted\n     * to make space for it.\n     * @public\n     * @param {boolean} state Desired state for the legends.\n     */\n\n  }, {\n    key: "legends",\n    value: function legends(state) {\n      this.legends_enabled = state;\n\n      if (this.legends_enabled) {\n        this.padding.top = 25;\n      } else {\n        this.padding.top = 10;\n      }\n\n      this.setAxisDimensions();\n    }\n    /**\n     * Sets the padding of the Graph object.\n     * @public\n     * @param {number} top Top padding in pixels.\n     * @param {number} right Right padding in pixels.\n     * @param {number} bottom Bottom padding in pixels.\n     * @param {number} left Left padding in pixels.\n     */\n\n  }, {\n    key: "setPadding",\n    value: function setPadding(top, right, bottom, left) {\n      this.padding.top = top;\n      this.padding.right = right;\n      this.padding.bottom = bottom;\n      this.padding.left = left;\n      this.axis.width = this.width - left - right;\n      this.axis.height = this.height - top - bottom;\n      this.setAxisDimensions();\n    }\n    /**\n     * Adds a {@link Plot} to the graph.\n     * @public\n     * @param {object} opts Object that contains valid Plot properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n     * @returns {Plot} The newly created plot object.\n     */\n\n  }, {\n    key: "addPlot",\n    value: function addPlot(opts) {\n      var plot = new _Plot__WEBPACK_IMPORTED_MODULE_5__["default"](opts);\n      plot.setWorld(this);\n      this.plots.push(plot);\n      return plot;\n    }\n    /**\n     * Sets the labels for the graph. Usually the graph title is left blank, and the box\'s title\n     * is used as title.\n     * @public\n     * @param {string} title Title of the graph.\n     * @param {string} xlabel Label for the -x axis.\n     * @param {string} ylabel Label for the -y axis.\n     */\n\n  }, {\n    key: "setLabels",\n    value: function setLabels(title, xlabel, ylabel) {\n      this.title = title;\n      this.xlabel = xlabel;\n      this.ylabel = ylabel;\n    }\n    /**\n     * Debug function used to draw a box around the dimensions of the Graph object. It\n     * also draws boxes around the padding sections with different fill colors in order\n     * to distinguish between them.\n     * The boxes are only drawn if the parent box has the flag {@link Box.debug} enabled.\n     * @private\n     */\n\n  }, {\n    key: "debug",\n    value: function debug() {\n      var ctx = this.box.world.ctx; // Section above graph.\n\n      ctx.beginPath();\n      ctx.fillStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].GREEN.BACKGROUND;\n      ctx.rect(0, 0, this.width - this.padding.right, this.padding.top);\n      ctx.fill();\n      ctx.closePath(); // Section bellow graph.\n\n      ctx.beginPath();\n      ctx.fillStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].PURPLE.BACKGROUND;\n      ctx.rect(0, this.height - this.padding.bottom, this.width, this.padding.bottom);\n      ctx.fill();\n      ctx.closePath(); // Section left of graph.\n\n      ctx.beginPath();\n      ctx.fillStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["BOX_COLORS"].YELLOW.BACKGROUND;\n      ctx.rect(0, 0, this.padding.left, this.height - this.padding.bottom);\n      ctx.fill();\n      ctx.closePath(); // Circle at the origin of the axis.\n\n      ctx.beginPath();\n      ctx.arc(this.axis.position.x + this.padding.left, this.axis.position.y + this.padding.top, 4, 0, _Constants__WEBPACK_IMPORTED_MODULE_1__["TWO_PI"]);\n      ctx.stroke();\n      ctx.closePath(); // Red box around the graph dimensions.\n\n      ctx.beginPath();\n      ctx.lineWidth = 1;\n      ctx.strokeStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].RED;\n      ctx.rect(0, 0, this.width, this.height);\n      ctx.rect(this.padding.left, this.padding.top, this.width - this.padding.left - this.padding.right, this.height - this.padding.top - this.padding.bottom);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    /**\n     * Draw function for the Graph and Plots called by the parent box.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var ctx = this.box.world.ctx; // Draw legends.\n\n      if (this.legends_enabled) {\n        var legendSpace = this.width / this.plots.length;\n\n        for (var i = 0; i < this.plots.length; i += 1) {\n          ctx.beginPath();\n          this.font.set({\n            size: 12,\n            baseline: "middle"\n          });\n          this.font.toCtx(ctx);\n          var x = Math.floor(legendSpace / 2 + legendSpace * i);\n          var y = Math.floor(this.padding.top * 0.3);\n          ctx.fillText(this.plots[i].label, x, y);\n          ctx.fillStyle = this.plots[i].color;\n          ctx.arc(Math.floor(x - ctx.measureText(this.plots[i].label).width / 2 - 10), y, 4, 0, _Constants__WEBPACK_IMPORTED_MODULE_1__["TWO_PI"]);\n          ctx.fill();\n          ctx.closePath();\n        }\n      } // Draw Title\n\n\n      if (this.title !== "") {\n        this.font.set({\n          size: 14\n        });\n        this.font.toCtx(ctx);\n        ctx.beginPath();\n        ctx.fillText(this.title, Math.floor(this.width / 2), Math.floor(this.padding.top * 0.2));\n      } // Draw X Label\n\n\n      this.font.set({\n        size: 12,\n        baseline: \'bottom\'\n      });\n      this.font.toCtx(ctx);\n      ctx.fillText(this.xlabel, Math.floor(this.padding.left + this.axis.width / 2), Math.floor(this.height)); // Draw Y Label\n\n      ctx.save();\n      ctx.translate(Math.floor(0), Math.floor(this.padding.top + this.axis.height / 2));\n      ctx.rotate(_Constants__WEBPACK_IMPORTED_MODULE_1__["HALF_PI"]);\n      ctx.fillText(this.ylabel, 0, 0);\n      ctx.restore();\n      ctx.closePath(); // Draw Axis\n\n      ctx.translate(this.axis.position.x + this.padding.left, this.axis.position.y + this.padding.top);\n      this.ctx = ctx;\n      this.axis.draw(); // Draw plots.\n\n      for (var _i = 0; _i < this.plots.length; _i += 1) {\n        if (this.plots[_i].display) this.plots[_i].draw();\n      }\n    }\n  }]);\n\n  return Graph;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/box/Box.Graph.js?')},"./src/figures/box/Box.Label.js":
/*!**************************************!*\
  !*** ./src/figures/box/Box.Label.js ***!
  \**************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Label; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../WorldElement */ "./src/WorldElement.js");\n/* harmony import */ var _Box__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Box */ "./src/figures/Box.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n\n/**\n * A Label Box allows for a pair of label and value to be displayed. It is often used to display results.\n * A Label object is created by calling the method {@link Box.addLabel} on the parent Box.\n * @private\n * @class Label\n */\n\nvar Label =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Label, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the label in pixels.\n   * @param {number} height Height of the label in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Label(box, width, height, opts) {\n    var _this;\n\n    _classCallCheck(this, Label);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Label).call(this));\n    /**\n     * Sets the parent box where te Label will be placed.\n     * @type {Box}\n     */\n\n    _this.box = box;\n    /**\n     * Sets the width of the Label in pixels.\n     * @type {number}\n     */\n\n    _this.width = width;\n    /**\n     * Sets the height of the Label in pixels.\n     * Default value is 14.\n     * @type {number}\n     */\n\n    _this.height = height || 14;\n    /**\n     * Sets the width that the name portion has. This also means that the value\n     * of the label is going to be displayed this amount of pixels to the left of it.\n     * Furthermore, the width of the label ({@link Label.width}) must be larger than this value.\n     * Default value is 75.\n     * @type {number}\n     */\n\n    _this.labelWidth = 75;\n    /**\n     * Name of the label.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.name = "";\n    /**\n     * Sets the formated value for the label. \n     * This is the value that is displayed along the name.\n     * @type {string}\n     */\n\n    _this.value = "";\n    /**\n     * Sets the units that the value will use.\n     * Default value is "".\n     * @type {string}\n     */\n\n    _this.units = "";\n    /**\n     * Flag for automatically using the (k)ilo, (M)ega, (G)iga prefixes in order to shorten\n     * the length of the value.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.usePrefixes = false;\n    /**\n     * Sets the amount of decimal places displayed on the value.\n     * Default value is 2.\n     * @type {number}\n     */\n\n    _this.decPlaces = 2;\n    /**\n     * Flag for fixing the decimal places to the amount set in {@link Label.decPlaces}.\n     * Default value is false.\n     * @type {boolean}\n     */\n\n    _this.fixPlaces = false; // Configure font settings for the label.\n\n    _this.font.set({\n      align: "left",\n      size: 14,\n      baseline: "middle",\n      color: _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY\n    }); // Apply user settings.\n\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Sets the value of the label. Given any new value it is formated into a string with\n   * the provided settings in the object.\n   * @public\n   * @param {number|string} value New value for the label.\n   */\n\n\n  _createClass(Label, [{\n    key: "set",\n    value: function set(value) {\n      var newValue = value;\n\n      if (_Utils__WEBPACK_IMPORTED_MODULE_0__["isString"](newValue)) {\n        this.value = newValue;\n      } else {\n        var absValue = Math.abs(value);\n        var newUnits = this.units;\n\n        if (this.usePrefixes) {\n          if (absValue > 1e32) {\n            newValue = _Constants__WEBPACK_IMPORTED_MODULE_1__["SYMBOL"].INF;\n          } else if (absValue > 1e9) {\n            newValue /= 1e9;\n            newUnits = "G".concat(this.units);\n          } else if (absValue > 1e6) {\n            newValue /= 1e6;\n            newUnits = "M".concat(this.units);\n          } else if (absValue > 1e3) {\n            newValue /= 1e3;\n            newUnits = "k".concat(this.units);\n          }\n        }\n\n        this.value = _Utils__WEBPACK_IMPORTED_MODULE_0__["formatValue"](newValue, newUnits, this.decPlaces, this.fixPlaces);\n      }\n    }\n    /**\n     * Debug function used to draw a box around the dimensions of the label object.\n     * It is only drawn if the parent box has the flag {@link Box.debug} enabled.\n     * @private\n     */\n\n  }, {\n    key: "debug",\n    value: function debug() {\n      var ctx = this.box.world.ctx;\n      ctx.beginPath();\n      ctx.strokeStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].BLUE;\n      ctx.rect(0, 0, this.width, this.height);\n      ctx.moveTo(this.labelWidth, 0);\n      ctx.lineTo(this.labelWidth, this.height);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    /**\n     * Draw function for the Label called by the parent box.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var ctx = this.box.world.ctx;\n      ctx.beginPath();\n      this.font.toCtx(ctx);\n      ctx.fillText(this.name, 0, this.height / 2);\n      ctx.fillText(this.value, this.labelWidth, this.height / 2);\n      ctx.closePath();\n    }\n  }]);\n\n  return Label;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/box/Box.Label.js?')},"./src/figures/box/Box.Text.js":
/*!*************************************!*\
  !*** ./src/figures/box/Box.Text.js ***!
  \*************************************/
/*! exports provided: default */function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Text; });\n/* harmony import */ var _Utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../Utils */ "./src/Utils.js");\n/* harmony import */ var _Constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../Constants */ "./src/Constants.js");\n/* harmony import */ var _WorldElement__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../WorldElement */ "./src/WorldElement.js");\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\n\n\n\n/**\n * A Text Box allows for text to be displayed on a Box element. The text can be multiline\n * containing \\n caracters.\n * A Text object is created by calling the method {@link Box.addText} on the parent Box.\n * @private\n * @class Text\n */\n\nvar Text =\n/*#__PURE__*/\nfunction (_WorldElement) {\n  _inherits(Text, _WorldElement);\n\n  /**\n   * @constructor\n   * @param {Box} box Parent box.\n   * @param {number} width Width of the text in pixels.\n   * @param {number} height Height of the text in pixels.\n   * @param {object} [opts] Object that contains valid Text properties with values. Their values will be assigned at the end of the constructor. If an invalid property is passed then the value will be ignored.\n   */\n  function Text(box, width, height, opts) {\n    var _this;\n\n    _classCallCheck(this, Text);\n\n    // Extend WorldElement.\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Text).call(this));\n    /**\n     * Sets the parent box where te Text will be placed.\n     * @type {Box}\n     */\n\n    _this.box = box;\n    /**\n     * Sets the width of the Text in pixels.\n     * @type {number}\n     */\n\n    _this.width = width;\n    /**\n     * Sets the height of the Text in pixels.\n     * @type {number}\n     */\n\n    _this.height = height;\n    /**\n     * Contains the string to be displayed separated by every \\n character.\n     * Default value is [].\n     * @type {string[]}\n     */\n\n    _this.text = []; // Configure font settings for the text.\n\n    _this.font.set({\n      align: "left",\n      size: 14,\n      baseline: "top",\n      color: _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].GRAY\n    }); // Apply user settings.\n\n\n    _Utils__WEBPACK_IMPORTED_MODULE_0__["loadOptions"](_assertThisInitialized(_assertThisInitialized(_this)), opts);\n    return _this;\n  }\n  /**\n   * Sets the text that will be displayed. The text can have multiple lines.\n   * @public\n   * @param {string} rawText Text to be displayed.\n   */\n\n\n  _createClass(Text, [{\n    key: "setText",\n    value: function setText(rawText) {\n      this.text = rawText.split("\\n");\n    }\n    /**\n     * Debug function used to draw a box around the dimensions of the text object.\n     * It is only drawn if the parent box has the flag {@link Box.debug} enabled.\n     * @private\n     */\n\n  }, {\n    key: "debug",\n    value: function debug() {\n      var ctx = this.box.world.ctx;\n      ctx.beginPath();\n      ctx.strokeStyle = _Constants__WEBPACK_IMPORTED_MODULE_1__["COLORS"].RED;\n      ctx.rect(0, 0, this.width, this.height);\n      ctx.stroke();\n      ctx.closePath();\n    }\n    /**\n     * Draw function for the Text called by the parent box.\n     * @private\n     */\n\n  }, {\n    key: "draw",\n    value: function draw() {\n      var ctx = this.box.world.ctx;\n      ctx.beginPath();\n      this.font.toCtx(ctx);\n\n      for (var i = 0; i < this.text.length; i += 1) {\n        ctx.fillText(this.text[i], 0, i * this.font.spacing * this.font.size);\n      }\n\n      ctx.closePath();\n    }\n  }]);\n\n  return Text;\n}(_WorldElement__WEBPACK_IMPORTED_MODULE_2__["default"]);\n\n\n\n//# sourceURL=webpack:///./src/figures/box/Box.Text.js?')}});